//***************************************************************************
// 09/25/2018 DD Created Audit Program 
//
// DD 09/28/2018 - Coverted Old, New Values and Column Names to XML 
//                 since eFront will concatenate sevral data elements in one field USERTEXT4
// TFS10379 - BR 09/29/2020 - Caught the "Conversion Error" when getting the OLDVALUES, NEWVALUES, and COLNAMES 
// 002 05/09/2022 MB Updated report to only pull new records or changed records 
//***************************************************************************
LIBNAME LOCAL ".";

%param Start_Date  label="<b>From Date:(mm-dd-yyyy hh:mi:ss)</b><BR><BR>" type=DATE;
%param End_Date  label="<b>To Date:(mm-dd-yyyy hh:mi:ss)</b><BR><BR>" type=DATE;



DATA WORK.EFRONT_AUDIT;    
   SQL "select     
              Case 
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT10%'
                   then 'ACCOUNT NAME'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT12%'
                   then 'Our Bank Code'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT13%'
                   then 'Include in BAI Integrity File'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT6%'
                   then 'Int SWIFT / BIC'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT4%'
                   then 'IBAN'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT1%'
                   then 'Intermediary Bank'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT2%'
                   then 'Intermediary Account Number'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT3%'
                   then 'Intermediary Branch'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT5%'
                   then 'Intermediary For Further Credit To'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT7%'
                   then 'Intermediary ABA'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT8%'
                   then 'Intermediary Sort Code'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT9%'
                   then 'Intermediary Additional Instructions'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT11%'
                   then 'Transit Number'
                 when CONVERT(VARCHAR(MAX), NEWVALUES) Like '%<X>NA</X>%'
                   then 'Deleted'
                 else
                   CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES)
               end            COLNAMES
             , f1.my_Split_COLNAMES_len as Col_len
             , Case 
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT13%' and  f1.my_Split_OLDVALUES = '1'
                   then 'Yes'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT13%' and  f1.my_Split_OLDVALUES = '2'
                   then 'No'   
                 else
                   f1.my_Split_OLDVALUES 
               end            OLDVALUES
             , Case 
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT13%' and  f1.my_Split_NEWVALUES = '1'
                   then 'Yes'
                 when CONVERT(VARCHAR(MAX), f1.my_Split_COLNAMES) Like '%USERTEXT13%' and  f1.my_Split_NEWVALUES = '2'
                   then 'No'   
                 else
                   f1.my_Split_NEWVALUES 
               end            NEWVALUES
             , f1.RowNumberT2
             , f1.RowNumberT3
             , f1.RowNumberT4
             , f1.UserName
             , f1.IQCREATIONDATE
             , f1.IQMODIFICATIONDATE
             , f1.TABNAME
             , f1.Bank_Name
             , CASE
                   when f1.Bank_Name like '%-%' then LTRIM(RTRIM(SUBSTRING(f1.Bank_Name,1,(CHARINDEX('-',f1.Bank_Name,1)-1))))
                   else ''
               end as Portfolio    --002
             , CONVERT(VARCHAR(MAX),f1.OLDVALUES) _OLDVALUES 
             , CONVERT(VARCHAR(MAX),f1.NEWVALUES) _NEWVALUES
             , CONVERT(VARCHAR(MAX),f1.COLNAMES)  _COLNAMES
             , f1._Audit_COLNAMES
             , f1._Audit_OLDVALUES
             , f1._Audit_NEWVALUES
             , f1._BeforeColsChg
             , f1.description
             , Len(my_Split_OLDVALUES) L__old
             , len(my_Split_NEWVALUES) L__new
             --remove
             , COLNAMES_SPCH
             , NEWVALUES_SPCH
             , OLDVALUES_SPCH
          from (select CONVERT(VARCHAR(MAX),T1.COLNAMES)            COLNAMES
                    , CONVERT(VARCHAR(MAX),T2.my_Split_COLNAMES)   my_Split_COLNAMES
                    , CONVERT(VARCHAR(MAX),T3.my_Split_OLDVALUES)  my_Split_OLDVALUES
                    , CONVERT(VARCHAR(MAX),T4.my_Split_NEWVALUES)  my_Split_NEWVALUES
                    , Case 
                        when CONVERT(VARCHAR(MAX),T4.my_Split_NEWVALUES) Like '%<X>NA</X>%'
                          then len('Deleted')
                        else  
                          len(T2.my_Split_COLNAMES)
                      end              my_Split_COLNAMES_len
                    , T2.RowNumberT2
                    , T3.RowNumberT3
                    , T4.RowNumberT4
                    , T1.UserName
                    , T1.IQCREATIONDATE
                    , T1.IQMODIFICATIONDATE
                    , T1.TABNAME
                    , T1.Bank_Name 
                    , CONVERT(VARCHAR(MAX), t1.OLDVALUES) OLDVALUES 
                    , CONVERT(VARCHAR(MAX), t1.NEWVALUES) NEWVALUES
                    , t1._Audit_COLNAMES
                    , t1._Audit_OLDVALUES
                    , t1._Audit_NEWVALUES
                    , t1._beforecolschg     _beforecolschg
                    , t1.description
                    , t1.COLNAMES_SPCH
                    , t1.NEWVALUES_SPCH
                    , t1.OLDVALUES_SPCH
                  
                  from
                    (select  amd.IQMODIFICATIONUSER              UserName
                           , amd.IQCREATIONDATE                  IQCREATIONDATE
                           , amd.IQMODIFICATIONDATE              IQMODIFICATIONDATE  
                           , CONVERT(VARCHAR(MAX), amd.TABNAME)  TABNAME
                           , CONVERT(VARCHAR(MAX), amd.COLNAMES) _beforecolschg
                           , vcba.ACCOUNTCODE                    Bank_Name
                           

                            --TFS10379 find the 5 xml special characters... ampersand, apostrophe, greater than, less than, doublequote
                            --flag the data with special characters so we can replace it later...
                            
                            , CASE WHEN CONVERT(VARCHAR(MAX), amd.COLNAMES) LIKE '%'+char(38)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.COLNAMES) LIKE '%'+char(62)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.COLNAMES) LIKE '%'+char(60)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.COLNAMES) LIKE '%'+char(39)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.COLNAMES) LIKE '%'+char(34)+'%'
                               THEN 'SPECIAL_CHAR' 
                               END COLNAMES_SPCH

                             , CASE WHEN CONVERT(VARCHAR(MAX), amd.OLDVALUES) LIKE '%'+char(38)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.OLDVALUES) LIKE '%'+char(62)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.OLDVALUES) LIKE '%'+char(60)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.OLDVALUES) LIKE '%'+char(39)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.OLDVALUES) LIKE '%'+char(34)+'%'
                               THEN 'SPECIAL_CHAR'
                               END OLDVALUES_SPCH
                               
                               , CASE WHEN CONVERT(VARCHAR(MAX), amd.NEWVALUES) LIKE '%'+char(38)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.NEWVALUES) LIKE '%'+char(62)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.NEWVALUES) LIKE '%'+char(60)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.NEWVALUES) LIKE '%'+char(39)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.NEWVALUES) LIKE '%'+char(34)+'%'
                               THEN 'SPECIAL_CHAR'
                               END NEWVALUES_SPCH
                            
                            
                            --TFS10379 if any of the special characters are found, then tokenize them with [SYMB_<some character>] so the xml parser can parse the data, check for deletes first for efficiency sake
                            --COLNAMES
                            , CASE WHEN audtyp.description LIKE '%Delete%'
                                     THEN '<X>'+'NA'+'</X>'
                           
                               WHEN (CONVERT(VARCHAR(MAX), amd.COLNAMES) LIKE '%'+char(38)+'%' 
                                   OR CONVERT(VARCHAR(MAX), amd.COLNAMES) LIKE '%'+char(62)+'%' 
                                   OR CONVERT(VARCHAR(MAX), amd.COLNAMES) LIKE '%'+char(60)+'%' 
                                   OR CONVERT(VARCHAR(MAX), amd.COLNAMES) LIKE '%'+char(39)+'%' 
                                   OR CONVERT(VARCHAR(MAX), amd.COLNAMES) LIKE '%'+char(34)+'%') 
                                   AND audtyp.description NOT LIKE '%Delete%'
                                        THEN CAST('<X>'+replace(
                                                            replace(replace(replace(replace(replace(CONVERT(VARCHAR(MAX), amd.COLNAMES), char(38), '[SYMB_amp]'), char(62), '[SYMB_gt]'), char(60),'[SYMB_lt]'), char(39),'[SYMB_apos]'), char(34), '[SYMB_quot]')
                                                         ,char(01), '</X><X>')
                                              +'</X>' as XML)     

                                 WHEN CHARINDEX(char(01), amd.COLNAMES ) > 0 AND audtyp.description NOT LIKE '%Delete%'
                                     THEN CAST('<X>'+replace(CONVERT(VARCHAR(MAX), amd.COLNAMES),char(01),'</X><X>')+'</X>' as XML)         -- Convert Column Names to XML
                             END COLNAMES      
                             
                             
                             --OLDVALUES
                             , CASE WHEN audtyp.description LIKE '%Delete%'
                                      THEN '<X>'+'NA'+'</X>'
                                 
                               WHEN (CONVERT(VARCHAR(MAX), amd.OLDVALUES) LIKE '%'+char(38)+'%' 
                                   OR CONVERT(VARCHAR(MAX), amd.OLDVALUES) LIKE '%'+char(62)+'%' 
                                   OR CONVERT(VARCHAR(MAX), amd.OLDVALUES) LIKE '%'+char(60)+'%' 
                                   OR CONVERT(VARCHAR(MAX), amd.OLDVALUES) LIKE '%'+char(39)+'%' 
                                   OR CONVERT(VARCHAR(MAX), amd.OLDVALUES) LIKE '%'+char(34)+'%') 
                                   AND audtyp.description NOT LIKE '%Delete%'
                                     THEN CAST('<X>'+replace(
                                                         replace(replace(replace(replace(replace(CONVERT(VARCHAR(MAX), amd.COLNAMES), char(38), '[SYMB_amp]'), char(62), '[SYMB_gt]'), char(60),'[SYMB_lt]'), char(39),'[SYMB_apos]'), char(34), '[SYMB_quot]')
                                                     ,char(01), '</X><X>')
                                          +'</X>' as XML)    
                                   
                                   WHEN CHARINDEX(char(01), amd.OLDVALUES ) > 0 AND audtyp.description NOT LIKE '%Delete%'
                                     THEN CAST('<X>'+replace(CONVERT(VARCHAR(MAX), amd.OLDVALUES),char(01),'</X><X>')+'</X>' as XML)         -- Convert Old Values to XML
                              END OLDVALUES        
                             
                             --NEWVALUES
                             , CASE WHEN audtyp.description LIKE '%Delete%'
                                     THEN '<X>'+'NA'+'</X>'
                             
                             WHEN (CONVERT(VARCHAR(MAX), amd.NEWVALUES) LIKE '%'+char(38)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.NEWVALUES) LIKE '%'+char(62)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.NEWVALUES) LIKE '%'+char(60)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.NEWVALUES) LIKE '%'+char(39)+'%' 
                               OR CONVERT(VARCHAR(MAX), amd.NEWVALUES) LIKE '%'+char(34)+'%') AND audtyp.description NOT LIKE '%Delete%'
                                     THEN CAST('<X>'+replace(
                                                         replace(replace(replace(replace(replace(CONVERT(VARCHAR(MAX), amd.NEWVALUES), char(38), '[SYMB_amp]'), char(62), '[SYMB_gt]'), char(60),'[SYMB_lt]'), char(39),'[SYMB_apos]'), char(34), '[SYMB_quot]')
                                                     ,char(01), '</X><X>')
                                          +'</X>' as XML) 
                                 
                                 WHEN CHARINDEX(char(01), amd.NEWVALUES ) > 0 AND audtyp.description NOT LIKE '%Delete%'
                                     THEN CAST('<X>'+replace(CONVERT(VARCHAR(MAX), amd.NEWVALUES),char(01),'</X><X>')+'</X>' as XML)         -- Convert New Values to XML
                             END NEWVALUES  
                             
                             
                             --pass in the raw values to _Audit_* columns
                           , CONVERT(VARCHAR(MAX), amd.COLNAMES)  _Audit_COLNAMES
                           , CONVERT(VARCHAR(MAX), amd.OLDVALUES) _Audit_OLDVALUES
                           , CONVERT(VARCHAR(MAX), amd.NEWVALUES) _Audit_NEWVALUES
                           , audtyp.description 
                           
                       from ADMAUDIT amd
                         Join VCBANKACCOUNT vcba
                            on vcba.iqid = amd.KEY1
                         Join ADMAUDITTYPE audtyp
                            on audtyp.CODE  = amd.MODTYPE
                       where amd.IQMODIFICATIONUSER  <>  'SVC4EFRONT'
                         and amd.TABNAME <> 'ADMUSER'
                         and amd.IQMODIFICATIONDATE >=  "& DML(%START_DATE) &"
                         and amd.IQMODIFICATIONDATE <  "& DML(%END_DATE) &"

                         
                        -- and CONVERT(VARCHAR, amd.COLNAMES) not in ('Current profile','profiles list')
                    ) t1
                    cross apply   -- Parse Column Names 
                       (  SELECT  my_Data.D.value('.','varchar(200)')  as my_Split_COLNAMES
                                 , row_number() over(order by my_Data.D) as RowNumberT2
                            FROM T1.COLNAMES.nodes('X') as my_Data(D) 
                       ) T2
                    cross apply   -- Parse Original Values
                       (  SELECT  my_Data2.D.value('.','varchar(200)') as my_Split_OLDVALUES
                                 , row_number() over(order by my_Data2.D) as RowNumberT3
                            FROM  T1.OLDVALUES.nodes('X') as my_Data2(D)
                       ) T3
                    cross apply   -- Parse New Values
                       (  SELECT  my_Data3.D.value('.','varchar(200)') as my_Split_NEWVALUES
                                 , row_number() over(order by my_Data3.D) as RowNumberT4
                            FROM  T1.NEWVALUES.nodes('X') as my_Data3(D)
                       ) T4
                 --remove
                 where  RowNumberT2 = RowNumberT3
                   and RowNumberT3 = RowNumberT4
                --    and len(my_Split_COLNAMES) > 0 
               ) f1
          where f1.my_Split_COLNAMES_len > 0
";          



COLUMN COLNAMES;
RUN;   
//PROC PRINT DATA=WORK.EFRONT_AUDIT;RUN; 

//TFS10379 We have to take the tokenized special characters out of the data and then replace them with the real characters now...
DATA WORK.EFRONT_AUDIT;
    SET WORK.EFRONT_AUDIT;
	IF OLDVALUES_SPCH = "SPECIAL_CHAR"
		THEN OLDVALUES = replace(replace(replace(replace(replace(OLDVALUES, "[SYMB_quot]", '"'), "[SYMB_gt]", ">"),  "[SYMB_lt]", "<"), "[SYMB_apos]", "'"), "[SYMB_amp]", "&");
	END;
	IF NEWVALUES_SPCH = "SPECIAL_CHAR"
		THEN NEWVALUES = replace(replace(replace(replace(replace(NEWVALUES, "[SYMB_quot]", '"'), "[SYMB_gt]", ">"),  "[SYMB_lt]", "<"), "[SYMB_apos]", "'"), "[SYMB_amp]", "&");
	END;
	IF COLNAMES_SPCH = "SPECIAL_CHAR"
		THEN COLNAMES = replace(replace(replace(replace(replace(COLNAMES, "[SYMB_quot]", '"'), "[SYMB_gt]", ">"),  "[SYMB_lt]", "<"), "[SYMB_apos]", "'"), "[SYMB_amp]", "&");
	END; 
RUN;


//002 begin
//finding bank accounts that are linked to portfolios for comments section
PROC FAQUERY QUERY="IT Admin - Program Queries\Bank Account Change Log";
    TABLE 'Portfolios' OUT = WORK.Portfolios;
RUN;

DATA WORK.Portfolios (DROP = Type);
    SET WORK.Portfolios;
    COLUMN Portfolio_Bank_Account TYPE = Boolean;
    Portfolio_Bank_Account = 'True';
RUN;
//PROC PRINT DATA = WORK.Portfolios; RUN;

DATA WORK.EFRONT_AUDIT;
    MERGE WORK.EFRONT_AUDIT (IN = OK_L)
          WORK.Portfolios (IN = OK_R);
    BY Portfolio;
    if (OK_L) then Output;
    end;
RUN;
//PROC PRINT DATA = WORK.EFRONT_AUDIT; RUN;

//finding bank accounts linked to funds that have an intiial funding within date parameters for comments section
PROC FAQUERY QUERY="IT Admin - Program Queries\Bank Account Change Log";
    TABLE 'Bank Account - Fund Links' OUT = WORK.Bank_Account_Fund_Links;
RUN;

DATA WORK.EFRONT_AUDIT;
    MERGE WORK.EFRONT_AUDIT (IN = OK_L)
          WORK.Bank_Account_Fund_Links (IN = OK_R);
    BY Bank_Name;
    if (OK_L) then Output;
    end;
RUN;
//PROC PRINT DATA = WORK.EFRONT_AUDIT; RUN;

PROC FAQUERY QUERY="IT Admin - Program Queries\Bank Account Change Log";
    TABLE 'Funds - Initial Funding' OUT = WORK.Fund_Initial_Funding;
RUN;

PROC MEANS DATA = WORK.Fund_Initial_Funding     
    OUT = WORK.Fund_Initial_Funding;
    CLASS Fund;
    VAR Fund_Status;
    MIN Effective_Date (NAME = Initial_Call_Date);
RUN;
//PROC PRINT DATA = WORK.Fund_Initial_Funding; RUN;

DATA WORK.Fund_Initial_Funding;
    SET WORK.Fund_Initial_Funding (WHERE Initial_Call_Date >= %Start_Date and Initial_Call_Date <= %End_Date);
RUN;
//PROC PRINT DATA = WORK.Fund_Initial_Funding; RUN;

DATA WORK.EFRONT_AUDIT;
    MERGE WORK.EFRONT_AUDIT (IN = OK_L)
          WORK.Fund_Initial_Funding (IN = OK_R);
    BY Fund;
    if (OK_L) then Output;
    end;
RUN;
//PROC PRINT DATA = WORK.EFRONT_AUDIT; RUN;


DATA WORK.EFRONT_AUDIT;
    SET WORK.EFRONT_AUDIT;
    COLUMN OLDVALUES_UPD TYPE = STRING;
    COLUMN NEWVALUES_UPD TYPE = STRING;
    COLUMN COMMENT TYPE = STRING;
   
    NEWVALUES_UPD = NEWVALUES;
    
    if Description like '%Creation%' then OLDVALUES_UPD = '';
    else OLDVALUES_UPD = OLDVALUES;
    end;
    
    if ColNames = 'IQREGIONID' and OLDVALUES = 'F91359C1D2854577933599682068A0F7' then OLDVALUES_UPD = 'Shared';
    elseif ColNames = 'IQREGIONID' and OLDVALUES = '912E923517B643F3AF6A5F685150AA7C' then OLDVALUES_UPD = 'RGAx';
    elseif ColNames = 'IQREGIONID' and OLDVALUES = 'C4C3F13D13D4470588398CA6CD100AB9' then OLDVALUES_UPD = 'Private Debt & Equity';
    elseif ColNames = 'IQREGIONID' and OLDVALUES = '8ABF97E871E442FFA405DAC2A8E125D4' then OLDVALUES_UPD = 'REJV';
    elseif ColNames = 'IQREGIONID' and OLDVALUES = 'FBFCB25235AA4E45ABA1521DA0B01361' then OLDVALUES_UPD = 'Structured Alternatives';
    elseif ColNames = 'IQREGIONID' and OLDVALUES = '05374890080D4C31B1AF350A16A15713' then OLDVALUES_UPD = 'ECI Fund Shadow';
    end;
    
    if ColNames = 'IQREGIONID' and NEWVALUES = 'F91359C1D2854577933599682068A0F7' then NEWVALUES_UPD = 'Shared';
    elseif ColNames = 'IQREGIONID' and NEWVALUES = '912E923517B643F3AF6A5F685150AA7C' then NEWVALUES_UPD = 'RGAx';
    elseif ColNames = 'IQREGIONID' and NEWVALUES = 'C4C3F13D13D4470588398CA6CD100AB9' then NEWVALUES_UPD = 'Private Debt & Equity';
    elseif ColNames = 'IQREGIONID' and NEWVALUES = '8ABF97E871E442FFA405DAC2A8E125D4' then NEWVALUES_UPD = 'REJV';
    elseif ColNames = 'IQREGIONID' and NEWVALUES = 'FBFCB25235AA4E45ABA1521DA0B01361' then NEWVALUES_UPD = 'Structured Alternatives';
    elseif ColNames = 'IQREGIONID' and NEWVALUES = '05374890080D4C31B1AF350A16A15713' then NEWVALUES_UPD = 'ECI Fund Shadow';
    end;
    
    if Description like '%Creation%' and Portfolio_Bank_Account = 'True' then Comment = 'New MDM Portfolio Added to eFront';
    elseif Description like '%Creation%' and Fund IS NOT NULL and Initial_Call_Date IS NOT NULL then Comment = 'New Fund, first call' + ' ' + CDATE(Initial_Call_Date);
    //elseif Description like '%Creation%' and Fund IS NOT NULL then Comment = 'New Bank Account Created in Front Linked to Fund';
    elseif Description like '%Creation%' then Comment = 'New Bank Account Created in eFront';
    elseif Description like '%Update%' then Comment = 'Minor change, reasonable';
    end;
RUN;
//PROC PRINT DATA = WORK.EFRONT_AUDIT; RUN;

DATA LOCAL.EFRONT_AUDIT;
    SET WORK.EFRONT_AUDIT (WHERE NEWVALUES_UPD <> OLDVALUES_UPD);
RUN;

/*
PROC EXPORTEXCEL FILE=GETTEMPPATH()+"\Bank Account Change Log.xlsx" LABEL;
   TABLE = LOCAL.EFRONT_AUDIT
   SHEETNAME="Audit";
RUN;
*/
//002 end

//PROC PRINT DATA = WORK.EFRONT_AUDIT; RUN;
//PROC PRINT DATA=LOCAL.EFRONT_AUDIT;RUN;                                                                                                                                                                                                                                          
