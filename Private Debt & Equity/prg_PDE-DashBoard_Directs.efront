//One can find 'NA' dispersed among the fields that would be normally a number/double, but now must be a string field in order to cram in the NA. 
//This means percentages had to be formatted in SQL STR() functions...
//As a result, math on this field is harder, but not impossible, to do so, substr out the '%' character and then convert to DBL and then do the math, then try to reformat the value with a picture or concatenate the string
//This would be easier to maintain if numbers could be NULL instead of NA

LIBNAME USER 'PDE_Dashboard_Tables';

%DEFINE REPORT_DATE;
%DEFINE CALCULATE_IRR;
%DEFINE USE_INVESTEE_CURR;

%PARAM DATE LABEL="Enter End Date for Directs" TYPE=DATE DEFAULT=TODAY NOTNULL;
%PARAM PORT_SNAPSHOT_FUNDS_DATE LABEL = "Enter End Date for Portfolio Snapshot Fund" TYPE=DATE DEFAULT=TODAY NOTNULL;

%LET DATE=%DATE;
%LET ORIG_DATE=%DATE;

//%LET Current_Qtr_End_Date = FORMAT(QuarterEndDate(%Date), "MM/dd/yyyy");  // set end date to end of current Qtr other wise the the next line of code will not work   
//%LET Prior_Qtr_1 = DateAdd("QUARTER", -1, %DATE); // %Current_Qtr_End_Date); 
//%LET Prior_Qtr = FORMAT(MONTHENDDATE(%Prior_Qtr_1), "MM/dd/yyyy");  

//set the snapshot fund date to the quarter lag
//%LET Prior_Qtr_1 = DateAdd("QUARTER", -1, %PORT_SNAPSHOT_FUNDS_DATE); // %Current_Qtr_End_Date); 
//%LET Prior_Qtr = FORMAT(MONTHENDDATE(%Prior_Qtr_1), "MM/dd/yyyy"); 

%LET PERCENT_FORMAT = '0.0%;(0.0%);0.0%';

%DEFINE FX_RATE_DATE;
//%let Current_Qtr_End_Date = FORMAT(QuarterEndDate(%Date), 'MM/dd/yyyy');  // set end date to end of current Qtr other wise the the next line of code will not work   
//%let Prior_Qtr = DateAdd("QUARTER", -1, %Current_Qtr_End_Date);

//LOANS QUERY

DATA WORK.INVSTINS;								   
	SQL "
           WITH INVESTMENTS AS (
            
            SELECT 
            MIN(INVINS.ACCOUNTINS)                          AS INVINS_ACCOUNTINS
            ,MIN(VCINV.IQID)                                AS VCINV_IQID
            ,MIN(INVINS.USERTEXT19)                         AS RGA_CUSIP
			,MIN(SFA_CMP.IQID)                              AS SFA_CMP_IQID 
            ,MIN(INVINS.IQID)                               AS INVINS_IQID
            ,MIN(SFA_CMP.INDUSTRY)                          AS SFA_CMP_INDUSTRY
            ,MIN(INVINS.UserText49)                         AS ADMINISTRATIVE_AGENT
            
            ,SUM((CASE WHEN OPT.Code IN ('LN02','LN03','LN70','LN71','LN81','LN82') THEN A.AMOUNT2 ELSE 0 END)*(-1))    AS INVESTMENT_AMOUNT
            ,SUM((CASE WHEN Opt.Code = 'LN01' THEN A.Commitment2 ELSE 0 END)* (-1))    AS COMMITMENT
           
            ,CAST(DATEPART(YYYY,MIN(A.CLOSEDATE)) AS varchar(4)) INV_YEAR
            ,MIN(VCPRT.PORTFOLIO)                           AS PORTFOLIO
            ,MIN(SFA_CMP.ShortName)                         AS short_code
            ,MIN(VCINV.ACCOUNT)                             AS VCINV_ACCOUNT
            ,MIN(INVINS.LIBELLE)                            AS COMPANY_LEGAL_NAME
            ,MIN(INVINS.CURRENCY1)                          AS INST_CURR
            ,MIN(SFAS.CITY)				                    AS HQ_CITY
            ,MIN(STATES.STATECODE)	                        AS HQ_STATE
            ,MIN(COUNTRIES.ISOALPHA3)                       AS HQ_COUNTRY
            ,CASE MIN(INVINS.UserText50) 
                WHEN 1 THEN 'C-Corp'
                WHEN 2 THEN 'LP'
                WHEN 3 THEN 'LLC'
                WHEN 4 THEN 'Other'
            END                                             AS LEGAL_STRUCTURE 
            ,CASE MIN(INVINS.UserText16)
                WHEN 1 THEN 'Lead'
                WHEN 2 THEN 'Co-Lead'
                WHEN 3 THEN 'Participant'
            END                                            AS PDE_ROLE
            ,COALESCE(MIN(INVINS.UserText17), 'NA')                         AS AMORTIZATION
                
            --,MIN(INVINS.USERTEXT46) INSTR_STATUS        --- DD 2018_02_28 added new field base on Ticket ITM0251960
            ,MIN(SFA_CMP.NAME) COMPANY
            ,MIN(CAST(SFA_CMP.DESCRIPTION AS nvarchar(max))) AS COMPANY_DESCRIPTION
            ,MIN(SFA_CMP.CREATIONDATE) CREATIONDATE 
	 
            ,MIN(InvIns.UserDate2) as USERDATE2     
            ,MIN(INVINS.CURRENCY1) CURRENCY
            ,MIN(INVINS.USERTEXT18) AS TOTAL_FACILITY_SIZE
            
            ,MIN(ltrim(rtrim(INVINS.usertext23))) Cusip
            
            ,CASE 
                 WHEN MIN(INVINS.UserText47) IN ('1','2','3','4','5','6') THEN 'Unitranche'
                 WHEN MIN(INVINS.UserText47) IN ('7','8','9') THEN 'Mezzanine'
                 ELSE 'NA'
             END as UNITRANCHE_MEZZ
		
            ,CASE
                 WHEN MIN(INVINS.UserText47) IN ('1','2') THEN '1st Lien'
                 WHEN MIN(INVINS.UserText47) IN ('3','4') THEN 'Split 1st Lien'
                 WHEN MIN(INVINS.UserText47) IN ('5','6','7') THEN '2nd Lien'
                 WHEN MIN(INVINS.UserText47) IN ('8','9') THEN 'Unsecured'
                 ELSE 'NA'
             END as Collateral

            ,(CASE MIN(INVINS.USERTEXT47)
                    when  '1' then 'Revolver' 
                    when  '2' then 'Term Loan' 
                    when  '3' then 'Strip Unitranche' 
                    when  '4' then 'Split First Lien' 
                    when  '5' then 'Bifurcated LO Unitranche' 
                    when  '6' then 'Second Lien' 
                    when  '7' then 'Senior Secured Sub. Debt' 
                    when  '8' then 'Senior Unsecured Sub. Debt' 
                    when  '9' then 'Junior Sub. Debt' 
                    when  '10' then 'Preferred Equity' 
                    when  '11' then 'Common Equity' 
                    when  '12' then 'Warrant' 
            end) as FACILITY
                 
            , (CASE MIN(INVINS.USERTEXT47)
                when '1' then 'Senior Debt' 
                when '2' then 'Senior Debt' 
                when '3' then 'Unitranche Debt' 
                when '4' then 'Unitranche Debt'
                when '5' then 'Second Lien Debt' 
                when '6' then 'Second Lien Debt' 
                when '7' then 'Subordinated Debt'
                when '8' then 'Subordinated Debt'
                when '9' then 'Subordinated Debt'
                when '10' then 'Preferred Equity'
                when '11' then 'Common Equity'
                when '12' then 'Common Equity'
            end) as SENIORITY  
             
            ,(case 
                when MIN(INVINS.USERTEXT41) = '1' then 'Debt Hedge Fund' 
                when MIN(INVINS.USERTEXT41) = '2' then 'Alternatives Preferred Stock' 
                when MIN(INVINS.USERTEXT41) = '3' then 'Senior Secured Loan' 
                when MIN(INVINS.USERTEXT41) = '4' then 'Subordinated Loan' 
                when MIN(INVINS.USERTEXT41) = '5' then 'Distressed Debt' 
                when MIN(INVINS.USERTEXT41) = '6' then 'Real Asset Debt' 
                when MIN(INVINS.USERTEXT41) = '7' then 'Senior Secured Loan' 
                when MIN(INVINS.USERTEXT41) = '8' then 'Subordinated Loan/Mezzanine Funds' 
                when MIN(INVINS.USERTEXT41) = '9' then 'Senior Secured Loan' 
                when MIN(INVINS.USERTEXT41) = '10' then 'Subordinated Loan' 
                when MIN(INVINS.USERTEXT41) = '11' then 'Senior Secured Loan' 
                when MIN(INVINS.USERTEXT41) = '12' then 'Subordinated Loan' 
                when MIN(INVINS.USERTEXT41) = '13' then 'Equity Hedge Fund' 
                when MIN(INVINS.USERTEXT41) = '14' then 'Alternatives Common Stock' 
                when MIN(INVINS.USERTEXT41) = '15' then 'Alternatives Preferred Stock' 
                when MIN(INVINS.USERTEXT41) = '16' then 'Warrants' 
                when MIN(INVINS.USERTEXT41) = '17' then 'Buyout' 
                when MIN(INVINS.USERTEXT41) = '18' then 'Growth' 
                when MIN(INVINS.USERTEXT41) = '19' then 'Real Asset Equity' 
                when MIN(INVINS.USERTEXT41) = '20' then 'Secondary' 
                when MIN(INVINS.USERTEXT41) = '21' then 'Venture Capital' 
                when MIN(INVINS.USERTEXT41) = '22' then 'Structured Alternatives Common Stock' 
                when MIN(INVINS.USERTEXT41) = '23' then 'Structured Alternatives Preferred Stock' 
                when MIN(INVINS.USERTEXT41) = '24' then 'Senior Loan' 
                when MIN(INVINS.USERTEXT41) = '25' then 'Subordinated Loan' 
            end) as Security 
           
            
            ,MIN(SFA_CMP.USERTEXT30) AS DEAL_LEAD
            ,MIN(SFA_CMP.USERTEXT31) AS DEAL_SECONDARY
            ,MIN(SFA_CMP.USERTEXT32) AS DEAL_TERTIARY
            
			,COALESCE(MIN(RATE.BASERATE), MIN(LSTRATEPIK.BASERATE)) AS PIK
			,COALESCE(
                COALESCE(
                        (CASE WHEN MIN(FIXED_FLOAT_1.Floating) = 1 THEN 'Floating' WHEN MIN(FIXED_FLOAT_1.Floating) = '0' THEN 'Fixed' ELSE NULL END),
                        (CASE WHEN MIN(FIXED_FLOAT_2.Floating) = 1 THEN 'Floating' WHEN MIN(FIXED_FLOAT_2.Floating) = '0' THEN 'Fixed' END)
                ), 'NA'
            ) as Fixed_Floating


            --company ratings
            ,(CASE WHEN MIN(AjxCmp_EganJones.MetaText1) IS NOT NULL THEN MIN(AjxCmp_EganJones.MetaText1) ELSE 
                MIN(AjxCmpMax_EganJones.Rating) 
            END) as EganJonesCmpRating
            
            ,(CASE WHEN MIN(AjxCmp_NAIC.MetaText1) IS NOT NULL THEN MIN(AjxCmp_NAIC.MetaText1) ELSE 
                MIN(AjxCmpMax_NAIC.Rating) 
            END) as NAICCmpRating
            
            ,(CASE WHEN MIN(AjxCmp_PDE.MetaText1) IS NOT NULL THEN MIN(AjxCmp_PDE.MetaText1) ELSE 
                MIN(AjxCmpMax_PDE.Rating) 
            END) as PDERating
            
            --pde company raing score
            ,(CASE WHEN MIN(AjxCmp_PDE.MetaText5) IS NOT NULL THEN MIN(AjxCmp_PDE.MetaText5) ELSE 
                MIN(AjxCmpMax_PDE.Score) 
            END) as PDEScore
           
             --instrument ratings 
            ,(CASE WHEN MIN(AjxIns_EganJones.MetaText1) IS NOT NULL THEN MIN(AjxIns_EganJones.MetaText1) ELSE
                MIN(AjxInsMax_EganJones.Rating) 
            END) as EganJonesInsRating
            
            ,(CASE WHEN MIN(AjxIns_NAIC.MetaText1) IS NOT NULL THEN MIN(AjxIns_NAIC.MetaText1) ELSE
                MIN(AjxInsMax_NAIC.Rating)
            END) as NAICInsRating
            
            --egan jones Company rating expirationdate
            ,(CASE WHEN MIN(AjxCmp_EganJones.MetaDate2) IS NOT NULL THEN MIN(AjxCmp_EganJones.MetaDate2) ELSE
                MIN(AjxCmpMax_EganJones.EndDate) 
            END) as EganJonesCmpExpirationDate
            
            ,'NA' AS PERCENT_OWNERSHIP
            
            --helper columns (for frontscript below)
            ,MIN(OPT.CODE)        __OPT_CODE
            
            FROM VCINVESTMENTINS INVINS 
           
            JOIN VCINVESTMENT VCINV         
              ON VCINV.IQID = INVINS.INVESTMENT 
                AND VCINV.IQDELETED=0
                
            LEFT JOIN (SELECT  ACCOUNT, MAX(USERTEXT7) USERTEXT7, MAX(USERDATE5) USERDATE5, MAX(USERTEXT30) USERTEXT30 
                       FROM VCPROJECT VCP1 
                       WHERE VCP1.IQDELETED=0 
                           AND VCP1.WORKFLOW IN(SELECT IQID 
                                                  FROM ADMWORKFLOW 
                                                  WHERE LIBELLE IN('RGA Direct Mezzanine') AND IQDELETED=0)  
                           GROUP BY ACCOUNT                  
                    ) VCP ON VCP.ACCOUNT = VCINV.ACCOUNT 
						
			  
            LEFT JOIN SFAACCOUNT SFA 
                ON SFA.IQID = VCP.USERTEXT7  
              AND SFA.IQDELETED=0
              
            LEFT JOIN SFAACCOUNT SFA_CMP 
                ON SFA_CMP.IQID = VCINV.ACCOUNT   
              AND SFA_CMP.IQDELETED=0   
           
			
            LEFT JOIN SFASITE SFAS
			 ON SFA_CMP.MainSite = SFAS.IQID
			 AND SFAS.IQDeleted = 0

			LEFT JOIN VCSTATE STATES
            ON STATES.CODE = SFAS.STATE AND STATES.FILTER NOT LIKE '00000%'
             
            LEFT JOIN SFACOUNTRY COUNTRIES
            ON SFAS.COUNTRY = COUNTRIES.CODE AND COUNTRIES.FILTER NOT LIKE '00000%'
            
            --PIK Rate
              LEFT JOIN (SELECT 
                     RATEPIK.INVESTMENTINS
                    ,RATEPIK.FIRSTDATE                     
                    ,RATEPIK.LASTDATE
                    ,RATEPIK.BASERATE
                FROM VCINVESTINSRATE RATEPIK
                WHERE RATEPIK.KIND = (SELECT CODE FROM VCINVINSRATKIND WHERE DESCR = 'Loan Capitalized Interests')
                ) RATE
                
                ON  RATE.LASTDATE > " & DML(%DATE) & "
                AND RATE.FIRSTDATE <= " & DML(%DATE) & "     
                AND RATE.INVESTMENTINS =  INVINS.ACCOUNTINS
				  
                LEFT JOIN 
                 (SELECT 
                   RATEPIK_outer.INVESTMENTINS
                  ,RATEPIK_outer.BASERATE
                   FROM VCINVESTINSRATE RATEPIK_outer
                   WHERE RATEPIK_outer.KIND = (SELECT CODE FROM VCINVINSRATKIND WHERE DESCR = 'Loan Capitalized Interests')
                   AND RATEPIK_outer.LASTDATE = (
                       SELECT MAX(RATEPIK_inner.LASTDATE) FROM VCINVESTINSRATE RATEPIK_inner 
                           WHERE RATEPIK_inner.INVESTMENTINS = RATEPIK_outer.INVESTMENTINS
                   ) 
                 ) LSTRATEPIK
             
             ON LSTRATEPIK.INVESTMENTINS = INVINS.ACCOUNTINS 
            
			--Fixed Float
              LEFT JOIN (SELECT 
							 RATE.INVESTMENTINS
							,RATE.FIRSTDATE                     
							,RATE.LASTDATE
							,RATE.BASERATE
							,BNMK.Libelle
							,CASE 
                                WHEN BNMK.Libelle IS NOT NULL 
                                    THEN 1 
                                WHEN RATE.INVESTMENTINS IS NULL
                                    THEN NULL
                                ELSE 0 END as Floating
						FROM VCINVESTINSRATE RATE
						LEFT JOIN VCBENCHMARK BNMK 
						ON BNMK.IQID=RATE.RATESTABLE
						WHERE RATE.KIND = (SELECT CODE FROM VCINVINSRATKIND WHERE DESCR = 'Loan Cash Interests' AND FILTER NOT LIKE '%000%')
                ) FIXED_FLOAT_1
                
                ON  FIXED_FLOAT_1.LASTDATE > " & DML(%DATE) & "
                AND FIXED_FLOAT_1.FIRSTDATE <= " & DML(%DATE) & "     
                AND FIXED_FLOAT_1.INVESTMENTINS =  INVINS.ACCOUNTINS
				  
                LEFT JOIN (SELECT 
                                outer_RATE.InvestmentIns
                                ,CASE 
                                    WHEN BNMK.Libelle IS NOT NULL 
                                        THEN 1 
                                    ELSE 0 END as Floating
                            FROM VCINVESTINSRATE outer_RATE
                            LEFT JOIN VCBENCHMARK BNMK 
                            ON BNMK.IQID=outer_RATE.RATESTABLE
                            
                            WHERE outer_RATE.KIND = (SELECT CODE FROM VCINVINSRATKIND WHERE DESCR = 'Loan Cash Interests' AND FILTER NOT LIKE '%000%')
                            --this will get the last rate date quicker than RANK()
                            AND outer_RATE.LastDate = (SELECT MAX(inner_RATE.LastDate) FROM VCINVESTINSRATE inner_RATE 
                                                            WHERE inner_RATE.InvestmentIns = outer_RATE.InvestmentIns 
                                                            AND inner_RATE.KIND = (SELECT CODE FROM VCINVINSRATKIND WHERE DESCR = 'Loan Cash Interests' AND FILTER NOT LIKE '%000%')
                                                        )
                                                        
                         ) FIXED_FLOAT_2
             
             ON FIXED_FLOAT_2.INVESTMENTINS = INVINS.ACCOUNTINS

            --Egan jones and naic company rating and PD & E rating
            LEFT JOIN AJXDYNTABLE AjxCmp_EganJones
				ON VCINV.Account = AjxCmp_EganJones.Company
				AND AjxCmp_EganJones.IQDeleted = 0
				AND AjxCmp_EganJones.MetaDate1 <= " & DML(%DATE) & "
				AND AjxCmp_EganJones.MetaDate2 > " & DML(%DATE) & "
                AND AjxCmp_EganJones.MetaText2 = '4'
                AND AjxCmp_EganJones.CLASS1 = 'Ratings'

             LEFT JOIN AJXDYNTABLE AjxCmp_NAIC
				ON VCINV.Account = AjxCmp_NAIC.Company
				AND AjxCmp_NAIC.IQDeleted = 0
				AND AjxCmp_NAIC.MetaDate1 <= " & DML(%DATE) & "
				AND AjxCmp_NAIC.MetaDate2 > " & DML(%DATE) & "
                AND AjxCmp_NAIC.MetaText2 = '2'
                AND AjxCmp_NAIC.CLASS1 = 'Ratings'

            LEFT JOIN AJXDYNTABLE AjxCmp_PDE
				ON VCINV.Account = AjxCmp_PDE.Company
				AND AjxCmp_PDE.IQDeleted = 0
				AND AjxCmp_PDE.MetaDate1 <= " & DML(%DATE) & "
				AND AjxCmp_PDE.MetaDate2 > " & DML(%DATE) & "
                AND AjxCmp_PDE.MetaText2 = '5'
                AND AjxCmp_PDE.CLASS1 = 'Ratings'

			
            --max company ratings...
			LEFT JOIN (
                SELECT Company, MetaText1 as Rating, MetaDate2 as EndDate FROM AJXDYNTABLE outerAJX WHERE
                 IQDeleted = 0
                AND MetaText2 = '4'
                AND MetaDate2 = (SELECT MAX(MetaDate2) FROM AJXDYNTABLE innerAJX WHERE innerAJX.Company = outerAJX.Company AND IQDeleted = 0 AND MetaText2='4' AND innerAJX.CLASS1='Ratings')
                AND CLASS1 = 'Ratings'
            ) AjxCmpMax_EganJones
              ON VCINV.Account = AjxCmpMax_EganJones.Company
            
            LEFT JOIN (
                SELECT Company, MetaText1 as Rating FROM AJXDYNTABLE outerAJX WHERE
                 IQDeleted = 0
                AND MetaText2 = '2'
                AND MetaDate2 = (SELECT MAX(MetaDate2) FROM AJXDYNTABLE innerAJX WHERE innerAJX.Company = outerAJX.Company AND IQDeleted = 0 AND MetaText2='2' AND innerAJX.CLASS1='Ratings')
                AND CLASS1 = 'Ratings'
            ) AjxCmpMax_NAIC
              ON VCINV.Account = AjxCmpMax_NAIC.Company
              
           
            LEFT JOIN (
                SELECT Company, MetaText1 as Rating, MetaText5 as Score FROM AJXDYNTABLE outerAJX WHERE
                 IQDeleted = 0
                AND MetaText2 = '5'
                AND MetaDate2 = (SELECT MAX(MetaDate2) FROM AJXDYNTABLE innerAJX WHERE innerAJX.Company = outerAJX.Company AND IQDeleted = 0 AND MetaText2='5' AND innerAJX.CLASS1='Ratings')
                AND CLASS1 = 'Ratings'
            ) AjxCmpMax_PDE
            ON VCINV.Account = AjxCmpMax_PDE.Company
			
            
			--Egan Jones and NAIC Instrument Rating and PD & E rating
			LEFT JOIN AJXDYNTABLE AjxIns_EganJones
				 ON InvIns.AccountIns = AjxIns_EganJones.InvestmentIns
				 AND AjxIns_EganJones.IQDeleted = 0
				 AND AjxIns_EganJones.MetaDate1 <= " & DML(%DATE) & "
				 AND AjxIns_EganJones.MetaDate2 > " & DML(%DATE) & "
                 AND AjxIns_EganJones.MetaText2 = '4'
                 AND AjxIns_EganJones.CLASS1='Ratings'
             
            LEFT JOIN AJXDYNTABLE AjxIns_NAIC
				 ON InvIns.AccountIns = AjxIns_NAIC.InvestmentIns
				 AND AjxIns_NAIC.IQDeleted = 0
				 AND AjxIns_NAIC.MetaDate1 <= " & DML(%DATE) & "
				 AND AjxIns_NAIC.MetaDate2 > " & DML(%DATE) & "
                 AND AjxIns_NAIC.MetaText2 = '2' 
                 AND AjxIns_NAIC.CLASS1 = 'Ratings'
             
            LEFT JOIN (
                SELECT InvestmentIns, MetaText1 as Rating FROM AJXDYNTABLE outerAJX WHERE
                 IQDeleted = 0
                AND MetaText2 = '4'
                AND MetaDate2 = (SELECT MAX(MetaDate2) FROM AJXDYNTABLE innerAJX WHERE innerAJX.InvestmentIns = outerAJX.InvestmentIns AND IQDeleted = 0 AND MetaText2='4' AND innerAJX.CLASS1='Ratings')
                AND CLASS1 = 'Ratings'
            ) AjxInsMax_EganJones
              ON InvIns.AccountIns = AjxInsMax_EganJones.InvestmentIns

            LEFT JOIN (
                SELECT InvestmentIns, MetaText1 as Rating FROM AJXDYNTABLE outerAJX WHERE
                 IQDeleted = 0
                AND MetaText2 = '2'
                AND MetaDate2 = (SELECT MAX(MetaDate2) FROM AJXDYNTABLE innerAJX WHERE innerAJX.InvestmentIns = outerAJX.InvestmentIns AND IQDeleted = 0 AND MetaText2='2' AND innerAJX.CLASS1='Ratings')
                AND CLASS1 = 'Ratings'
            ) AjxInsMax_NAIC
              ON InvIns.AccountIns = AjxInsMax_NAIC.InvestmentIns
                
                       
			JOIN VCPORTFOLIOASSET VCPRTAST     
			ON VCPRTAST.INVESTMENT = VCINV.IQID 
				AND  VCPRTAST.IQDELETED=0 
                  
			JOIN VCPORTFOLIO VCPRT            
			ON VCPRT.IQID = VCPRTAST.PORTFOLIO 
				AND VCPRT.PORTFOLIO = 'PDE - Direct Mezzanine'  
				AND  VCPRT.IQDELETED=0 
                  
			JOIN VCINVESTMENTOP A              
			ON A.INVESTMENTINS=INVINS.IQID 
                
			JOIN VCINVESTOPTYPE OPT 
			ON OPT.CODE = A.TYPEINVESTOP 
				AND (    
                OPT.CODE = 'LN01' --commitments
                    or OPT.CODE = 'LN03'      -- 'LN - Funding (w/o commitment)' 
					or OPT.CODE = 'LN02'  -- 'LN - Funding (following commitment)'
					or OPT.CODE = 'LN70'  -- 'LN - Transfer in'
					or OPT.CODE = 'LN71'  -- 'LN - Transfer out'
					or OPT.CODE = 'LN81'  -- 'LN - Conversion in 
					or OPT.CODE = 'LN82'  -- 'LN - Conversion out										 
					) 
			JOIN ADMROLE REG                 
			ON VCINV.IQREGIONID = REG.IQID 
				AND REG.IQDELETED = 0 
				AND A.IQREGIONID = REG.IQID 
				AND REG.NAME = 'Private Debt & Equity'
            
            
			WHERE 
			INVINS.IQDELETED=0 
				AND A.IQDELETED=0
                AND A.DRAFT=0
                AND (A.CANCELLED=0 OR A.CANCELLED IS NULL)
				AND A.CLOSEDATE <=  " & DML(%DATE) & " 
			    AND ??FILTER
		    GROUP BY  INVINS.ACCOUNTINS 

			)
    --------------------------------------------------------------------------------------------------------------------------------------------------
    
            SELECT  
            
				MIN(INVESTMENTS.INVINS_ACCOUNTINS)			AS INVINS_ACCOUNTINS    
                ,MIN(INVESTMENTS.ADMINISTRATIVE_AGENT)      AS ADMINISTRATIVE_AGENT
				,MIN(INVESTMENTS.Cusip)						AS Cusip
                ,MIN(INVESTMENTS.RGA_CUSIP)                 AS RGA_CUSIP
                ,MIN(INVESTMENTS.INVESTMENT_AMOUNT)         AS INVESTMENT
				,MIN(INVESTMENTS.FACILITY)				    AS FACILITY
                ,MIN(INVESTMENTS.INV_YEAR)					AS INV_YEAR
                ,MIN(INVESTMENTS.PORTFOLIO)					AS PORTFOLIO
				,MIN(INVESTMENTS.short_code)				AS short_code
                ,MIN(INVESTMENTS.COMPANY_DESCRIPTION)       AS COMPANY_DESCRIPTION        
                ,MIN(INVESTMENTS.UNITRANCHE_MEZZ)			AS UNITRANCHE_MEZZ	
                ,MIN(SFASPONSOR.NAME)						AS SPONSOR
				,MIN(INVESTMENTS.SENIORITY)					AS SENIORITY		
                ,MIN(INVESTMENTS.COMPANY_LEGAL_NAME)        AS 'Company Legal Name'
				,MIN(INVESTMENTS.INST_CURR)					AS INST_CURR
				,MIN(INVESTMENTS.HQ_CITY)					AS HQ_CITY
                ,MIN(INVESTMENTS.HQ_STATE)					AS HQ_STATE
                ,MIN(INVESTMENTS.HQ_COUNTRY)				AS HQ_COUNTRY
				,MIN(INVESTMENTS.Collateral)				AS Collateral
                ,CASE WHEN CHARINDEX(' - ', MIN(INDUSTRY.DESCR)) > 0 
                    THEN  RTRIM(LTRIM(SUBSTRING(MIN(INDUSTRY.DESCR), CHARINDEX(' - ', MIN(INDUSTRY.DESCR))+3, LEN(MIN(INDUSTRY.DESCR))))) 
                    ELSE  MIN(INDUSTRY.DESCR) 
                END        AS INDUSTRY
                ,CASE WHEN CHARINDEX(' - ', MIN(INDSUB.DESCR)) > 0 
                    THEN RTRIM(LTRIM(SUBSTRING(MIN(INDSUB.DESCR), CHARINDEX(' - ', MIN(INDSUB.DESCR))+3, LEN(MIN(INDSUB.DESCR))))) 
                    ELSE MIN(INDSUB.DESCR) 
                END               AS SUBINDUSTRY   
                
                ,MIN(INVESTMENTS.PIK)                            AS PIK
                
                ,CASE WHEN MIN(INVESTMENTS.Fixed_Floating) = 'Floating' 
                        THEN MIN(CASH_COUPON_OPS.RATE1) 
                      WHEN MIN(INVESTMENTS.Fixed_Floating) = 'Fixed' 
                        THEN 
                            CASE 
                                WHEN MIN(CASH_COUPON_INSRATE.BASERATE) IS NOT NULL 
                                    THEN MIN(CASH_COUPON_INSRATE.BASERATE)/100.00 
                                ELSE MIN(LAST_CASH_COUPON_INSRATE.BASERATE)/100.00
                             END    
                END AS CASH_COUPON

               ,CASE 
                   WHEN MIN(INVESTMENTS.Fixed_Floating) = 'Floating' 
                       THEN CASE WHEN (COALESCE(MIN(CASH_COUPON_INSRATE.RATE),0)/100.00) = 0
                            THEN (COALESCE(MIN(LAST_CASH_COUPON_INSRATE.RATE),0)/100.00) 
                            ELSE (COALESCE(MIN(CASH_COUPON_INSRATE.RATE),0)/100.00)
                        END
                            
                    WHEN MIN(INVESTMENTS.Fixed_Floating) = 'Fixed' THEN NULL
                END AS SPREAD
                
                --check if the spread is null, if it is then get the last max spread to work off of, if not then check  floor if its null if it is then it's NA else floor - spread
                ,CASE WHEN MIN(INVESTMENTS.Fixed_Floating) = 'Floating'
                
                    THEN CASE WHEN MIN(CASH_COUPON_INSRATE.RATE) IS NOT NULL
                            THEN 
                                CASE WHEN MIN(CASH_COUPON_INSRATE.RATEFLOOR) IS NULL THEN NULL
                                    ELSE ((MIN(CASH_COUPON_INSRATE.RATEFLOOR) - (COALESCE(MIN(CASH_COUPON_INSRATE.RATE),0))))
                                END 
                            ELSE  
                               CASE WHEN MIN(LAST_CASH_COUPON_INSRATE.RATEFLOOR) IS NULL THEN NULL
                                   ELSE ((MIN(LAST_CASH_COUPON_INSRATE.RATEFLOOR) - (COALESCE(MIN(LAST_CASH_COUPON_INSRATE.RATE),0))))
                               END
                         END
                    --fixed should be a blank/null     
                    WHEN MIN(INVESTMENTS.Fixed_Floating) = 'Fixed' THEN NULL      
                END AS FLOOR
                
                 --check if the spread is null, if it is then get the last max spread to work off of, if not then check  floor if its null if it is then it's NA else floor - spread
                ,CASE WHEN MIN(INVESTMENTS.Fixed_Floating) = 'Floating'
                
                    THEN CASE WHEN MIN(CASH_COUPON_INSRATE.RATE) IS NOT NULL
                            THEN 
                                CASE WHEN MIN(CASH_COUPON_INSRATE.RATECAP) IS NULL THEN NULL
                                    ELSE (MIN(CASH_COUPON_INSRATE.RATECAP) - (COALESCE(MIN(CASH_COUPON_INSRATE.RATE),0)))
                                END 
                            ELSE  
                               CASE WHEN MIN(LAST_CASH_COUPON_INSRATE.RATECAP) IS NULL THEN NULL 
                                   ELSE ((MIN(LAST_CASH_COUPON_INSRATE.RATECAP) - (COALESCE(MIN(LAST_CASH_COUPON_INSRATE.RATE),0))))
                               END
                         END
                    --fixed should be a blank/null     
                    WHEN MIN(INVESTMENTS.Fixed_Floating) = 'Fixed' THEN NULL      
                END AS CAP
                
                
                ,MIN(INVESTMENTS.LEGAL_STRUCTURE)             AS LEGAL_STRUCTURE
               
               ,MIN(INVESTMENTS.COMMITMENT)                    AS COMMITMENT
                ,MIN(INVESTMENTS.PDE_ROLE)                    AS PDE_ROLE
                ,MIN(INVESTMENTS.AMORTIZATION)                AS AMORTIZATION
                ,MIN(INVESTMENTS.TOTAL_FACILITY_SIZE)         AS TOTAL_FACILITY_SIZE
                ,CASE MIN(VCP_DEAL.BOARD_RIGHTS)
                    WHEN '1' THEN 'Voting Member'
                    WHEN '2' THEN 'Non-Voting Member'
                    WHEN '3' THEN 'Observation Rights'
                    WHEN '4' THEN 'None'				
                 END AS BOARD_RIGHTS 
                ,MIN(INVESTMENTS.DEAL_LEAD) AS DEAL_LEAD
                ,MIN(INVESTMENTS.DEAL_SECONDARY) AS DEAL_SECONDARY
                ,MIN(INVESTMENTS.DEAL_TERTIARY) AS DEAL_TERTIARY
                
               
                ,COALESCE(CONVERT(VARCHAR, FORMAT(MIN(MDATE.LastInterestDate),'MM/dd/yy'), 1),'NA') AS MATURITY_DATE

                , CASE 
                      WHEN MIN(InvOp.CloseDate) <= " & DML(%DATE) & " AND MIN(INVESTMENTS.UserDate2) > " & DML(%DATE) & " THEN 'Active'
                      WHEN MIN(InvOp.CloseDate) <= " & DML(%DATE) & " AND (ISNULL(MIN(INVESTMENTS.UserDate2), 1) = 1) THEN 'Active'
                      ELSE 'Exited'
                  END as FACILITY_STATUS
                
                ,MIN(INVESTMENTS.UserDate2) AS EXIT_DATE
                
                --NA is COALESCE() in the upper query for this field
				,MIN(INVESTMENTS.FIXED_FLOATING) AS FIXED_FLOATING

                ,MIN(INVESTMENTS.EganJonesCmpRating)	AS EGAN_RATING
                ,MIN(INVESTMENTS.NAICCmpRating)			AS NAIC_RATING
                ,MIN(INVESTMENTS.PDERating)             AS PDE_RATING 
    
				,MIN(INVESTMENTS.EganJonesInsRating)	AS EGAN_INS_RATING
				,MIN(INVESTMENTS.NAICInsRating)			AS NAIC_INS_RATING
			                   
                ,MIN(INVESTMENTS.PDEScore)             AS PDE_SCORE         
                
                --,MIN(INVESTMENTS.EganJonesCmpExpirationDate) AS EGAN_CMP_RATING_EXPIRATION_DATE
                ,CONVERT(VARCHAR, FORMAT(MIN(INVESTMENTS.EganJonesCmpExpirationDate),'MM/dd/yy'), 1) AS EGAN_CMP_RATING_EXPIRATION_DATE
                
                --,CONVERT(varchar, MIN(INVOP.CloseDate), 1) as INVESTMENT_DATE  
				,CONVERT(VARCHAR, FORMAT(MIN(INVOP.CloseDate),'MM/dd/yy'), 1) AS INVESTMENT_DATE

                
				,MIN(INVESTMENTS.COMPANY) as COMPANY          
                ,MIN(INVESTMENTS.SFA_CMP_IQID) AS COMPANY_ID     
                ,MIN(INVESTMENTS.PERCENT_OWNERSHIP) AS PERCENT_OWNERSHIP
                
                --helper columns for frontscript below
                ,MIN(INVESTMENTS.__OPT_CODE) as __OPT_CODE
            FROM INVESTMENTS
             
            LEFT JOIN AJXCRMCOMPANYINDUSTRYFOCUS AJXIND
                 ON INVESTMENTS.SFA_CMP_IQID = AJXIND.CompanyId
                 AND AJXIND.IQDeleted = 0 
             
            LEFT JOIN VCINDUSTRY INDSUB
                ON INVESTMENTS.SFA_CMP_INDUSTRY = INDSUB.CODE
                AND INDSUB.FILTER NOT LIKE '00000%'
           
            LEFT JOIN VCINDUSTRY INDUSTRY
                ON INDUSTRY.CODE = AJXIND.INDUSTRYCODE
                AND INDUSTRY.FILTER NOT LIKE '00000%' 
             
             --Cash Coupon, Spread
            --loan cash interests only
            LEFT JOIN (
                SELECT MIN(INS.ACCOUNTINS) AS ACCOUNTINS, MIN(OP.RATE1) AS RATE1 
                FROM VCINVESTMENTOP OP
                
                LEFT JOIN VCINVESTMENTINS INS 
                ON INS.IQID = OP.INVESTMENTINS
                AND INS.IQDELETED = 0
                
                WHERE 
                
                OP.CLOSEDATE = 
                (SELECT MIN(inner_OP.CLOSEDATE) FROM VCINVESTMENTOP inner_OP 
                    WHERE 
                    inner_OP.CLOSEDATE >= " & DML(%DATE) & "
                    AND inner_OP.IQDELETED = 0
                    AND (inner_OP.CANCELLED = 0 OR inner_OP.CANCELLED IS NULL)
                    --AND inner_OP.DRAFT = 0
                    AND OP.INVESTMENTINS = inner_OP.INVESTMENTINS
                    AND inner_OP.RATE1 IS NOT NULL
                ) 
                
                AND OP.IQDELETED = 0
                AND (OP.CANCELLED = 0 OR OP.CANCELLED IS NULL)
                --AND OP.DRAFT = 0
                GROUP BY INS.ACCOUNTINS

            ) CASH_COUPON_OPS ON
            CASH_COUPON_OPS.ACCOUNTINS = INVESTMENTS.INVINS_ACCOUNTINS
            
            
            LEFT JOIN VCINVESTINSRATE CASH_COUPON_INSRATE 
                ON CASH_COUPON_INSRATE.FirstDate <= " & DML(%DATE) & " AND CASH_COUPON_INSRATE.LastDate > " & DML(%DATE) & " 
                AND CASH_COUPON_INSRATE.INVESTMENTINS = INVESTMENTS.INVINS_ACCOUNTINS
                AND CASH_COUPON_INSRATE.KIND = 'LNCASH'


            LEFT JOIN VCINVESTINSRATE LAST_CASH_COUPON_INSRATE 
                ON LAST_CASH_COUPON_INSRATE.FirstDate = (
                    SELECT MAX(inner_INSRATE.FirstDate) FROM VCINVESTINSRATE inner_INSRATE 
                    WHERE inner_INSRATE.INVESTMENTINS = LAST_CASH_COUPON_INSRATE.INVESTMENTINS
                            AND LAST_CASH_COUPON_INSRATE.KIND = 'LNCASH' 
                ) 
                AND LAST_CASH_COUPON_INSRATE.INVESTMENTINS = INVESTMENTS.INVINS_ACCOUNTINS
                AND LAST_CASH_COUPON_INSRATE.KIND = 'LNCASH'
             

             
		 
		   --INVESTMENT STATUS
           --Investment Date
           --TODO: label amount2
           LEFT JOIN 
             (
                 SELECT 
                       InvestmentIns, MIN(CloseDate) as CloseDate, SUM(Amount2) as Amount2
                 FROM VCINVESTMENTOP
                 WHERE TypeInvestOp IN  ('LN02', 'LN03', 'LN06', 'LN70', 'LN71', 'LN81', 'LN82')
                 AND IQDeleted = 0
                 GROUP BY InvestmentIns
             ) INVOP
             ON INVESTMENTS.INVINS_IQID = INVOP.InvestmentIns
           
		   --this is the other half...

           --Board Rights, VCPROJECT (Deal screen) Investment summary...
           LEFT JOIN 
           (
               SELECT VCP1.ACCOUNT
                   ,VCP1.IQID
                   ,COALESCE(VCP2.UserText30, VCP1.UserText30) AS BOARD_RIGHTS
                   ,COALESCE(VCP2.UserText24, VCP1.UserText24) AS ROLE_IN_TRANSACTION
                   ,COALESCE(VCP2.UserText7, VCP1.UserText7) AS SPONSOR
               FROM VCPROJECT VCP1
               LEFT JOIN VCPROJECT VCP2
                   --LINKED_DEAL
                   ON VCP1.UserText38 = VCP2.IQID
                   AND VCP2.IQDeleted=0
               WHERE VCP1.IQDeleted=0
           ) VCP_DEAL
           ON INVESTMENTS.VCINV_ACCOUNT = VCP_DEAL.ACCOUNT
             
             
             
           --SPONSOR
           LEFT JOIN SFAACCOUNT SFASPONSOR
             ON VCP_DEAL.SPONSOR = SFASPONSOR.IQID
             AND SFASPONSOR.IQDeleted = 0

          --Maturity Date    
          LEFT JOIN (SELECT MAX(LASTINTERESTDATE) AS LASTINTERESTDATE, INVESTMENTINS FROM VCINVESTINSRATE 
                      GROUP BY INVESTMENTINS) MDATE
          ON INVESTMENTS.INVINS_ACCOUNTINS = MDATE.InvestmentIns

		  

		  GROUP BY INVESTMENTS.INVINS_ACCOUNTINS
           " ;
           
	COLUMN SECURITY_ID TYPE= 'STRING' LABEL= 'eFront Security ID';
    COLUMN ADMINISTRATIVE_AGENT TYPE= 'STRING' LABEL= 'Administrative Agent';
    COLUMN Cusip TYPE= 'STRING' LABEL= 'CUSIP';
    COLUMN RGA_CUSIP TYPE= 'STRING' LABEL= 'RGA CUSIP';
    COLUMN INVESTMENT TYPE= 'DOUBLE' LABEL= 'Investment Amount';
    COLUMN FACILITY TYPE= 'STRING' LABEL= 'Facility';
    COLUMN INV_YEAR TYPE= 'INTEGER' LABEL= 'Investment Year';
    COLUMN PORTFOLIO TYPE= 'STRING' LABEL= 'Portfolio';
    COLUMN short_code TYPE= 'STRING' LABEL= 'Company';
    COLUMN COMPANY_DESCRIPTION TYPE= 'STRING' LABEL= 'Company Description';
    COLUMN UNITRANCHE_MEZZ TYPE= 'STRING' LABEL= 'Unitranche / Mezzanine';
    COLUMN SPONSOR TYPE= 'STRING' LABEL= 'Sponsor';
    COLUMN SENIORITY TYPE= 'STRING' LABEL= 'Seniority';
    COLUMN 'Company Legal Name' TYPE= 'STRING' LABEL= 'Company Legal Name';
    COLUMN INST_CURR TYPE= 'STRING' LABEL= 'Instrument Currency';
    COLUMN HQ_CITY TYPE= 'STRING' LABEL= 'HQ City';
    COLUMN HQ_STATE TYPE= 'STRING' LABEL= 'HQ State';
    COLUMN HQ_COUNTRY TYPE= 'STRING' LABEL= 'HQ Country';
    COLUMN Collateral TYPE= 'STRING' LABEL= 'Collateral';
    COLUMN INDUSTRY TYPE= 'STRING' LABEL= 'Industry';
    COLUMN SUBINDUSTRY TYPE= 'STRING' LABEL= 'Industry Sub Sector';
    COLUMN PIK TYPE= 'STRING' LABEL= 'PIK Coupon';
    COLUMN CASH_COUPON TYPE= 'STRING' LABEL= 'Cash Coupon';
    COLUMN SPREAD TYPE= 'STRING' LABEL= 'Spread';
    COLUMN FLOOR TYPE= 'STRING' LABEL= 'Floor';
    COLUMN CAP TYPE= 'STRING' LABEL= 'Cap';
    COLUMN LEGAL_STRUCTURE TYPE= 'STRING' LABEL= 'Legal Structure';
    COLUMN COMMITMENT TYPE= 'DOUBLE' LABEL= 'Commitment';
    COLUMN PDE_ROLE TYPE= 'STRING' LABEL= 'PD&E Role';
    COLUMN AMORTIZATION TYPE= 'STRING' LABEL= 'Amortization';
    COLUMN TOTAL_FACILITY_SIZE TYPE= 'STRING' LABEL= 'Total Facility Size';
    COLUMN BOARD_RIGHTS TYPE= 'STRING' LABEL= 'Board Rights';
    COLUMN DEAL_LEAD TYPE= 'STRING' LABEL= 'Deal Lead';
    COLUMN DEAL_SECONDARY TYPE= 'STRING' LABEL= 'Deal Secondary';
    COLUMN DEAL_TERTIARY TYPE= 'STRING' LABEL= 'Deal Tertiary';
    COLUMN MATURITY_DATE TYPE= 'STRING' LABEL= 'Maturity Date';
    COLUMN FACILITY_STATUS TYPE= 'STRING' LABEL= 'Facility Status';
    COLUMN EXIT_DATE TYPE= 'STRING' LABEL= 'Exit Date';
    COLUMN FIXED_FLOATING TYPE= 'STRING' LABEL= 'Fixed / Floating';
    COLUMN EGAN_RATING TYPE= 'STRING' LABEL= 'Egan-Jones Company Rating';
    COLUMN NAIC_RATING TYPE= 'STRING' LABEL= 'NAIC Company Rating';
    COLUMN PDE_RATING TYPE= 'STRING' LABEL= 'PD&E Rating';
    COLUMN EGAN_INS_RATING TYPE= 'STRING' LABEL= 'Egan-Jones Instrument Rating';
    COLUMN NAIC_INS_RATING TYPE= 'STRING' LABEL= 'NAIC Instrument Rating';
    COLUMN PDE_SCORE TYPE= 'STRING' LABEL= 'PD&E Rating Score';
    COLUMN EGAN_CMP_RATING_EXPIRATION_DATE TYPE= 'STRING' LABEL= 'Egan-Jones Rating Expiration'; 
    COLUMN INVESTMENT_DATE TYPE= 'STRING' LABEL= 'Investment Date';
    COLUMN COMPANY TYPE= 'STRING' LABEL= '';
    COLUMN COMPANY_ID TYPE= 'STRING' LABEL= 'Company Id';
    COLUMN PERCENT_OWNERSHIP TYPE= 'STRING' LABEL= '% Ownership';
    
    
RUN;

//remove
//PROC PRINT DATA = WORK.INVSTINS LABEl;  RUN;




//EQUITES QUERY

/*------------------Direct Mezz by Vintage-------------*/ 

/*------------------Direct LLC Corps-----------*/    

DATA WORK.INVSTINS_EQ;
	SQL "
     WITH PERCENT_OWNERSHIP AS (
            --SFA_CMP.IQID AS ACCOUNT
            SELECT INVINS.ACCOUNTINS AS ACCOUNT, (SUM(OP_SHARES_RGA.NBSHARES)/(SUM(OP_SHARES_OTHER.NBSHARES)+SUM(OP_SHARES_RGA.NBSHARES))) as perc_shares 
                FROM VCINVESTMENTINS INVINS
                    LEFT JOIN VCINVESTMENT VCINV ON VCINV.IQID = INVINS.INVESTMENT AND VCINV.IQDELETED=0 
                    --LEFT JOIN SFAACCOUNT SFA_CMP ON SFA_CMP.IQID = VCINV.ACCOUNT AND SFA_CMP.IQDELETED=0
                    
                    
                    LEFT JOIN VCINVESTMENTOP OP_SHARES_RGA 
                        ON OP_SHARES_RGA.ACCOUNT = VCINV.ACCOUNT
                        AND OP_SHARES_RGA.INVESTMENT = VCINV.IQID
                        AND OP_SHARES_RGA.INVESTMENTINS = INVINS.IQID
                        AND OP_SHARES_RGA.IQDELETED = 0 
                        AND OP_SHARES_RGA.DRAFT = 0
                        AND OP_SHARES_RGA.CLOSEDATE <= " & DML(%DATE) & "
                        AND VCINV.ITYPE = 'RGAINV'
                    
                    LEFT JOIN VCINVESTMENTOP OP_SHARES_OTHER 
                        ON OP_SHARES_OTHER.ACCOUNT = VCINV.ACCOUNT 
                        AND OP_SHARES_OTHER.INVESTMENT = VCINV.IQID
                        AND OP_SHARES_OTHER.INVESTMENTINS = INVINS.IQID
                        AND OP_SHARES_OTHER.IQDELETED = 0 
                        AND OP_SHARES_OTHER.DRAFT = 0
                        AND OP_SHARES_OTHER.CLOSEDATE <= " & DML(%DATE) & "
                        AND (VCINV.ITYPE = 'OTHER' OR VCINV.ITYPE IS NULL)
                        
                        --group by SFA_CMP.IQID
                        GROUP BY INVINS.ACCOUNTINS
        ),
    
        INVESTMENTS AS (
            SELECT 
            MIN(INVINS.ACCOUNTINS)                         AS INVINS_ACCOUNTINS 
            ,MIN(SFA_CMP.IQID)                               AS SFA_CMP_IQID
            ,MIN(INVINS.IQID)                               AS INVINS_IQID
            ,MIN(VCINV.ACCOUNT)                             AS VCINV_ACCOUNT
            --,MIN(INVINS.UserText49)                         AS ADMINISTRATIVE_AGENT
            ,'NA'                                             AS ADMINISTRATIVE_AGENT
            ,MIN(INVINS.USERTEXT19)                        AS RGA_CUSIP
            ,MIN(INVINS.USERDATE2)							AS INVINS_USERDATE2
            ,MIN(SFA_CMP.INDUSTRY)                          AS SFA_CMP_INDUSTRY 
            ,CASE MIN(INVINS.UserText50) 
                WHEN 1 THEN 'C-Corp'
                WHEN 2 THEN 'LP'
                WHEN 3 THEN 'LLC'
                WHEN 4 THEN 'Other'
            END                                             AS LEGAL_STRUCTURE 
            --,CASE MIN(INVINS.UserText16)
            --    WHEN 1 THEN 'Lead'
            --    WHEN 2 THEN 'Co-Lead'
            --    WHEN 3 THEN 'Participant'
            --END                                            AS PDE_ROLE
            ,'NA' AS PDE_ROLE
            ,COALESCE(MIN(INVINS.UserText17),'NA')                         AS AMORTIZATION
            --CHANGED...
            ,SUM( (CASE WHEN OPT.code = 'EQ03' -- 'EQ - Purchase/Subscription (w/o Commitment)%'
                         or OPT.code = 'EQ42' -- 'EQ - Reinvestment of cash Dividend into Shares
                         or OPT.code = 'EQ02' -- 'EQ - Subscription (Capital Issue with Commitment)
                         or OPT.code = 'EQ81' -- 'EQ - Conversion In
                         or OPT.code = 'EQ82' -- 'EQ - Conversion Out																																			 
                    THEN A.AMOUNT2 
                   ELSE 0 
                  END 
            )*(-1))                   AS INVESTMENT_AMOUNT    
            ,SUM((CASE WHEN Opt.Code = 'EQ01' THEN A.Commitment2 ELSE 0 END)* (-1))    AS COMMITMENT
            ,Cast(DATEPART(YYYY,MIN(A.CLOSEDATE)) AS varchar(4)) INV_YEAR
            ,MIN(VCPRT.PORTFOLIO)           AS PORTFOLIO
            ,MIN(SFA_CMP.ShortName)         AS SHORT_CODE
            ,MIN(CAST(SFA_CMP.DESCRIPTION AS nvarchar(max))) AS COMPANY_DESCRIPTION
            ,MIN(INVINS.LIBELLE) 		   AS COMPANY_LEGAL_NAME
            ,MIN(INVINS.CURRENCY1)         AS INST_CURR
            
            ,MIN(SFAS.CITY)				   AS HQ_CITY
            ,MIN(STATES.STATECODE)	       AS HQ_STATE
            ,MIN(COUNTRIES.ISOALPHA3)       AS HQ_COUNTRY

            ,MIN(SFA_CMP.USERTEXT30) AS DEAL_LEAD
            ,MIN(SFA_CMP.USERTEXT31) AS DEAL_SECONDARY
            ,MIN(SFA_CMP.USERTEXT32) AS DEAL_TERTIARY
               
            ,MIN(INVINS.USERTEXT46)               INSTR_STATUS        --- DD 2018_02_28 added new field base on Ticket ITM0251960
            ,MIN(INVINS.USERTEXT18)               AS TOTAL_FACILITY_SIZE
            ,MIN(SFA_CMP.NAME)                    COMPANY
            ,MIN(SFA_CMP.CREATIONDATE)            CREATIONDATE 
            ,MIN(ltrim(rtrim(INVINS.LIBELLE)))    FUND
            ,MIN(ltrim(rtrim(INVINS.usertext23))) Cusip
            
            
            ,case 
              when MIN(INVINS.USERTEXT21) = 1 then 'Fund' 
              when MIN(INVINS.USERTEXT21) = 2 then 'Company' 
            end  
            as LP_TYPE
            
            ,COALESCE(MIN(FAIRVALUE.VALUATION), MIN(FAIRVALUE_MAX.VALUATION)) AS GAAP_FAIR_VALUE
            
            ,MIN(INVINS.CURRENCY1) CURRENCY
              
			--,(MIN(COALESCE(PAR_AMOUNT.AMOUNT,0)) + MIN(COALESCE(PAR_FORCECOST.FORCECOST,0)) + MIN(COALESCE(PAR_COST.COST_OF_SALE,0)))*(-1)	as PAR_OUTSTANDING
            ,SUM(CASE 
                    WHEN OPT.code = 'EQ02' OR OPT.code = 'EQ03' THEN A.AMOUNT2 * (-1)
                    WHEN OPT.code = 'EQ51' THEN A.FORCECOST2 * (-1)
                    WHEN OPT.code = 'EQ20' THEN A.COST2 * (-1)
                END
            ) AS PAR_OUTSTANDING
            
            --Company > issues debt as an instrument, each instrument has a cusip and can be any of the following
            --New field... currently null
            --already in  system , why do we need new field?
            ,(CASE MIN(INVINS.USERTEXT47)
                        when  '1' then 'Revolver' 
                        when  '2' then 'Term Loan' 
                        when  '3' then 'Strip Unitranche' 
                        when  '4' then 'Split First Lien' 
                        when  '5' then 'Bifurcated LO Unitranche' 
                        when  '6' then 'Second Lien' 
                        when  '7' then 'Senior Secured Sub. Debt' 
                        when  '8' then 'Senior Unsecured Sub. Debt' 
                        when  '9' then 'Junior Sub. Debt' 
                        when  '10' then 'Preferred Equity' 
                        when  '11' then 'Common Equity' 
                        when  '12' then 'Warrant' 
            end) as FACILITY
            
            --These are currently all null
            ,(CASE MIN(INVINS.USERTEXT47)
                when '1' then 'Senior Debt' 
                when '2' then 'Senior Debt' 
                when '3' then 'Unitranche Debt' 
                when '4' then 'Unitranche Debt'
                when '5' then 'Second Lien Debt' 
                when '6' then 'Second Lien Debt' 
                when '7' then 'Subordinated Debt'
                when '8' then 'Subordinated Debt'
                when '9' then 'Subordinated Debt'
                when '10' then 'Preferred Equity'
                when '11' then 'Common Equity'
                when '12' then 'Common Equity'
            end) as SENIORITY 
            
            ,case 
                when MIN(INVINS.USERTEXT41) = '1' then 'Debt Hedge Fund' 
                when MIN(INVINS.USERTEXT41) = '2' then 'Alternatives Preferred Stock' 
                when MIN(INVINS.USERTEXT41) = '3' then 'Senior Secured Loan' 
                when MIN(INVINS.USERTEXT41) = '4' then 'Subordinated Loan' 
                when MIN(INVINS.USERTEXT41) = '5' then 'Distressed Debt' 
                when MIN(INVINS.USERTEXT41) = '6' then 'Real Asset Debt' 
                when MIN(INVINS.USERTEXT41) = '7' then 'Senior Secured Loan' 
                when MIN(INVINS.USERTEXT41) = '8' then 'Subordinated Loan/Mezzanine Funds' 
                when MIN(INVINS.USERTEXT41) = '9' then 'Senior Secured Loan' 
                when MIN(INVINS.USERTEXT41) = '10' then 'Subordinated Loan' 
                when MIN(INVINS.USERTEXT41) = '11' then 'Senior Secured Loan' 
                when MIN(INVINS.USERTEXT41) = '12' then 'Subordinated Loan' 
                when MIN(INVINS.USERTEXT41) = '13' then 'Equity Hedge Fund' 
                when MIN(INVINS.USERTEXT41) = '14' then 'Alternatives Common Stock' 
                when MIN(INVINS.USERTEXT41) = '15' then 'Alternatives Preferred Stock' 
                when MIN(INVINS.USERTEXT41) = '16' then 'Warrants' 
                when MIN(INVINS.USERTEXT41) = '17' then 'Buyout' 
                when MIN(INVINS.USERTEXT41) = '18' then 'Growth' 
                when MIN(INVINS.USERTEXT41) = '19' then 'Real Asset Equity' 
                when MIN(INVINS.USERTEXT41) = '20' then 'Secondary' 
                when MIN(INVINS.USERTEXT41) = '21' then 'Venture Capital' 
                when MIN(INVINS.USERTEXT41) = '22' then 'Structured Alternatives Common Stock' 
                when MIN(INVINS.USERTEXT41) = '23' then 'Structured Alternatives Preferred Stock' 
                when MIN(INVINS.USERTEXT41) = '24' then 'Senior Loan' 
                when MIN(INVINS.USERTEXT41) = '25' then 'Subordinated Loan' 
            end               as Security
            
                
            --this field needs to reated, this is temporary  
            ,CASE 
                 WHEN MIN(INVINS.UserText47) IN ('1','2','3','4','5','6') THEN 'Unitranche'
                 WHEN MIN(INVINS.UserText47) IN ('7','8','9') THEN 'Mezzanine'
                 ELSE 'NA'
              END as UNITRANCHE_MEZZ
            --this field needs to reated, this is temporary
            ,CASE
                 WHEN MIN(INVINS.UserText47) IN ('1','2') THEN '1st Lien'
                 WHEN MIN(INVINS.UserText47) IN ('3','4') THEN 'Split 1st Lien'
                 WHEN MIN(INVINS.UserText47) IN ('5','6','7') THEN '2nd Lien'
                 WHEN MIN(INVINS.UserText47) IN ('8','9') THEN 'Unsecured'
                 ELSE 'NA'
              END as Collateral     
        
        
        --company ratings
            ,(CASE WHEN MIN(AjxCmp_EganJones.MetaText1) IS NOT NULL THEN MIN(AjxCmp_EganJones.MetaText1) ELSE 
                MIN(AjxCmpMax_EganJones.Rating) 
            END) as EganJonesCmpRating
            
            ,(CASE WHEN MIN(AjxCmp_NAIC.MetaText1) IS NOT NULL THEN MIN(AjxCmp_NAIC.MetaText1) ELSE 
                MIN(AjxCmpMax_NAIC.Rating) 
            END) as NAICCmpRating
            
            ,(CASE WHEN MIN(AjxCmp_PDE.MetaText1) IS NOT NULL THEN MIN(AjxCmp_PDE.MetaText1) ELSE 
                MIN(AjxCmpMax_PDE.Rating) 
            END) as PDERating
            
            --pde company raing score
            ,(CASE WHEN MIN(AjxCmp_PDE.MetaText5) IS NOT NULL THEN MIN(AjxCmp_PDE.MetaText5) ELSE 
                MIN(AjxCmpMax_PDE.Score) 
            END) as PDEScore
           
            
            --egan jones company rating expiration date
            ,(CASE WHEN MIN(AjxCmp_EganJones.MetaDate2) IS NOT NULL THEN MIN(AjxCmp_EganJones.MetaDate2) ELSE
                MIN(AjxCmpMax_EganJones.EndDate) 
            END) as EganJonesCmpExpirationDate
        
            --instrument ratings 
            ,(CASE WHEN MIN(AjxIns_EganJones.MetaText1) IS NOT NULL THEN MIN(AjxIns_EganJones.MetaText1) ELSE
                MIN(AjxInsMax_EganJones.Rating) 
            END) as EganJonesInsRating
            
            ,(CASE WHEN MIN(AjxIns_NAIC.MetaText1) IS NOT NULL THEN MIN(AjxIns_NAIC.MetaText1) ELSE
                MIN(AjxInsMax_NAIC.Rating)
            END) as NAICInsRating
        
        	
        
        
        ,MIN(STR((PERCENT_OWNERSHIP.PERC_SHARES * 100), 6, 2)+'%') AS PERCENT_OWNERSHIP
        
        
		FROM VCINVESTMENTINS INVINS 
        
        JOIN VCINVESTMENT VCINV ON VCINV.IQID = INVINS.INVESTMENT AND VCINV.IQDELETED=0 
            
        LEFT JOIN (SELECT  ACCOUNT, MAX(USERTEXT7) USERTEXT7, MAX(USERDATE5) USERDATE5, MAX(USERTEXT30) USERTEXT30 
                   FROM VCPROJECT VCP1 
                   WHERE VCP1.IQDELETED=0 
                     AND VCP1.WORKFLOW in (SELECT  IQID 
                                             FROM ADMWORKFLOW 
                                             WHERE LIBELLE IN ('RGA Direct Mezzanine','RGA Equity Co-Investment')
                                               and IQDELETED=0
                                          )  
                   GROUP BY ACCOUNT                  
                ) VCP 
        ON VCP.ACCOUNT = VCINV.ACCOUNT
        
            
		LEFT JOIN SFAACCOUNT SFA 
		  ON SFA.IQID = VCP.USERTEXT7 
			AND SFA.IQDELETED=0  
            
		LEFT JOIN SFAACCOUNT SFA_CMP 
            ON SFA_CMP.IQID = VCINV.ACCOUNT  
			AND SFA_CMP.IQDELETED=0    
         
        --PERCENT_OWNERSHIP 
            
        LEFT JOIN PERCENT_OWNERSHIP 
        --ON PERCENT_OWNERSHIP.ACCOUNT = SFA_CMP.IQID
        ON PERCENT_OWNERSHIP.ACCOUNT = INVINS.ACCOUNTINS 
         
		LEFT JOIN SFASITE SFAS
			ON SFA_CMP.MainSite = SFAS.IQID
			AND SFAS.IQDeleted = 0    
            
            
         LEFT JOIN VCSTATE STATES
            ON STATES.CODE = SFAS.STATE 
            AND STATES.FILTER NOT LIKE '00000%'
            
        LEFT JOIN SFACOUNTRY COUNTRIES
            ON SFAS.COUNTRY = COUNTRIES.CODE 
            AND COUNTRIES.FILTER NOT LIKE '00000%'   

         --Egan jones and naic company rating and PD & E rating
            LEFT JOIN AJXDYNTABLE AjxCmp_EganJones
				ON VCINV.Account = AjxCmp_EganJones.Company
				AND AjxCmp_EganJones.IQDeleted = 0
				AND AjxCmp_EganJones.MetaDate1 <= " & DML(%DATE) & "
				AND AjxCmp_EganJones.MetaDate2 > " & DML(%DATE) & "
                AND AjxCmp_EganJones.MetaText2 = '4'
                AND AjxCmp_EganJones.CLASS1 = 'Ratings'

             LEFT JOIN AJXDYNTABLE AjxCmp_NAIC
				ON VCINV.Account = AjxCmp_NAIC.Company
				AND AjxCmp_NAIC.IQDeleted = 0
				AND AjxCmp_NAIC.MetaDate1 <= " & DML(%DATE) & "
				AND AjxCmp_NAIC.MetaDate2 > " & DML(%DATE) & "
                AND AjxCmp_NAIC.MetaText2 = '2'
                AND AjxCmp_NAIC.CLASS1 = 'Ratings'

            LEFT JOIN AJXDYNTABLE AjxCmp_PDE
				ON VCINV.Account = AjxCmp_PDE.Company
				AND AjxCmp_PDE.IQDeleted = 0
				AND AjxCmp_PDE.MetaDate1 <= " & DML(%DATE) & "
				AND AjxCmp_PDE.MetaDate2 > " & DML(%DATE) & "
                AND AjxCmp_PDE.MetaText2 = '5'
                AND AjxCmp_NAIC.CLASS1 = 'Ratings'

			
            --max company ratings...
			LEFT JOIN (
                SELECT Company, MetaText1 as Rating, MetaDate2 as EndDate FROM AJXDYNTABLE outerAJX WHERE
                 IQDeleted = 0
                AND MetaText2 = '4'
                AND MetaDate2 = (SELECT MAX(MetaDate2) FROM AJXDYNTABLE innerAJX WHERE innerAJX.Company = outerAJX.Company AND IQDeleted = 0 AND MetaText2='4' and innerAJX.CLASS1='Ratings')
                AND CLASS1 = 'Ratings'
            ) AjxCmpMax_EganJones
              ON VCINV.Account = AjxCmpMax_EganJones.Company
            
            LEFT JOIN (
                SELECT Company, MetaText1 as Rating FROM AJXDYNTABLE outerAJX WHERE
                 IQDeleted = 0
                AND MetaText2 = '2'
                AND MetaDate2 = (SELECT MAX(MetaDate2) FROM AJXDYNTABLE innerAJX WHERE innerAJX.Company = outerAJX.Company AND IQDeleted = 0 AND MetaText2='2' AND innerAJX.CLASS1='Ratings')
                AND CLASS1 = 'Ratigns'
            ) AjxCmpMax_NAIC
              ON VCINV.Account = AjxCmpMax_NAIC.Company
              
           
            LEFT JOIN (
                SELECT Company, MetaText1 as Rating, MetaText5 as Score FROM AJXDYNTABLE outerAJX WHERE
                 IQDeleted = 0
                AND MetaText2 = '5'
                AND MetaDate2 = (SELECT MAX(MetaDate2) FROM AJXDYNTABLE innerAJX WHERE innerAJX.Company = outerAJX.Company AND IQDeleted = 0 AND MetaText2='5' AND innerAJX.CLASS1='Ratings')
                AND CLASS1 = 'Ratings'
            ) AjxCmpMax_PDE
            ON VCINV.Account = AjxCmpMax_PDE.Company
			
            
            --Egan Jones and NAIC Instrument Rating and PD & E rating
			LEFT JOIN AJXDYNTABLE AjxIns_EganJones
				 ON InvIns.AccountIns = AjxIns_EganJones.InvestmentIns
				 AND AjxIns_EganJones.IQDeleted = 0
				 AND AjxIns_EganJones.MetaDate1 <= " & DML(%DATE) & "
				 AND AjxIns_EganJones.MetaDate2 > " & DML(%DATE) & "
                 AND AjxIns_EganJones.MetaText2 = '4'
                 AND AjxIns_EganJones.CLASS1 = 'Ratings'
             
            LEFT JOIN AJXDYNTABLE AjxIns_NAIC
				 ON InvIns.AccountIns = AjxIns_NAIC.InvestmentIns
				 AND AjxIns_NAIC.IQDeleted = 0
				 AND AjxIns_NAIC.MetaDate1 <= " & DML(%DATE) & "
				 AND AjxIns_NAIC.MetaDate2 > " & DML(%DATE) & "
                 AND AjxIns_NAIC.MetaText2 = '2' 
                 AND AjxIns_NAIC.CLASS1 = 'Ratings'
             
            --instrument ratings 
            LEFT JOIN (
                SELECT InvestmentIns, MetaText1 as Rating FROM AJXDYNTABLE outerAJX WHERE
                 IQDeleted = 0
                AND MetaText2 = '4'
                AND MetaDate2 = (SELECT MAX(MetaDate2) FROM AJXDYNTABLE innerAJX WHERE innerAJX.InvestmentIns = outerAJX.InvestmentIns AND IQDeleted = 0 AND MetaText2='4' AND CLASS1 = 'Ratings')
                AND CLASS1 = 'Ratings'
            ) AjxInsMax_EganJones
              ON InvIns.AccountIns = AjxInsMax_EganJones.InvestmentIns

            LEFT JOIN (
                SELECT InvestmentIns, MetaText1 as Rating FROM AJXDYNTABLE outerAJX WHERE
                 IQDeleted = 0
                AND MetaText2 = '2'
                AND MetaDate2 = (SELECT MAX(MetaDate2) FROM AJXDYNTABLE innerAJX WHERE innerAJX.InvestmentIns = outerAJX.InvestmentIns AND IQDeleted = 0 AND MetaText2='2' AND CLASS1 = 'Ratings')
                AND CLASS1 = 'Ratings'
            ) AjxInsMax_NAIC
              ON InvIns.AccountIns = AjxInsMax_NAIC.InvestmentIns
            
        LEFT JOIN (
			SELECT op.INVESTMENTINS, SUM(COALESCE(op.AMOUNT2,0.0)) as AMOUNT FROM VCINVESTMENTOP op
			WHERE op.CloseDate <= " & DML(%DATE) & " AND op.TYPEINVESTOP IN('EQ02', 'EQ03')
			
			GROUP BY op.INVESTMENTINS
			
		 ) PAR_AMOUNT ON PAR_AMOUNT.INVESTMENTINS = INVINS.IQID 

		 LEFT JOIN (
			SELECT op.INVESTMENTINS, SUM(COALESCE(op.FORCECOST2,0.0)) as FORCECOST FROM VCINVESTMENTOP op
			WHERE op.CloseDate <= " & DML(%DATE) & " AND op.TYPEINVESTOP IN('EQ51')
			GROUP BY op.INVESTMENTINS
		 ) PAR_FORCECOST  ON PAR_FORCECOST.INVESTMENTINS = INVINS.IQID 

		 LEFT JOIN (
			SELECT op.INVESTMENTINS, SUM(COALESCE(op.COST2,0.0)) as COST_OF_SALE FROM VCINVESTMENTOP op
			WHERE op.CloseDate <= " & DML(%DATE) & " AND op.TYPEINVESTOP IN('EQ20')
			GROUP BY op.INVESTMENTINS
		 ) PAR_COST  ON PAR_COST.INVESTMENTINS = INVINS.IQID  


		JOIN VCPORTFOLIOASSET VCPRTAST 
			ON VCPRTAST.INVESTMENT = VCINV.IQID  
			AND  VCPRTAST.IQDELETED=0	
			
		JOIN VCPORTFOLIO VCPRT 
			ON VCPRT.IQID = VCPRTAST.PORTFOLIO 
			AND VCPRT.PORTFOLIO = 'PDE - Direct Equity' 
			AND  VCPRT.IQDELETED=0   

            
		LEFT JOIN VCINVESTMENTOP A  
		  ON A.INVESTMENTINS=INVINS.IQID 
          
		LEFT JOIN VCINVESTOPTYPE OPT 
		  ON OPT.CODE = A.TYPEINVESTOP 
			--AND OPT.DESCR like 'EQ - Purchase/Subscription (w/o Commitment)%' 
			and ( OPT.code = 'EQ01' --'Commitments'
                  or OPT.code = 'EQ03'     -- 'EQ - Purchase/Subscription (w/o Commitment)%'
				  or OPT.code = 'EQ42' -- 'EQ Reinvestment of cash Dividend into Shares
				  or OPT.code = 'EQ02' -- 'EQ - Subscription (Capital Issue with Commitment)
				  or OPT.code = 'EQ81' -- 'EQ - Conversion In
				  or OPT.code = 'EQ82' -- 'EQ - Conversion Out	
                  or OPT.code = 'EQ20'
                  or OPT.code = 'EQ51'
				)
			AND OPT.FILTER NOT LIKE '000000%'
		
        --GAAP_FAIR_VALUE
        LEFT JOIN VCINVESTMENTOP FAIRVALUE
            ON FAIRVALUE.INVESTMENTINS = INVINS.IQID
            AND FAIRVALUE.DRAFT = 0
            AND FAIRVALUE.IQDELETED = 0
            AND FAIRVALUE.CANCELLED = 0
            AND FAIRVALUE.TYPEINVESTOP = 'EQ30'
            AND FAIRVALUE.CLOSEDATE >= " & DML(%DATE) & "
        
        --to get last gaap fair value if you chose a date later than the available operations for this investment
        LEFT JOIN VCINVESTMENTOP FAIRVALUE_MAX
           ON FAIRVALUE_MAX.INVESTMENTINS = INVINS.IQID
           AND FAIRVALUE_MAX.DRAFT = 0
           AND FAIRVALUE_MAX.IQDELETED = 0
           AND FAIRVALUE_MAX.CANCELLED = 0
           AND FAIRVALUE_MAX.TYPEINVESTOP = 'EQ30'
           AND FAIRVALUE_MAX.CLOSEDATE = (
               SELECT MAX(innerOp.CLOSEDATE) FROM VCINVESTMENTOP innerOp
               WHERE innerOp.INVESTMENT = FAIRVALUE_MAX.INVESTMENT
               AND innerOp.DRAFT = 0
               AND innerOp.IQDELETED = 0
               AND innerOp.CANCELLED = 0
               AND innerOp.TYPEINVESTOP = 'EQ30'
           )
       
        
		JOIN ADMROLE REG 
            ON VCINV.IQREGIONID = REG.IQID 
			AND REG.IQDELETED=0 
			AND A.IQREGIONID = REG.IQID 
			AND REG.NAME = 'Private Debt & Equity'
		
		JOIN VCINVESTINSTYPE INVTYP 
            ON INVTYP.IQID = INVINS.INVESTINSTYPE 
			AND INVTYP.IQDELETED=0
			AND INVTYP.DESCR NOT LIKE 'Loan%'
            
		WHERE INVINS.IQDELETED=0 
		  AND A.IQDELETED=0 
          AND (A.CANCELLED=0 OR A.CANCELLED IS NULL)
          AND A.DRAFT=0
		  AND A.CLOSEDATE <=  " & DML(%DATE) & " 
		  AND ??FILTER
								 
	   GROUP BY  INVINS.ACCOUNTINS   
       --ORDER BY 9
        
        )    		
        
--------------------------------------------------------------------------------------------------------------------------      
        
       SELECT  
       MIN(INVESTMENTS.INVINS_ACCOUNTINS)    AS INVINS_ACCOUNTINS
        ,MIN(INVESTMENTS.ADMINISTRATIVE_AGENT)    AS ADMINISTRATIVE_AGENT
        ,MIN(INVESTMENTS.INVESTMENT_AMOUNT)    AS INVESTMENT
		,MIN(INVESTMENTS.FACILITY)			AS FACILITY
        ,MIN(INVESTMENTS.INV_YEAR)            AS INV_YEAR
        ,MIN(INVESTMENTS.PORTFOLIO)            AS PORTFOLIO
		,MIN(INVESTMENTS.SHORT_CODE)             AS short_code
        ,MIN(INVESTMENTS.COMPANY_DESCRIPTION)    AS COMPANY_DESCRIPTION
		,MIN(INVESTMENTS.COMPANY_LEGAL_NAME) 		   AS 'Company Legal Name'
		,MIN(INVESTMENTS.INST_CURR)              AS INST_CURR
		,MIN(INVESTMENTS.HQ_CITY)				   AS HQ_CITY
        ,MIN(INVESTMENTS.HQ_STATE)	       AS HQ_STATE
        ,MIN(INVESTMENTS.HQ_COUNTRY)       AS HQ_COUNTRY
        
        --none of these for equities...
        ,NULL AS CASH_COUPON
        ,NULL AS SPREAD
        ,NULL AS FLOOR
        ,NULL AS CAP
        
        ,MIN(SFASPONSOR.NAME)           AS SPONSOR     
        ,MIN(INVESTMENTS.DEAL_LEAD)    AS DEAL_LEAD
        ,MIN(INVESTMENTS.DEAL_SECONDARY)    AS DEAL_SECONDARY
        ,MIN(INVESTMENTS.DEAL_TERTIARY)    AS DEAL_TERTIARY
        ,MIN(INVESTMENTS.INSTR_STATUS)            AS INSTR_STATUS
        ,MIN(INVESTMENTS.COMPANY)                AS COMPANY
        ,MIN(INVESTMENTS.FUND)                    AS FUND
        ,MIN(INVESTMENTS.Cusip)                AS Cusip
        ,MIN(INVESTMENTS.RGA_CUSIP)            AS RGA_CUSIP
        ,MIN(INVESTMENTS.LP_TYPE)                AS LP_TYPE
		,MIN(INVESTMENTS.SENIORITY)				AS SENIORITY
		,MIN(INVESTMENTS.UNITRANCHE_MEZZ)		AS UNITRANCHE_MEZZ
		,MIN(INVESTMENTS.Collateral)				AS Collateral
        ,MIN(INVESTMENTS.LEGAL_STRUCTURE)            AS LEGAL_STRUCTURE
		,MIN(INVESTMENTS.PAR_OUTSTANDING)					AS PAR_OUTSTANDING
		,CASE WHEN  CHARINDEX(' - ', MIN(INDUSTRY.DESCR)) > 0 
            THEN  RTRIM(LTRIM(SUBSTRING(MIN(INDUSTRY.DESCR), CHARINDEX(' - ', MIN(INDUSTRY.DESCR))+3, LEN(MIN(INDUSTRY.DESCR))))) 
            ELSE  MIN(INDUSTRY.DESCR) 
        END        AS INDUSTRY
        ,CASE WHEN CHARINDEX(' - ', MIN(INDSUB.DESCR)) > 0 
            THEN RTRIM(LTRIM(SUBSTRING(MIN(INDSUB.DESCR), CHARINDEX(' - ', MIN(INDSUB.DESCR))+3, LEN(MIN(INDSUB.DESCR))))) 
            ELSE MIN(INDSUB.DESCR) 
        END               AS SUBINDUSTRY 
		,COALESCE(MIN(INVESTMENTS.GAAP_FAIR_VALUE),0)	AS GAAP_FAIR_VALUE
        ,MIN(INVESTMENTS.TOTAL_FACILITY_SIZE)	AS TOTAL_FACILITY_SIZE
        ,'NA'    AS MATURITY_DATE
        
		,MIN(COALESCE(INVESTMENTS.COMMITMENT,0)) AS COMMITMENT
		   
        ,MIN(INVESTMENTS.PDE_ROLE)                    AS PDE_ROLE

        ,MIN(INVESTMENTS.AMORTIZATION)   AS AMORTIZATION
        , NULL AS PIK      
        , CASE 
               WHEN MIN(InvOp.CloseDate) <= " & DML(%DATE) & "  AND MIN(INVESTMENTS.INVINS_USERDATE2) > " & DML(%DATE) & "  THEN 'Active'
                WHEN MIN(InvOp.CloseDate) <= " & DML(%DATE) & "  AND (ISNULL(MIN(INVESTMENTS.INVINS_USERDATE2), 1) = 1) THEN 'Active'
              ELSE 'Exited'
          END as FACILITY_STATUS
         
         ,MIN(INVESTMENTS.INVINS_USERDATE2) AS EXIT_DATE 
          
        --, CONVERT(varchar, MIN(INVOP.CloseDate), 1) as INVESTMENT_DATE 
        ,CONVERT(VARCHAR, FORMAT(MIN(INVOP.CloseDate),'MM/dd/yy'), 1) AS INVESTMENT_DATE
        --,MIN(INVOP.CloseDate) as INVESTMENT_DATE
        
        , CASE MIN(VCP_DEAL.BOARD_RIGHTS)
				    WHEN '1' THEN 'Voting Member'
                    WHEN '2' THEN 'Non-Voting Member'
                    WHEN '3' THEN 'Observation Rights'
                    WHEN '4' THEN 'None'
				END   AS BOARD_RIGHTS
		
        ,MIN(INVESTMENTS.SFA_CMP_IQID) AS COMPANY_ID
        
        ,MIN(INVESTMENTS.EganJonesCmpRating)	AS EGAN_RATING
        ,MIN(INVESTMENTS.NAICCmpRating)			AS NAIC_RATING
        ,MIN(INVESTMENTS.PDERating)             AS PDE_RATING 
        ,MIN(INVESTMENTS.EganJonesInsRating)	AS EGAN_INS_RATING
		,MIN(INVESTMENTS.NAICInsRating)			AS NAIC_INS_RATING              
        ,MIN(INVESTMENTS.PDEScore)             AS PDE_SCORE         
        
        --,MIN(INVESTMENTS.EganJonesCmpExpirationDate) AS EGAN_CMP_RATING_EXPIRATION_DATE
        ,CONVERT(VARCHAR, FORMAT(MIN(INVESTMENTS.EganJonesCmpExpirationDate),'MM/dd/yy'), 1) AS EGAN_CMP_RATING_EXPIRATION_DATE
        
        ,MIN(INVESTMENTS.PERCENT_OWNERSHIP) AS PERCENT_OWNERSHIP
       
        FROM INVESTMENTS 

	    LEFT JOIN AJXCRMCOMPANYINDUSTRYFOCUS AJXIND
			ON INVESTMENTS.SFA_CMP_IQID = AJXIND.CompanyId
            AND AJXIND.IQDeleted = 0     

        LEFT JOIN VCINDUSTRY INDSUB
            ON INVESTMENTS.SFA_CMP_INDUSTRY = INDSUB.CODE
            AND INDSUB.FILTER NOT LIKE '00000%'
         
        LEFT JOIN VCINDUSTRY INDUSTRY
            ON INDUSTRY.CODE = AJXIND.INDUSTRYCODE
            AND INDUSTRY.FILTER NOT LIKE '00000%' 
        
       --INVESTMENT STATUS
       LEFT JOIN 
         (
             SELECT 
                   InvestmentIns, MIN(CloseDate) as CloseDate, SUM(Amount2) as Amount2
             FROM VCINVESTMENTOP
             WHERE TypeInvestOp IN('EQ02', 'EQ03', 'EQ42', 'EQ81', 'EQ82')
             AND IQDeleted = 0
             GROUP BY InvestmentIns
         ) INVOP
         ON INVESTMENTS.INVINS_IQID = INVOP.InvestmentIns     
            
            
        --Board Rights, VCPROJECT (Deal screen) Investment summary...
       LEFT JOIN 
           (
               SELECT VCP1.ACCOUNT
                   ,VCP1.IQID
                   ,COALESCE(VCP2.UserText24, VCP1.UserText24) AS ROLE_IN_TRANSACTION
                   ,COALESCE(VCP2.UserText30, VCP1.UserText30) AS BOARD_RIGHTS
                   ,COALESCE(VCP2.UserText7, VCP1.UserText7) AS SPONSOR
               FROM VCPROJECT VCP1
               LEFT JOIN VCPROJECT VCP2
                   --LINKED_DEAL
                   ON VCP1.UserText38 = VCP2.IQID
                   AND VCP2.IQDeleted=0
               WHERE VCP1.IQDeleted=0
           ) VCP_DEAL
           ON INVESTMENTS.VCINV_ACCOUNT = VCP_DEAL.ACCOUNT    
           
          --SPONSOR
        LEFT JOIN SFAACCOUNT SFASPONSOR
            ON VCP_DEAL.SPONSOR = SFASPONSOR.IQID
            AND SFASPONSOR.IQDeleted = 0    
           


		GROUP BY  INVESTMENTS.INVINS_ACCOUNTINS ORDER BY INSTR_STATUS
        " ;      
	COLUMN SECURITY_ID TYPE= 'STRING' LABEL= 'eFront Security ID';
    COLUMN ADMINISTRATIVE_AGENT TYPE= 'STRING' LABEL= 'Administrative Agent';
    COLUMN INVESTMENT TYPE= 'DOUBLE' LABEL= 'Investment Amount';
    COLUMN FACILITY TYPE= 'STRING' LABEL= 'Facility';
    COLUMN INV_YEAR TYPE= 'INTEGER' LABEL= 'Investment Year';
    COLUMN PORTFOLIO TYPE= 'STRING' LABEL= 'Portfolio';
    COLUMN short_code TYPE= 'STRING' LABEL= 'Company';
    COLUMN COMPANY_DESCRIPTION TYPE= 'STRING' LABEL= 'Company Description';
    COLUMN 'Company Legal Name' TYPE= 'STRING' LABEL= 'Company Legal Name';
    COLUMN INST_CURR TYPE= 'STRING' LABEL= 'Instrument Currency';
    COLUMN HQ_CITY TYPE= 'STRING' LABEL= 'HQ City';
    COLUMN HQ_STATE TYPE= 'STRING' LABEL= 'HQ State';
    COLUMN HQ_COUNTRY TYPE= 'STRING' LABEL= 'HQ Country';
    COLUMN CASH_COUPON TYPE= 'STRING' LABEL= 'Cash Coupon';
    COLUMN SPREAD TYPE= 'STRING' LABEL= 'Spread';
    COLUMN FLOOR TYPE= 'STRING' LABEL= 'Floor';
    COLUMN CAP TYPE= 'STRING' LABEL= 'Cap';
    COLUMN SPONSOR TYPE= 'STRING' LABEL= 'Sponsor';
    COLUMN DEAL_LEAD TYPE= 'STRING' LABEL= 'Deal Lead';
    COLUMN DEAL_SECONDARY TYPE= 'STRING' LABEL= 'Deal Secondary';
    COLUMN DEAL_TERTIARY TYPE= 'STRING' LABEL= 'Deal Tertiary';
    COLUMN INSTR_STATUS TYPE= 'STRING' LABEL= 'Instrument Status';
    COLUMN COMPANY TYPE= 'STRING' LABEL= '';
    COLUMN FUND TYPE= 'STRING' LABEL= 'Fund';
    COLUMN Cusip TYPE= 'STRING' LABEL= 'CUSIP';
    COLUMN RGA_CUSIP TYPE= 'STRING' LABEL= 'RGA CUSIP';
    COLUMN LP_TYPE TYPE= 'STRING' LABEL= 'LP Type';
    COLUMN SENIORITY TYPE= 'STRING' LABEL= 'Seniority';
    COLUMN UNITRANCHE_MEZZ TYPE= 'STRING' LABEL= 'Unitranche / Mezzanine';
    COLUMN Collateral TYPE= 'STRING' LABEL= 'Collateral';
    COLUMN LEGAL_STRUCTURE TYPE= 'STRING' LABEL= 'Legal Structure';
    COLUMN PAR_OUTSTANDING TYPE= 'DOUBLE' LABEL= 'Par / Outstanding';
    COLUMN INDUSTRY TYPE= 'STRING' LABEL= 'Industry';
    COLUMN SUBINDUSTRY TYPE= 'STRING' LABEL= 'Industry Sub Sector';
    COLUMN GAAP_FAIR_VALUE TYPE= 'DOUBLE' LABEL= 'GAAP Fair Value';
    COLUMN TOTAL_FACILITY_SIZE TYPE= 'STRING' LABEL= 'Total Facility Size';
    COLUMN MATURITY_DATE TYPE='STRING' LABEL='Maturity Date';
    COLUMN COMMITMENT TYPE= 'DOUBLE' LABEL= 'Commitment';
    COLUMN PDE_ROLE TYPE= 'STRING' LABEL= 'PD&E Role';
    COLUMN AMORTIZATION TYPE= 'STRING' LABEL= 'Amortization';
    COLUMN PIK TYPE= 'STRING' LABEL= 'PIK Coupon'; 
    COLUMN FACILITY_STATUS TYPE= 'STRING' LABEL= 'Facility Status';
    COLUMN EXIT_DATE TYPE= 'STRING' LABEL= 'Exit Date';
    COLUMN INVESTMENT_DATE TYPE= 'STRING' LABEL= 'Investment Date'; 
    COLUMN BOARD_RIGHTS TYPE= 'STRING' LABEL= 'Board Rights';
    COLUMN COMPANY_ID TYPE= 'STRING' LABEL= 'Company Id';
    COLUMN EGAN_RATING TYPE= 'STRING' LABEL= 'Egan-Jones Company Rating';
    COLUMN NAIC_RATING TYPE= 'STRING' LABEL= 'NAIC Company Rating';
    COLUMN PDE_RATING TYPE= 'STRING' LABEL= 'PD&E Rating';
    COLUMN EGAN_INS_RATING TYPE= 'STRING' LABEL= 'Egan-Jones Instrument Rating';
    COLUMN NAIC_INS_RATING TYPE= 'STRING' LABEL= 'NAIC Instrument Rating';
    COLUMN PDE_SCORE TYPE= 'STRING' LABEL= 'PD&E Rating Score';
    COLUMN EGAN_CMP_RATING_EXPIRATION_DATE TYPE= 'STRING' LABEL= 'Egan-Jones Rating Expiration'; 
    COLUMN PERCENT_OWNERSHIP TYPE= 'STRING' LABEL= '% Ownership';
    
RUN;

/*
PROC EXPORTEXCEL FILE=GETTEMPPATH()+"\PDE_Transactions.xlsx" LABEL;
   TABLE = WORK.INVSTINS_EQ
   SHEETNAME="raw";
RUN;
*/
//LOANS FRONTSCRIPT

//PROC PRINT DATA =  WORK.INVSTINS;title 'loans'; RUN; 

//DATA WORK.INSTRPOS_LN (KEEP = POSITION_DATE COMPANY_NAME SECURITY_NAME EXIT CURRENTCOST PRINCIPAL LASTVALUATION SECURITY_ID );
// BGT 2018-07-13: Upgrade issue, EXIT column from calc engine doesn't include INTERNALTRANS anymore
%Let COLUMN_EXIT = "EXIT";
DATA WORK.INSTRPOS_LN (KEEP = POSITION_DATE COMPANY_NAME SECURITY_NAME EXIT CURRENTCOST BALANCE LASTVALUATION SECURITY_ID REALIZEDCOST INTERNALTRANS REIMBURSEMENT ALLOTHERINCOME);
  SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE = %DATE 
									AND SECURITY_CLASS_NAME = "LOANS" 
									AND LENGTH(COMPANY_NAME) > 0 );
  @COLUMN_EXIT = Nz(@COLUMN_EXIT,0) + Nz(INTERNALTRANS,0);
RUN;
//PROC PRINT DATA = WORK.INSTRPOS_LN;title 'INSTRPOS_LN'; RUN;                                                                                                                                                                                              
  
   
//DATA WORK.DIRLOAN_LIST(RENAME = (SECURITY_ID=SECURITY_COMPANY_ID POSITION_DATE=REFERENCE_DATE));
DATA WORK.DIRLOAN_LIST(RENAME = (SECURITY_ID=SECURITY_COMPANY_ID POSITION_DATE=REFERENCE_DATE BALANCE=PRINCIPAL));
  MERGE WORK.INVSTINS(IN=IN1) WORK.INSTRPOS_LN(IN=IN2);
   BY SECURITY_ID;
   If (IN1 and IN2) then Output;
   End;
RUN; 
//PROC PRINT DATA = WORK.DIRLOAN_LIST;Title 'merge DIRLOAN_LIST '; RUN;                                                                                                                                                                                              

DATA WORK.TIRR_ALL;
    SET DCE.FV_T_PORTCO_TRANSACTIONS(WHERE REFERENCE_DATE<=%DATE 
                                                  AND TRANSACTION_TYPE<>'LN05' 
                                                  AND TRANSACTION_TYPE<>'LN07' 
												  AND TRANSACTION_TYPE<>'EQ06');
RUN;


//LN05, LN06 and EQ07 - Exclude Origination fees amortization transactions 
// Fields  SECURITY_COMPANY_ID REFERENCE_DATE SECURITY_NAME COMPANY_NAME IRRNET 
PROC MEANS DATA = WORK.TIRR_ALL
    OUT=WORK.TIRR;
    CLASS SECURITY_COMPANY_ID REFERENCE_DATE; 
    VAR  SECURITY_NAME; 
    VAR  COMPANY_NAME;
    SUM CASH2(NAME=IRRNET);
RUN;   

//sorted for performance purposes   
//rga cusip
PROC SORT DATA = WORK.DIRLOAN_LIST;
    BY SECURITY_COMPANY_ID REFERENCE_DATE;
RUN;    

//rga cusip
PROC MEANS DATA =  WORK.DIRLOAN_LIST OUT=WORK.TVALUATION;
  CLASS SECURITY_COMPANY_ID REFERENCE_DATE; 
  VAR  SECURITY_NAME;  
  VAR  COMPANY_NAME;     
  SUM LASTVALUATION(NAME=IRRNET);
RUN; 

  	         
        
DATA WORK.TIRR;
  SET  WORK.TIRR(IN=T1) WORK.TVALUATION; 
  IF IRRNET IS NULL 
	THEN IRRNET=0; 
  END; 
  COLUMN SORT_IRR TYPE=INTEGER; 
  IF T1 
	THEN SORT_IRR=0;  
   ELSE SORT_IRR=1; 
		REFERENCE_DATE = %DATE;
  END; 
  _OUTPUT_=IRRNET <> 0 OR SORT_IRR=1;
RUN; 
  
//---------------------------
DATA WORK.DIRLOAN_LIST; 
  SET WORK.DIRLOAN_LIST;  
  COLUMN CalcProceedsValue TYPE=FLOAT; 
  COLUMN V_EXIT TYPE=FLOAT LABEL = "Realized"; 
  COLUMN CMPACTIVESTATUS TYPE=INTEGER;
  
  If INTERNALTRANS <> 0
	 THEN V_EXIT = REIMBURSEMENT + ALLOTHERINCOME;
	ELSE 
	  V_EXIT = EXIT; 
  End; 
RUN;  

//PROC PRINT DATA = WORK.DIRLOAN_LIST; title "Dir loans with ";RUN;

//performance of the merge below WORK.DIRLOAN_LIST1
PROC SORT DATA = WORK.TIRR; 
  BY SECURITY_COMPANY_ID; 
RUN; 

PROC SORT DATA = WORK.DIRLOAN_LIST;
  BY SECURITY_COMPANY_ID; 
RUN;

/////////////////////////////////////
//IRR by RGA CUSIP//////////////////


//---------------------------ADD IRR to the DIRLOAN list
//PROC PRINT DATA= WORK.DIRLOAN_LIST;title 'DIRLOAN_LIST********'; RUN;
DATA WORK.DIRLOAN_LIST1;
  MERGE WORK.DIRLOAN_LIST(IN=IN1) WORK.TIRR(IN=IN2);
  By SECURITY_COMPANY_ID;
  If (IN1 and IN2) then Output;
  End;
RUN;
//PROC PRINT DATA= WORK.DIRLOAN_LIST1;title 'DIRLOAN_LIST1'; RUN;
 		
        
        
DATA WORK.DIRLOAN_LIST1; 
  SET WORK.DIRLOAN_LIST1; 
  //COLUMN Balance TYPE=FLOAT;
  COLUMN INVST_TYPE TYPE = STRING LABEL = "Investment Type";
  COLUMN TOTALVALUE TYPE = FLOAT LABEL = "Total Value"; 
  COLUMN PAR_OUTSTANDING TYPE = FLOAT LABEL = "Par / Outstanding";
  
  //if it's exited, then make the pik adn cash coupon 0% per request 20210215
  IF FACILITY_STATUS = "Exited" 
      THEN PIK = '0.0'; CASH_COUPON = '0.0';
  END;
  
     If INTERNALTRANS <> 0
        Then TOTALVALUE = V_EXIT + LASTVALUATION; 
      Else  
        TOTALVALUE = EXIT + LASTVALUATION;
     End; 
     INVST_TYPE = "LOAN";
     //PAR_VALUE = PRINCIPAL;
     PAR_OUTSTANDING = PRINCIPAL;
RUN;    


//EQUITIES FRONTSCRIPT
//PROC PRINT DATA =  WORK.INVSTINS_EQ;title 'INVSTINS_EQ'; RUN;  
																																																	
// BGT 2018-07-13: Upgrade issue, EXIT column from calc engine doesn't include INTERNALTRANS anymore
DATA WORK.INSTRPOS_EQ (KEEP = POSITION_DATE COMPANY_NAME SECURITY_NAME EXIT CURRENTCOST LASTVALUATION SECURITY_ID );
    SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE 
								   AND SECURITY_CLASS_NAME <> "LOANS" 
								   AND LENGTH(COMPANY_NAME)>0 );
//@COLUMN_EXIT = Nz(@COLUMN_EXIT,0) + Nz(INTERNALTRANS,0);
RUN;


//PROC PRINT DATA = DCE.REFINSTRUMENTPOSITIONS; RUN;
//PROC PRINT DATA = WORK.INSTRPOS_EQ; RUN;

DATA WORK.DIREQUITY_LIST(RENAME = (SECURITY_ID=SECURITY_COMPANY_ID POSITION_DATE=REFERENCE_DATE));
	MERGE WORK.INVSTINS_EQ(IN=IN1) WORK.INSTRPOS_EQ(IN=IN2);
	BY SECURITY_ID;
	If (IN1 and IN2) then Output;
	End;
    
    COLUMN CMPACTIVESTATUS TYPE=INTEGER;
RUN; 																					   
//PROC PRINT DATA = WORK.DIREQUITY_LIST; RUN;

PROC FAQUERY Query="EFR_ALADDIN\Positions-PortRev" (DATE=%DATE) ; 
	TABLE "Default"  OUT=WORK.QRY_POSITIONS_PORTREV;
RUN;
//PROC PRINT DATA=WORK.QRY_POSITIONS_PORTREV; RUN;

DATA WORK.QRY_POSITIONS_PORTREV(DROP = LASTVALUATION);
	SET WORK.QRY_POSITIONS_PORTREV;
	COLUMN CUSIP TYPE=STRING; 
	CUSIP = ltrim(rtrim(Q_CUSIP)) ; 
RUN;

//PROC PRINT DATA=WORK.QRY_POSITIONS_PORTREV; RUN;

DATA WORK.DIREQUITY_LIST;
	MERGE WORK.DIREQUITY_LIST(IN=IN1) WORK.QRY_POSITIONS_PORTREV;
	BY CUSIP  ;
	If (IN1) then Output;
	End;
RUN; 
//PROC PRINT DATA=WORK.DIREQUITY_LIST; RUN;

//get the Net Book Value from the query
//Should the query live here? will some one change it on us? 
//Should we create a folder special for this query?
PROC FAQUERY Query="Private Debt and Equity\Directs - Net Book Value" (DATE=CDATE(%DATE));
    TABLE "Default"  
    OUT = WORK.NET_BOOK_VALUE;
RUN;

DATA WORK.NET_BOOK_VALUE (RENAME=(SECURITY_ID = SECURITY_COMPANY_ID) KEEP=NET_BOOK_VALUE SECURITY_ID)  ;
    SET WORK.NET_BOOK_VALUE;
RUN;

DATA WORK.DIREQUITY_LIST;
    MERGE WORK.DIREQUITY_LIST(IN=IN1) WORK.NET_BOOK_VALUE;
    BY SECURITY_COMPANY_ID;
    IF (IN1) THEN OUTPUT; END;
RUN;


//set GAAP_FAIR_VALUE to 0 if not LP_TYPE fund, per stan and kassy 12/14/2020
DATA WORK.DIREQUITY_LIST(DROP=FUND_ID FUND INVESTORNAME GL_COST_ELIM GAAP_BOOK_VALUE);
  SET WORK.DIREQUITY_LIST;
  // COLUMN CURRENTCOST  TYPE=DOUBLE;  
  COLUMN GAAP_BOOK_VALUE_TEMP TYPE = DOUBLE LABEL = "GAAP Book Value"; 
  IF LP_TYPE = 'Fund' 
      THEN GAAP_BOOK_VALUE = GAAP_BOOK_VALUE + GL_COST_ELIM;
      ELSEIF LP_TYPE = 'Company' 
      THEN GAAP_BOOK_VALUE = NET_BOOK_VALUE;
  END;
  GAAP_BOOK_VALUE_TEMP = GAAP_BOOK_VALUE;
  //GAAP_BOOK_VALUE = NET_BOOK_VALUE;
RUN;
//PROC PRINT DATA=WORK.DIREQUITY_LIST; RUN;

DATA WORK.DIREQUITY_LIST (RENAME = (GAAP_BOOK_VALUE_TEMP = GAAP_BOOK_VALUE));
    SET WORK.DIREQUITY_LIST;
RUN;


        
PROC MEANS DATA =DCE.FV_T_PORTCO_TRANSACTIONS(WHERE REFERENCE_DATE <= %DATE 
												AND TRANSACTION_TYPE<>'LN05' 
												AND TRANSACTION_TYPE<>'LN07' 
												AND TRANSACTION_TYPE<>'EQ06'
											 )  OUT=WORK.TIRR_EQ;
	CLASS SECURITY_COMPANY_ID REFERENCE_DATE; 
	VAR  SECURITY_NAME; 
	VAR  COMPANY_NAME;     
	SUM CASH2(NAME=IRRNET);
RUN; 
        
//sort to optimize the MEANS for WORK.TVALUAIONT_EQ
PROC SORT DATA = WORK.DIREQUITY_LIST;
    BY SECURITY_COMPANY_ID REFERENCE_DATE;
RUN;
        
PROC MEANS DATA =  WORK.DIREQUITY_LIST OUT=WORK.TVALUATION_EQ;				   
	CLASS SECURITY_COMPANY_ID REFERENCE_DATE; 
	VAR  SECURITY_NAME;  
	VAR  COMPANY_NAME;     
	SUM LASTVALUATION(NAME=IRRNET);
RUN; 
																	 

DATA WORK.TIRR_EQ;
	SET  WORK.TIRR_EQ(IN=T1) WORK.TVALUATION_EQ; 
							
	IF IRRNET IS NULL THEN IRRNET=0; END; 
	COLUMN SORT_IRR TYPE=INTEGER; 
	IF T1 
	  THEN SORT_IRR=0;  
	 ELSE SORT_IRR=1; 
	   REFERENCE_DATE=%DATE;
	END; 
	_OUTPUT_=IRRNET <>0 OR SORT_IRR=1;
RUN; 
														 
//removed the other indexes, we only need ot match on SECURITY_COMPANY_ID
PROC SORT DATA = WORK.TIRR_EQ; 
    BY SECURITY_COMPANY_ID; //SECURITY_NAME COMPANY_NAME SORT_IRR REFERENCE_DATE; 
RUN; 
        
DATA WORK.DIREQUITY_LIST1;
	MERGE WORK.DIREQUITY_LIST(IN=IN1) WORK.TIRR_EQ(IN=IN2);
	BY SECURITY_COMPANY_ID;
	If (IN1 and IN2) then Output;
	End;
RUN;
																					 
																																													
DATA WORK.DIREQUITY_LIST1; 
	SET WORK.DIREQUITY_LIST1; 
	COLUMN INVST_TYPE TYPE = STRING LABEL = "Investment Type";
    COLUMN TOTALVALUE TYPE=FLOAT LABEL = "Total Value";
    //COLUMN PAR_VALUE TYPE = FLOAT;
    COLUMN V_EXIT TYPE = FLOAT LABEL = "Realized";
    COLUMN FIXED_FLOATING TYPE= 'STRING' LABEL= 'Fixed / Floating'; 
    
    FIXED_FLOATING = 'NA';
	INVST_TYPE = "EQUITY";
    TOTALVALUE= EXIT + LASTVALUATION;
    //PAR_VALUE = TOTALVALUE;
    V_EXIT = EXIT ;     
RUN;
/*
PROC EXPORTEXCEL FILE=GETTEMPPATH()+"\PDE_Transactions.xlsx" DROP;
   TABLE = WORK.DIREQUITY_LIST1
   SHEETNAME="test transactions";
RUN;
*/
//PROC PRINT DATA = WORK.DIREQUITY_LIST1; RUN; 
//PROC PRINT DATA = DIREQUITY_LIST1; RUN;  

/*------------------Direct LLC Corps-----------*/ 

/*------------------?. Direct All Investments-----------*/ 

//combine equities and loans into one list to feed the dashboard
DATA WORK.DIRALL_LIST1;
    SET WORK.DIREQUITY_LIST1 WORK.DIRLOAN_LIST1;
RUN;

PROC SORT DATA = WORK.DIRALL_LIST1;
    BY COMPANY_ID;
RUN;

//Get the status of a company by the instrument statuses...

//get the instruments that are active
DATA WORK.ACTIVE_CMP (WHERE FACILITY_STATUS = 'Active');
    SET WORK.DIRALL_LIST1;
RUN;

//aggregate this list of active instruments down to the distinct companies
PROC MEANS DATA = WORK.ACTIVE_CMP OUT = WORK.ACTIVE_CMP_LIST;
    CLASS COMPANY_ID;
RUN;

PROC SORT DATA = WORK.ACTIVE_CMP_LIST;
    BY COMPANY_ID;
RUN;


//merge the active companies back into the original combined list, set the status to active if it's in the active list
DATA WORK.DIRALL_LIST1;
    MERGE WORK.DIRALL_LIST1 (IN=IN_LEFT) WORK.ACTIVE_CMP_LIST (IN=IN_RIGHT);
    BY COMPANY_ID;
    
    COLUMN IRR_TEMP TYPE=DOUBLE LABEL="IRR"; IRR_TEMP = IRRNET;
    //COLUMN GAAP_BOOK_VALUE TYPE=DOUBLE LABEL="GAAP Book Value"; 
    COLUMN UNREALIZED TYPE=DOUBLE LABEL="Unrealized"; UNREALIZED = LASTVALUATION;
    COLUMN COMPANY_STATUS TYPE=STRING LABEL = "Company Status";
    COLUMN TOTAL_COUPON TYPE=STRING LABEL = "Total Coupon"; 
    

    IF INVST_TYPE = 'LOAN'
        THEN GAAP_BOOK_VALUE = NULL;
            PAR_OUTSTANDING = PRINCIPAL;
        //ELSE GAAP_BOOK_VALUE = CURRENTCOST;
    END;
    
    
    //clean up null values here...
    IF PAR_OUTSTANDING IS NULL
        THEN PAR_OUTSTANDING = 0.0;
    END;
    
   //NR for ratings columns that are not populated
    IF EGAN_RATING IS NULL THEN EGAN_RATING = 'NR';
        ELSE EGAN_RATING = LOOKUPDYN("Ratings","METATEXT1",EGAN_RATING);
        /*ELSEIF EGAN_RATING = '1' THEN EGAN_RATING = 'AAA';
        ELSEIF EGAN_RATING = '2' THEN EGAN_RATING = 'AA+';
        ELSEIF EGAN_RATING = '3' THEN EGAN_RATING = 'AA';
        ELSEIF EGAN_RATING = '4' THEN EGAN_RATING = 'AA-';
        ELSEIF EGAN_RATING = '5' THEN EGAN_RATING = 'A+';
        ELSEIF EGAN_RATING = '6' THEN EGAN_RATING = 'A';
        ELSEIF EGAN_RATING = '7' THEN EGAN_RATING = 'A-';
        ELSEIF EGAN_RATING = '8' THEN EGAN_RATING = 'BBB+';
        ELSEIF EGAN_RATING = '9' THEN EGAN_RATING = 'BBB';
        ELSEIF EGAN_RATING = '10' THEN EGAN_RATING = 'BBB-';
        ELSEIF EGAN_RATING = '11' THEN EGAN_RATING = 'BB+';
        ELSEIF EGAN_RATING = '12' THEN EGAN_RATING = 'BB';
        ELSEIF EGAN_RATING = '13' THEN EGAN_RATING = 'BB-';
        ELSEIF EGAN_RATING = '14' THEN EGAN_RATING = 'B+';
        ELSEIF EGAN_RATING = '15' THEN EGAN_RATING = 'B';
        ELSEIF EGAN_RATING = '16' THEN EGAN_RATING = 'B-';
        ELSEIF EGAN_RATING = '17' THEN EGAN_RATING = 'CCC+';
        ELSEIF EGAN_RATING = '18' THEN EGAN_RATING = 'CCC';
        ELSEIF EGAN_RATING = '19' THEN EGAN_RATING = 'CCC-';
        ELSEIF EGAN_RATING = '20' THEN EGAN_RATING = 'CC';
        ELSEIF EGAN_RATING = '21' THEN EGAN_RATING = 'C';
        ELSEIF EGAN_RATING = '23' THEN EGAN_RATING = 'D';
        ELSEIF EGAN_RATING = '28' THEN EGAN_RATING = 'A1';
        ELSEIF EGAN_RATING = '29' THEN EGAN_RATING = 'A1+';
        ELSEIF EGAN_RATING = '30' THEN EGAN_RATING = 'A2';
        ELSEIF EGAN_RATING = '31' THEN EGAN_RATING = 'A3';
        ELSEIF EGAN_RATING = '56' THEN EGAN_RATING = 'NR';
        ELSE EGAN_RATING = EGAN_RATING;*/
    END;
    
    IF NAIC_RATING IS NULL THEN NAIC_RATING = 'NR';
    //checks if old ratings are presented first...
        IF NAIC_RATING = '1' THEN NAIC_RATING = '45';
            ELSEIF NAIC_RATING = '2' THEN NAIC_RATING = '46';
            ELSEIF NAIC_RATING = '3' THEN NAIC_RATING = '47';
            ELSEIF NAIC_RATING = '4' THEN NAIC_RATING = '48';
            ELSEIF NAIC_RATING = '5' THEN NAIC_RATING = '49';
            ELSEIF NAIC_RATING = '6' THEN NAIC_RATING = '50';
            END;
        ELSE NAIC_RATING = LOOKUPDYN("Ratings","METATEXT1", NAIC_RATING);
        /*
        ELSEIF NAIC_RATING = '45' THEN NAIC_RATING = '1';
        ELSEIF NAIC_RATING = '46' THEN NAIC_RATING = '2';
        ELSEIF NAIC_RATING = '47' THEN NAIC_RATING = '3';
        ELSEIF NAIC_RATING = '48' THEN NAIC_RATING = '4';
        ELSEIF NAIC_RATING = '49' THEN NAIC_RATING = '5';
        ELSEIF NAIC_RATING = '50' THEN NAIC_RATING = '6';
        ELSEIF NAIC_RATING = '56' THEN NAIC_RATING = 'NR';
        ELSE NAIC_RATING = EGAN_RATING;
        */
    END;
    
    IF PDE_RATING IS NULL THEN PDE_RATING = 'NR';
        ELSE PDE_RATING = LOOKUPDYN("Ratings","METATEXT1", PDE_RATING);
        /*
        ELSEIF PDE_RATING = '51' THEN PDE_RATING = 'Low';
        ELSEIF PDE_RATING = '52' THEN PDE_RATING = 'Moderate';
        ELSEIF PDE_RATING = '53' THEN PDE_RATING = 'Standard';
        ELSEIF PDE_RATING = '54' THEN PDE_RATING = 'Elevated';
        ELSEIF PDE_RATING = '55' THEN PDE_RATING = 'Sub-Standard';
        ELSEIF PDE_RATING = '56' THEN PDE_RATING = 'NR';
        ELSE PDE_RATING = PDE_RATING;
        */
    END; 
    
    IF EGAN_INS_RATING IS NULL THEN EGAN_INS_RATING = 'NR';
        ELSE EGAN_INS_RATING = LOOKUPDYN("Ratings","METATEXT1", EGAN_INS_RATING);
        /*ELSEIF EGAN_INS_RATING = '1' THEN EGAN_INS_RATING = 'AAA';
        ELSEIF EGAN_INS_RATING = '2' THEN EGAN_INS_RATING = 'AA+';
        ELSEIF EGAN_INS_RATING = '3' THEN EGAN_INS_RATING = 'AA';
        ELSEIF EGAN_INS_RATING = '4' THEN EGAN_INS_RATING = 'AA-';
        ELSEIF EGAN_INS_RATING = '5' THEN EGAN_INS_RATING = 'A+';
        ELSEIF EGAN_INS_RATING = '6' THEN EGAN_INS_RATING = 'A';
        ELSEIF EGAN_INS_RATING = '7' THEN EGAN_INS_RATING = 'A-';
        ELSEIF EGAN_INS_RATING = '8' THEN EGAN_INS_RATING = 'BBB+';
        ELSEIF EGAN_INS_RATING = '9' THEN EGAN_INS_RATING = 'BBB';
        ELSEIF EGAN_INS_RATING = '10' THEN EGAN_INS_RATING = 'BBB-';
        ELSEIF EGAN_INS_RATING = '11' THEN EGAN_INS_RATING = 'BB+';
        ELSEIF EGAN_INS_RATING = '12' THEN EGAN_INS_RATING = 'BB';
        ELSEIF EGAN_INS_RATING = '13' THEN EGAN_INS_RATING = 'BB-';
        ELSEIF EGAN_INS_RATING = '14' THEN EGAN_INS_RATING = 'B+';
        ELSEIF EGAN_INS_RATING = '15' THEN EGAN_INS_RATING = 'B';
        ELSEIF EGAN_INS_RATING = '16' THEN EGAN_INS_RATING = 'B-';
        ELSEIF EGAN_INS_RATING = '17' THEN EGAN_INS_RATING = 'CCC+';
        ELSEIF EGAN_INS_RATING = '18' THEN EGAN_INS_RATING = 'CCC';
        ELSEIF EGAN_INS_RATING = '19' THEN EGAN_INS_RATING = 'CCC-';
        ELSEIF EGAN_INS_RATING = '20' THEN EGAN_INS_RATING = 'CC';
        ELSEIF EGAN_INS_RATING = '21' THEN EGAN_INS_RATING = 'C';
        ELSEIF EGAN_INS_RATING = '23' THEN EGAN_INS_RATING = 'D';
        ELSEIF EGAN_INS_RATING = '28' THEN EGAN_INS_RATING = 'A1';
        ELSEIF EGAN_INS_RATING = '29' THEN EGAN_INS_RATING = 'A1+';
        ELSEIF EGAN_INS_RATING = '30' THEN EGAN_INS_RATING = 'A2';
        ELSEIF EGAN_INS_RATING = '31' THEN EGAN_INS_RATING = 'A3';
        ELSEIF EGAN_INS_RATING = '56' THEN EGAN_INS_RATING = 'NR';
        ELSE EGAN_INS_RATING = EGAN_INS_RATING;*/
        
    END;
    IF NAIC_INS_RATING IS NULL THEN NAIC_INS_RATING = 'NR';
        //check if getting the old numeric ratings 1 through 6 and then redefine to new numbering scheme so LOOKUPDYN() will translate this right.
        IF NAIC_INS_RATING = '1' THEN NAIC_INS_RATING = '45';
            ELSEIF NAIC_INS_RATING = '2' THEN NAIC_INS_RATING = '46';
            ELSEIF NAIC_INS_RATING = '3' THEN NAIC_INS_RATING = '47';
            ELSEIF NAIC_INS_RATING = '4' THEN NAIC_INS_RATING = '48';
            ELSEIF NAIC_INS_RATING = '5' THEN NAIC_INS_RATING = '49';
            ELSEIF NAIC_INS_RATING = '6' THEN NAIC_INS_RATING = '50';
            END;
        
    ELSE NAIC_INS_RATING = LOOKUPDYN("Ratings","METATEXT1", NAIC_INS_RATING);
    /*
        ELSEIF NAIC_INS_RATING = '45' THEN NAIC_INS_RATING = '1';
        ELSEIF NAIC_INS_RATING = '46' THEN NAIC_INS_RATING = '2';
        ELSEIF NAIC_INS_RATING = '47' THEN NAIC_INS_RATING = '3';
        ELSEIF NAIC_INS_RATING = '48' THEN NAIC_INS_RATING = '4';
        ELSEIF NAIC_INS_RATING = '49' THEN NAIC_INS_RATING = '5';
        ELSEIF NAIC_INS_RATING = '50' THEN NAIC_INS_RATING = '6';
        ELSEIF NAIC_INS_RATING = '56' THEN NAIC_INS_RATING = 'NR';
        ELSE NAIC_INS_RATING = NAIC_INS_RATING;
    */
    END;
    IF PDE_SCORE IS NULL
        THEN PDE_SCORE = 'NR';
    END;
    IF EGAN_CMP_RATING_EXPIRATION_DATE IS NULL
        THEN EGAN_CMP_RATING_EXPIRATION_DATE = 'NR';
    END;
    
    IF CASH_COUPON IS NULL AND PIK IS NULL
        THEN TOTAL_COUPON = NULL;
    END;
    
    IF FACILITY_STATUS = 'Exited'
        THEN %FX_RATE_DATE = EXIT_DATE;
        ELSE %FX_RATE_DATE = %DATE;
    END;
    
    IF (IN_LEFT AND IN_RIGHT)
        THEN COMPANY_STATUS = 'Active';
        ELSE COMPANY_STATUS = 'Exited';
    END;
    
    //this is incase the RGA CUSIP field is not filled out, it takes on the CUSIP value
    IF RGA_CUSIP IS NULL 
        THEN RGA_CUSIP = CUSIP;
    END;
    
    //this is to convert currencies that are non-usd instruments 
    IF INST_CURR <> 'USD' 
        THEN 
           COMMITMENT = CONVERTCURR(COMMITMENT, INST_CURR, 'USD', %FX_RATE_DATE);
           INVESTMENT = CONVERTCURR(INVESTMENT, INST_CURR, 'USD', %FX_RATE_DATE);
           PAR_OUTSTANDING = CONVERTCURR(PAR_OUTSTANDING, INST_CURR, 'USD', %FX_RATE_DATE);
           GAAP_BOOK_VALUE = CONVERTCURR(GAAP_BOOK_VALUE, INST_CURR, 'USD', %FX_RATE_DATE);
           GAAP_FAIR_VALUE = CONVERTCURR(GAAP_FAIR_VALUE, INST_CURR,'USD', %FX_RATE_DATE);
           //V_EXIT is Realized
           V_EXIT = CONVERTCURR(V_EXIT, INST_CURR, 'USD', %FX_RATE_DATE);
           UNREALIZED = CONVERTCURR(UNREALIZED, INST_CURR, 'USD', %FX_RATE_DATE);
           TOTALVALUE = CONVERTCURR(TOTALVALUE, INST_CURR, 'USD', %FX_RATE_DATE);
    END;   
    
    COLUMN UNFUNDED_COMMITMENT TYPE=DOUBLE LABEL = "Unfunded Commitment"; UNFUNDED_COMMITMENT = (COMMITMENT - INVESTMENT);
    
    //fill out NA for null rows
       
    //TODO: check if you can add with nulls, that way this  have to be confusing and long winded...
    //TOTAL_COUPON calc and foramting
    IF (CASH_COUPON IS NULL AND PIK IS NOT NULL) THEN TOTAL_COUPON = TOSTR(0.0 + TODBL(PIK)/100.00); 
        ELSEIF (PIK IS NULL AND CASH_COUPON IS NOT NULL) THEN TOTAL_COUPON = TOSTR(0.0 + TODBL(CASH_COUPON)); 
        ELSEIF (PIK IS NULL AND CASH_COUPON IS NULL) THEN TOTAL_COUPON = 'NA';
        ELSE TOTAL_COUPON = TOSTR((TODBL(CASH_COUPON)) + (TODBL(PIK)/100.00)); 
    END;
    IF TOTAL_COUPON <> 'NA' THEN TOTAL_COUPON = FORMAT(TOTAL_COUPON,%PERCENT_FORMAT); END; 
    
    
    IF CASH_COUPON IS NOT NULL THEN
        CASH_COUPON = FORMAT(TOSTR(TODBL(CASH_COUPON)),%PERCENT_FORMAT);
        ELSE CASH_COUPON = 'NA';
    END;
  
    IF PIK IS NOT NULL THEN 
        PIK = FORMAT(TOSTR(TODBL(PIK)/100.00),%PERCENT_FORMAT);
        ELSE PIK = 'NA';
    END;
     
    IF SPREAD IS NOT NULL THEN 
        SPREAD = FORMAT(SPREAD,%PERCENT_FORMAT);
        ELSE SPREAD = 'NA';
    END;
    
    IF FLOOR IS NOT NULL THEN 
        FLOOR = FORMAT(TOSTR(TODBL(FLOOR)/100.00),%PERCENT_FORMAT);
        ELSE FLOOR = 'NA';
    END;
   
    IF CAP IS NOT NULL THEN 
        CAP = FORMAT(TOSTR(TODBL(CAP)/100.00),%PERCENT_FORMAT);
        ELSE CAP = 'NA';
    END;
    
    IF AMORTIZATION IS NULL THEN AMORTIZATION = 'NA'; END;
    
    IF FIXED_FLOATING IS NULL THEN FIXED_FLOATING = 'NA'; END;
    
    //INVESTMENT_DATE = FORMAT(INVESTMENT_DATE, "mm/dd/yy");
    //EGAN_CMP_RATING_EXPIRATION_DATE = FORMAT(EGAN_CMP_RATING_EXPIRATION_DATE, "mm/dd/yy");
    //MATURITY_DATE = FORMAT(MATURITY_DATE, "mm/dd/yy");
    
    //Requested the RGA_CUSIP = CUSIP. 
    //Need to comment this so we can test irr for RGA CUSIP
    //RGA_CUSIP = CUSIP;   
RUN;


//sort by company field
PROC SORT DATA = WORK.DIRALL_LIST1;
    BY short_code;
RUN;

//RGA CUSIP IRR here...
DATA WORK.RGA_CUSIP_IRR;
    SET WORK.DIRALL_LIST1;    
RUN;

///sum the cashflows (as is the common pattern) by RGA_CUSIP and Reference date
PROC MEANS DATA = WORK.RGA_CUSIP_IRR OUT = WORK.RGA_CUSIP_IRR;
    CLASS RGA_CUSIP REFERENCE_DATE; 
	VAR  CUSIP;    
	SUM IRR_TEMP(NAME=RGA_CUSIP_IRR_CASHFLOWS_SUMMED);
RUN;

//order the cashflows by RGA_CUSIP and REFERENCE DATE so they combine in ascending order or date
PROC SORT DATA = WORK.RGA_CUSIP_IRR;
    BY RGA_CUSIP REFERENCE_DATE;
RUN; 

PROC MEANS DATA = WORK.RGA_CUSIP_IRR OUT = WORK.RGA_CUSIP_IRR;
    CLASS RGA_CUSIP;
    IRR RGA_CUSIP_IRR_CASHFLOWS_SUMMED(NAME = RGA_CUSIP_IRR LABEL = "RGA CUSIP IRR" DATE=REFERENCE_DATE);
RUN;


//RGA CUSIP MOC here...
DATA WORK.RGA_CUSIP_MOC;
    SET WORK.DIRALL_LIST1;    
RUN;
//group up RGA_CUSIPS and CUSIP and include the numbers for totalvalue and investment for each, this is because we have tons of rows for every cashflow of every cusip, now it will just be by cusip/rga usip
PROC MEANS DATA = WORK.RGA_CUSIP_MOC OUT = WORK.RGA_CUSIP_MOC;
    CLASS RGA_CUSIP CUSIP; 
    VAR TOTALVALUE;
    VAR INVESTMENT;
RUN;
//sum the total value and investment amount by RGA cusip
PROC MEANS DATA = WORK.RGA_CUSIP_MOC OUT = WORK.RGA_CUSIP_MOC;
    CLASS RGA_CUSIP;
    SUM TOTALVALUE(NAME=RGA_CUSIP_TOTALVALUE_SUMMED);
    SUM INVESTMENT(NAME=RGA_CUSIP_INVESTMENT_SUMMED);
RUN;


//PROC PRINT DATA = WORK.RGA_CUSIP_MOC; RUN;
//calculate RGA CUSIP MOC
DATA WORK.RGA_CUSIP_MOC;
    SET WORK.RGA_CUSIP_MOC;
    COLUMN RGA_CUSIP_MOC TYPE=DOUBLE LABEL="RGA CUSIP MOC";
    
    //By default a division by 0 will be "Infinity" when printed to the dashboard, make it NULL instead because no one cares about that formating
    IF RGA_CUSIP_TOTALVALUE_SUMMED = 0 AND RGA_CUSIP_INVESTMENT_SUMMED <> 0 
        THEN RGA_CUSIP_MOC = 0; 
    ELSEIF RGA_CUSIP_INVESTMENT_SUMMED = 0
        THEN RGA_CUSIP_MOC = NULL;
    ELSE RGA_CUSIP_MOC = RGA_CUSIP_TOTALVALUE_SUMMED/RGA_CUSIP_INVESTMENT_SUMMED;
    END;
RUN;

//PROC PRINT DATA = WORK.RGA_CUSIP_MOC_TEMP; RUN;
//JOIN IRR and MOC at RGA CUSIP level cubes  the main Directs list
DATA WORK.DIRALL_LIST1;
	MERGE WORK.DIRALL_LIST1(IN=IN1) WORK.RGA_CUSIP_MOC(IN=IN2) WORK.RGA_CUSIP_IRR(IN=IN3);
	BY RGA_CUSIP;
	If (IN1 and IN2 AND IN3) then Output;
	End;
RUN;

//write the cube back to disk to be consumed
DATA USER.DIRALL_LIST1;
    SET WORK.DIRALL_LIST1;  
RUN;


//FUNDS
/*Partnerships QTR NEW*/
DATA WORK.FUNDMAST;
        SQL "SELECT A.IQID  AS FUND_ID,
            A.FUND          as FUNDNAME ,
            VCPRT.PORTFOLIO as PORTFOLIO,
            (case 
                when A.USERTEXT43 = '1' then 'Debt Hedge Fund' 
                when A.USERTEXT43 = '2' then 'Alternatives Preferred Stock' 
                when A.USERTEXT43 = '3' then 'Senior Secured Loan' 
                when A.USERTEXT43 = '4' then 'Subordinated Loan' 
                when A.USERTEXT43 = '5' then 'Distressed Debt' 
                when A.USERTEXT43 = '6' then 'Real Asset Debt' 
                when A.USERTEXT43 = '7' then 'Senior Secured Loan' 
                when A.USERTEXT43 = '8' then 'Subordinated Loan/Mezzanine Funds' 
                when A.USERTEXT43 = '9' then 'Senior Secured Loan' 
                when A.USERTEXT43 = '10' then 'Subordinated Loan' 
                when A.USERTEXT43 = '11' then 'Senior Secured Loan' 
                when A.USERTEXT43 = '12' then 'Subordinated Loan' 
                when A.USERTEXT43 = '13' then 'Equity Hedge Fund' 
                when A.USERTEXT43 = '14' then 'Alternatives Common Stock' 
                when A.USERTEXT43 = '15' then 'Alternatives Preferred Stock' 
                when A.USERTEXT43 = '16' then 'Warrants' 
                when A.USERTEXT43 = '17' then 'Buyout' 
                when A.USERTEXT43 = '18' then 'Growth' 
                when A.USERTEXT43 = '19' then 'Real Asset Equity' 
                when A.USERTEXT43 = '20' then 'Secondary' 
                when A.USERTEXT43 = '21' then 'Venture Capital' 
                when A.USERTEXT43 = '22' then 'Structured Alternatives Common Stock' 
                when A.USERTEXT43 = '23' then 'Structured Alternatives Preferred Stock' 
                when A.USERTEXT43 = '24' then 'Senior Loan' 
                when A.USERTEXT43 = '25' then 'Subordinated Loan' 
             end) + 
            (case 
                when A.USERTEXT44 = '1' then '/Co-Investment' 
                when A.USERTEXT44 = '2' then '/Direct Investment' 
                when A.USERTEXT44 = '3' then '/Co-Investment' 
                when A.USERTEXT44 = '4' then '/Direct Investment' 
                when A.USERTEXT44 = '5' then '/Co-Investment' 
                when A.USERTEXT44 = '6' then '/Direct Investment' 
                when A.USERTEXT44 = '7' then '/Agriculture' 
                when A.USERTEXT44 = '8' then '/Energy' 
                when A.USERTEXT44 = '9' then '/Infrastructure' 
                when A.USERTEXT44 = '10' then '/Real Estate' 
                when A.USERTEXT44 = '11' then '/Timber' 
                when A.USERTEXT44 = '12' then '/Co-Investment' 
                when A.USERTEXT44 = '13' then '/Co-Investment' 
                when A.USERTEXT44 = '14' then '/Co-Investment' 
                when A.USERTEXT44 = '15' then '/Agriculture' 
                when A.USERTEXT44 = '16' then '/Energy' 
                when A.USERTEXT44 = '17' then '/Infrastructure' 
                when A.USERTEXT44 = '18' then '/Real Estate' 
                when A.USERTEXT44 = '19' then '/Timber' 
             else ' '                                                                                                                                                                                
            end)          as Sectors,
            cast(A.VINTAGEYEAR  as varchar(4)) as 'Vintage',                                                                                                                                                                            
            A.USERCURR3   as 'RGA_Orig_Commit', 
            A.USERCURR2   as 'Total_Fund_Size',                                                                                                                                                                            
            A.CURRENCY1   as 'CURRENCY',
            A.CLOSINGDATE as 'CLOSEDATE',
            A.ENDDATE     as 'ENDDATE', 
            VCSUB.EXITDATE,
            case  when FSTAT.DESCR like 'Exited Fund%' 
                then '0'  
              else '1' 
            end           as 'FACTIVESTATUS' ,
            case  when FSTAT.DESCR like 'Exited Fund%' 
                then 'Exited' 
              else 'Active' 
            end           as 'FUNDSTATUS_DashBrd',
            case 
                when A.USERTEXT42 = '4' then 'Private Debt Fund' 
                when A.USERTEXT42 = '9' then 'Private Equity Fund'                                                                                                                                                                             
            end           as  FUND_CLASS3 ,
            VCSUB.LIBELLE as INVESTORNAME,
            A.USERNUM8    as RGA_SHARE, 
            CASE A.USERTEXT47 
               WHEN '1' 
                 THEN 'Yes' 
               WHEN '0' 
                 THEN 'No' 
               ELSE '' 
            END          as LIM_PART_ADV, 
            CASE A.USERTEXT48 
               WHEN '1' 
                 THEN 'Yes' 
               WHEN '0' 
                 THEN 'No' 
               ELSE '' 
            END          as BUYOUT_STRATEGIC,
            cast(DATEPART(YYYY,A.CLOSINGDATE)  as varchar(4)) AS COMMITMENT_YEAR        
            FROM VCFUND A
             JOIN VCSUBSCRIBER VCSUB 
               ON VCSUB.FUND = A.IQID 
                 AND VCSUB.IQDELETED=0 
             JOIN VCPORTFOLIOASSET VCPRTAST 
               ON VCPRTAST.SUBSCRIBER = VCSUB.IQID 
                 AND  VCPRTAST.IQDELETED=0   
             JOIN VCPORTFOLIO VCPRT 
               ON VCPRT.IQID = VCPRTAST.PORTFOLIO  
                 AND  VCPRT.IQDELETED=0 
                 AND VCPRT.PORTFOLIO IN ('PDE - Funds')                                                                                                                                                                         
             JOIN ADMROLE REG 
               ON A.IQREGIONID = REG.IQID 
                 AND REG.NAME IN ('Private Debt & Equity') 
             JOIN VCFUNDSTAT FSTAT 
               ON A.FSTATUS = FSTAT.CODE 
            WHERE A.IQDELETED=0 
              AND ((A.USERTEXT42 = '4' 
                    AND A.USERTEXT43 IN ('5','8','6')) 
                   OR A.USERTEXT42 = '9')
              AND ??FILTER
              ";
        COLUMN FUND_ID; 
      RUN;    

    //BLR - Commented out the prior quarter date for the fund date
    //BLR - Changed the fund date to the current date, this will bring in the current book value data - 20210310
      PROC FAQUERY Query="Private Debt and Equity\qry_Gl_Income_by_Fund" (DATE=CDATE(%DATE));
        TABLE "Default"  
        OUT = work.Fund_Gl_Income;
      RUN;
      // %LET NETPATH = Gettemppath() + "\Fund_Gl_Income.xlsx";
      //     PROC EXPORTEXCEL FILE=CSTR(%NETPATH) DROP;
      //     TABLE= WORK.Fund_Gl_Income SHEETNAME="Fund_Gl_Income";
      // RUN;
      
      DATA WORK.FUNDMAST;
        merge WORK.FUNDMAST(IN = IN1) Work.Fund_Gl_Income;
        by FUND_ID;
        IF (IN1) THEN OUTPUT;
        End;
      RUN;  
      //%LET NETPATH = Gettemppath() + "\FUNDMAST.xlsx";
      //     PROC EXPORTEXCEL FILE=CSTR(%NETPATH) DROP;
      //     TABLE= WORK.FUNDMAST SHEETNAME="FUNDMAST";
      //RUN;
        
    DATA WORK.FUND_CF;
        SQL "SELECT VCF.IQID FUND_ID, VCF.FUND FUND, SUBSCR.LIBELLE INVESTORNAME, OP.CLOSEDATE CLOSEDATE, Cast(DATEPART(YYYY,OP.CLOSEDATE)  as varchar(4)) OP_YEAR, 
               COALESCE(SUBOP.AMOUNT02,0) + COALESCE(SUBOP.AMOUNT04,0) + COALESCE(SUBOP.AMOUNT08,0) + COALESCE(SUBOP.AMOUNT30,0) + 
               COALESCE(SUBOP.AMOUNT50,0) + COALESCE(SUBOP.AMOUNT80,0) + COALESCE(SUBOP.AMOUNT60,0) AS CAPITALINVESTED,
               COALESCE(SUBOP.AMOUNT24,0) + COALESCE(SUBOP.AMOUNT17,0) + COALESCE(SUBOP.AMOUNT13,0) + COALESCE(SUBOP.AMOUNT14,0) +
               COALESCE(SUBOP.AMOUNT15,0) + COALESCE(SUBOP.AMOUNT23,0) + COALESCE(SUBOP.AMOUNT29,0) + COALESCE(SUBOP.AMOUNT28,0)
                 AS RETURNOFCAPITAL
            FROM VCFUND VCF 
                JOIN VCFUNDSTAT FSTAT 
                  ON VCF.FSTATUS = FSTAT.CODE 
                JOIN ADMROLE REG 
                  ON VCF.IQREGIONID = REG.IQID 
                    AND REG.NAME IN ('Private Debt & Equity')
                JOIN VCFUNDOP OP 
                  ON OP.FUND = VCF.IQID 
                    AND OP.IQDELETED=0
                JOIN VCFUNDOPTYPE VCFOPTYPE ON VCFOPTYPE.CODE=OP.OTYPE AND VCFOPTYPE.FILTER<>'00000000000000000000000000000000'
                JOIN VCSUBSCRFUNDOPSHARE SUBOP ON SUBOP.FUNDOP = OP.IQID AND SUBOP.IQDELETED=0 AND SUBOP.FUNDOP IS NOT NULL
                JOIN VCSUBSCRIBER SUBSCR ON SUBSCR.IQID = SUBOP.SUBSCRIBER AND SUBSCR.IQDELETED=0
                JOIN VCPORTFOLIOASSET VCPRTAST ON VCPRTAST.SUBSCRIBER = SUBSCR.IQID AND  VCPRTAST.IQDELETED=0   
                JOIN VCPORTFOLIO VCPRT ON VCPRT.IQID = VCPRTAST.PORTFOLIO  AND  VCPRT.IQDELETED=0 AND VCPRT.PORTFOLIO IN ('PDE - Funds')
        WHERE 
        VCF.IQDELETED=0 
        AND ((VCF.USERTEXT42 = '4' AND VCF.USERTEXT43 IN ('5','8','6')) OR VCF.USERTEXT42 = '9') 
        AND (OP.CLOSEDATE) <= " & DML(%PORT_SNAPSHOT_FUNDS_DATE) & "    
        AND ( COALESCE(SUBOP.AMOUNT02,0) <> 0  OR COALESCE(SUBOP.AMOUNT04,0) <> 0 OR COALESCE(SUBOP.AMOUNT08,0) <> 0
          OR COALESCE(SUBOP.AMOUNT30,0) <> 0 OR COALESCE(SUBOP.AMOUNT50,0) <> 0 OR COALESCE(SUBOP.AMOUNT80,0) <> 0 OR COALESCE(SUBOP.AMOUNT60,0) <> 0 
          OR COALESCE(SUBOP.AMOUNT24,0)  <> 0 OR COALESCE(SUBOP.AMOUNT17,0)  <> 0 OR COALESCE(SUBOP.AMOUNT13,0)  <> 0 OR COALESCE(SUBOP.AMOUNT14,0)  <> 0 OR 
          COALESCE(SUBOP.AMOUNT15,0)  <> 0 OR COALESCE(SUBOP.AMOUNT23,0)  <> 0 OR COALESCE(SUBOP.AMOUNT29,0)  <> 0 OR COALESCE(SUBOP.AMOUNT28,0)<>0 )
     /*   GROUP BY VCF.IQID, VCF.FUND, SUBSCR.LIBELLE */
        ORDER BY 1
         " ; 
        COLUMN FUND_ID;
    RUN;
        
    //PROC PRINT DATA=WORK.FUND_CF; RUN;
    
    PROC MEANS DATA =WORK.FUND_CF OUT=WORK.FUND_CF2;
        CLASS FUND_ID INVESTORNAME; 
        SUM CAPITALINVESTED(NAME=CAPITALINVESTED);
        SUM RETURNOFCAPITAL(NAME=RETURNOFCAPITAL);
    RUN; 
    
    %LET DATE = %ORIG_DATE;
    //PROC PRINT; PUT %DATE; RUN;

    
    //For Capital Invested Graph 
    DATA WORK.FUND_LIST;
        //MERGE WORK.FUNDMAST(IN=IN1) WORK.FUND_CF2(IN=IN2);
        MERGE WORK.FUNDMAST(IN=IN1) WORK.FUND_CF2;
        By FUND_ID INVESTORNAME  ;
        //If (IN1 and IN2) then Output;
        IF (IN1) THEN OUTPUT;
        END;
    RUN;  
    //PROC PRINT DATA=WORK.FUND_LIST;title 'FUND_LIST merge WORK.FUNDMAST(IN=IN1) WORK.FUND_CF2';  RUN;   
    // output fields -- FUND_ID, FUND, INVESTORNAME, GL_COST_ELIM, GAAP_BOOK_VALUE, LASTVALUATION, REMAININGCOMMITMENT, GAAP_INCOME_ITD, Q_CUSIP                                                                                                                                                                                        
    //PROC PRINT; PUT DML(%Prior_Qtr); RUN;
    
    //BLR - Commented out the prior quarter date for the fund date
    PROC FAQUERY Query="EFR_ALADDIN\Positions-PortRev" (DATE = CDATE(%PORT_SNAPSHOT_FUNDS_DATE)) ;    
        TABLE "Default"  OUT=WORK.QRY_POSITIONS_PORTREV;
    RUN;
    //PROC PRINT DATA=WORK.QRY_POSITIONS_PORTREV;title 'Prior_Date_QRY_POSITIONS_PORTREV output'; RUN;
    
    //------------------------------------------------ Get Reporting Date LASTVALUATION
    //BLR - Commented out the %Date for the fund date from the Portfolio Snapshot page in dashboard
    //BOOK VALUE?
    PROC FAQUERY Query="EFR_ALADDIN\Positions-PortRev" (DATE=%PORT_SNAPSHOT_FUNDS_DATE); //(DATE=%Date) ; 
        TABLE "Default"  OUT=WORK.Cur_Date_QRY_POSITIONS_PORTREV;
    RUN;
    //PROC PRINT DATA=WORK.Cur_Date_QRY_POSITIONS_PORTREV;title 'Current_Date_QRY_POSITIONS_PORTREV output'; RUN;

//---------------------
// Prior Rpeorting Date Last Valuation 
   Data WORK.Current_Date_QRY_POSITIONS_PORTREV (Keep = FUND_ID FUND INVESTORNAME LASTVALUATION Q_CUSIP Report_CURRENTCOST );
    Set WORK.QRY_POSITIONS_PORTREV; // changed because previously needed to pull in current valuation for prior period, but no longer need to
      COLUMN Report_CURRENTCOST  TYPE=DOUBLE; Report_CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
    Run;
    
   //002 begin
   DATA WORK.Curr_BV (Keep = FUND_ID FUND INVESTORNAME Q_CUSIP Report_CURRENTCOST);
   SET WORK.Cur_Date_QRY_POSITIONS_PORTREV; 
      COLUMN Report_CURRENTCOST  TYPE=DOUBLE; 
      Report_CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
    Run;
   //002 end 
   
   // PROC PRINT DATA=WORK.Current_Date_QRY_POSITIONS_PORTREV;title 'Current_Date_QRY_POSITIONS_PORTREV limited Fields'; RUN;
// Current Rpeorting Date Last Valuation 
//       Data WORK.Current_Date_QRY_POSITIONS_PORTREV (Keep = FUND_ID FUND INVESTORNAME LASTVALUATION Q_CUSIP Report_CURRENTCOST );
//        Set WORK.Current_Date_QRY_POSITIONS_PORTREV;
//          COLUMN Report_CURRENTCOST  TYPE=DOUBLE; Report_CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
//        Run;
   // PROC PRINT DATA=WORK.Current_Date_QRY_POSITIONS_PORTREV;title 'Current_Date_QRY_POSITIONS_PORTREV limited Fields'; RUN;
//---------------------

//        Data WORK.Current_Date_QRY_POSITIONS_PORTREV (Keep = FUND_ID FUND INVESTORNAME LASTVALUATION Q_CUSIP );
//        Set WORK.Current_Date_QRY_POSITIONS_PORTREV;
//        Run;
    //PROC PRINT DATA=WORK.Current_Date_QRY_POSITIONS_PORTREV;title 'Current_Date_QRY_POSITIONS_PORTREV limited Fields'; RUN;
    //------------------------------------------------
    
    DATA WORK.FUND_LIST;
        MERGE WORK.FUND_LIST(IN=IN1) WORK.QRY_POSITIONS_PORTREV;
        By FUND_ID INVESTORNAME  ;
        If (IN1) then Output;
        End;
    RUN;         
    //PROC PRINT DATA =  WORK.FUND_LIST; RUN; 
    Data WORK.FUND_LIST;
      set WORK.FUND_LIST(where CDATE(closedate) <= CDATE(%PORT_SNAPSHOT_FUNDS_DATE));      // 002 added CDATE before both dates
    RUN;  
///////////////////////////////////////////       
    DATA WORK.FUND_LIST(DROP=FUND GAAP_BOOK_VALUE GL_COST_ELIM);
        SET WORK.FUND_LIST;
        COLUMN REPORT_CURRENTCOST TYPE=DOUBLE;  REPORT_CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;    
      /////  COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
    RUN;
    //PROC PRINT DATA =  WORK.FUND_LIST;title 'FUND_LIST '; RUN;     
    //0809                                                                                                                                                                                        
    
    PROC MEANS DATA = FCE.FUNDOPERATIONS(WHERE CDATE(OPERATIONDATE) <= CDATE(%PORT_SNAPSHOT_FUNDS_DATE)) OUT=WORK.TIRR; 
    //PROC MEANS DATA = FCE.FUNDOPERATIONS(WHERE OPERATIONDATE<=%Date) 
        
        CLASS FUND_ID OPERATIONDATE; 
        VAR  FUNDNAME; 
        SUM CASH(NAME=IRRNET);
    RUN; 
    //PROC PRINT DATA = work.TIRR; title 'TIRR output1'; RUN;    
    
    PROC MEANS DATA = WORK.FUND_LIST OUT=WORK.TVALUATION;
        CLASS FUND_ID; 
        VAR  FUNDNAME; 
        SUM LASTVALUATION(NAME=IRRNET);
    RUN; 
    //PROC PRINT DATA = work.TVALUATION; title 'TIRR output2'; RUN;    
    
    DATA WORK.TIRR;
        SET  WORK.TIRR(IN=T1) WORK.TVALUATION; 
        IF IRRNET IS NULL THEN IRRNET=0; END;     
        COLUMN SORT_IRR TYPE=INTEGER;     
        IF T1 THEN 
        SORT_IRR=0;  
        ELSE 
        SORT_IRR=1; 
        //BLR - Commented out the prior quarter date for the fund date
        OPERATIONDATE=CDATE(%PORT_SNAPSHOT_FUNDS_DATE);  //002 changed from %DATE to prior quarter
        END;                                                                                                                                                                                            
        _OUTPUT_=IRRNET <>0 OR SORT_IRR=1;
    RUN; 
    //PROC PRINT DATA =  work.TVALUATION;title 'TVALUATION output'; RUN;    
    
    PROC SORT DATA = WORK.TIRR; 
        BY FUND_ID FUNDNAME SORT_IRR OPERATIONDATE; 
    RUN; 
    
    DATA WORK.FUND_LIST1 (Drop = LASTVALUATION);
        MERGE WORK.FUND_LIST(IN=IN1) WORK.TIRR(IN=IN2);
        By FUND_ID;
        If (IN1 and IN2) then Output;
        End;
    RUN;
    //PROC PRINT DATA =  work.FUND_LIST1;title 'FUND_LIST1 Merge with WORK.TIRR'; RUN;    
    
    //--------------------------------- Merge Reporting Date LASTVALUATION
    //PROC PRINT DATA =  work.Current_Date_QRY_POSITIONS_PORTREV;title 'Current_Date_QRY_POSITIONS_PORTREV Cube'; RUN;    
    DATA WORK.FUND_LIST1;
        MERGE WORK.FUND_LIST1(IN=IN1) WORK.Current_Date_QRY_POSITIONS_PORTREV(IN=IN2); //WORK.QRY_POSITIONS_PORTREV(IN=IN2);
        By FUND_ID INVESTORNAME Q_CUSIP;
        If (IN1 and IN2) then Output;
        End;
    RUN;
    //PROC PRINT DATA =  work.FUND_LIST1;title 'FUND_LIST1 after Merge with reporting date LastValuation'; RUN;    
    
    //------------------------------------
    DATA WORK.IRR_SORT (keep = FUND_ID INVESTORNAME Q_CUSIP SORT_IRR LastValuation);
        SET WORK.FUND_LIST1; 
        IF SORT_IRR = 1 
           then OUTPUT; 
        END;     
    RUN; 
    //PROC PRINT DATA =  work.IRR_SORT;title 'IRR_SORT = 1 LastValuation'; RUN;    
    DATA WORK.FUND_LIST2;
        MERGE WORK.FUND_LIST1(IN=IN1) WORK.IRR_SORT(IN=IN2);
        By FUND_ID INVESTORNAME Q_CUSIP SORT_IRR;
        if SORT_IRR = 1 
          then IRRNET = LastValuation;
        end;  
        If (IN1 and IN2) then Output;
        End;
    RUN;
    
    DATA WORK.FUND_LIST3;
        set WORK.FUND_LIST1(IN=IN1);
        if SORT_IRR = 0 
          then Output;
        end;  
    RUN;
    //PROC PRINT DATA =  work.FUND_LIST3;title 'FUND_LIST3  reporting date urrent cost'; RUN;    
    
    DATA WORK.FUND_LIST1;    
        set WORK.FUND_LIST2 WORK.FUND_LIST3;
    Run;
    //------------------------------------
    
    // addcode here to update LASTVALUATION with reporting date values 
    DATA WORK.FUND_LIST1_QTR(DROP = ENDDATE REPORT_CURRENTCOST);     //002 changed to work table
        SET WORK.FUND_LIST1;  
        COLUMN TOTALVALUE TYPE=FLOAT; 
        if LASTVALUATION is null
          then LASTVALUATION = 0;
        end;   
    //  COLUMN Report_CURRENTCOST  TYPE=DOUBLE; Report_CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
    //    COLUMN CURRENTCOST TYPE=DOUBLE; CURRENTCOST = REPORT_CURRENTCOST; //set CURRENTCOST to Reporting date REPORT_CURRENTCOST    //003 commented out
        TOTALVALUE = RETURNOFCAPITAL + LASTVALUATION;                                                                                                                                                                                     
    RUN;  
    //PROC PRINT DATA =  FUND_LIST1_QTR;title 'FUND_LIST1_QTR_Output'; RUN;    
   //%LET NETPATH = Gettemppath() + "\FUND_LIST1.xlsx";
   //    PROC EXPORTEXCEL FILE=CSTR(%NETPATH) DROP;
   //    TABLE= WORK.FUND_LIST1 SHEETNAME="FUND_LIST1";
   //RUN;
    
    //002 begin
    DATA WORK.FUND_LIST1_QTR;
        MERGE WORK.FUND_LIST1_QTR (IN = OK_L) 
              WORK.Curr_BV (IN = OK_R);
        BY FUND_ID Q_CUSIP;
        if (OK_L) then Output;
        end;
    RUN;
    
    DATA USER.FUND_LIST1_QTR;
        SET WORK.FUND_LIST1_QTR;
        COLUMN CurrentCost TYPE = DOUBLE;
        CurrentCost = Report_CurrentCost;
    RUN;
    //002 end
    
    DATA USER.FUND_LIST1; 
      SET USER.FUND_LIST1_QTR;  
    RUN;

//PROC PRINT DATA = USER.FUND_LIST1; RUN; 
//Portfolio Snapshot 20210223


// Code is using Tab 7 Data
DATA WORK.FUND_PORTSnap(DROP = CLOSEDATE ENDDATE); 
  SET USER.FUND_LIST1;  
 // COLUMN TOTALVALUE TYPE=FLOAT; 
 // TOTALVALUE= RETURNOFCAPITAL + LASTVALUATION; 
  COLUMN SEQ TYPE=INTEGER; 
  SEQ=0;		
RUN;     

//SAMEDATA
//PROC PRINT DATA = WORK.FUND_PORTSnap; title "WORK.FUND_PORTSnap"; RUN; 

// following section of code calcs "Private Debt Fund" and "Private Equity Fund" IRRNET																							  
PROC MEANS DATA=WORK.FUND_PORTSnap  
  OUT=WORK.FUND_PORTSnap_IRR;
  CLASS FUND_CLASS3;
  //CURRENCY;
  IRR IRRNET(NAME=IRRNET DATE=OPERATIONDATE);    
RUN; 

                                                                                                                                                                                                   
//PROC PRINT DATA = WORK.FUND_LIST1;title "FUND_LIST1 "; RUN;                                                                                                                                                                                                    
 
DATA WORK.FUND_PORTSnap_FundTot;
  SET WORK.FUND_PORTSnap;
  FUND_CLASS3='Total-Funds';
  SEQ=1;
RUN;
//SAMEDATA
//PROC PRINT DATA = WORK.FUND_PORTSnap_FundTot;title "FUND_PORTSnap_FundTot IRRNET"; RUN;                                                                                                                                                                                                    

PROC MEANS DATA=WORK.FUND_PORTSnap_FundTot  
  OUT=WORK.FUND_PORTSnap_IRR_Tot;
  //CLASS CURRENCY;
  VAR FUND_CLASS3;
  VAR SEQ;
  IRR IRRNET(NAME=IRRNET DATE=OPERATIONDATE);    
RUN;        
//SAMEDATA
//PROC PRINT DATA = WORK.FUND_PORTSnap_IRR_Tot; RUN;                                                                                                                                                                                                      
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.FUND_PORTSnap  OUT=WORK.FUND_PORTSnap;                                        
  CLASS FUND_ID;
  VAR SEQ;  
  VAR FACTIVESTATUS;  
  VAR FUND_CLASS3;
  //VAR CURRENCY;
  MIN CURRENTCOST (NAME = BOOKVALUE);  
  MIN CAPITALINVESTED (NAME = CAPITALINVESTED);
  MIN RETURNOFCAPITAL (NAME = REALIZED);                                                                                                                                                                                                        
  MIN LASTVALUATION (NAME = MARKETVALUE);
  MIN TOTALVALUE (NAME = TOTALVALUE);                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                           

//SAMEDATA
//PROC PRINT DATA = WORK.FUND_PORTSnap;title "FUND_PORTSnap counts"; RUN;                                                                                                                                                                                                    

PROC MEANS DATA=WORK.FUND_PORTSnap  OUT=WORK.FUND_PORTSnap;  
  CLASS FUND_CLASS3; 
  //CURRENCY;
  VAR SEQ;
  N  FUND_ID (NAME = ITD_FUNDS);   
  SUM FACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                          
  SUM BOOKVALUE (NAME = BOOKVALUE);  
  SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
  SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
  SUM MARKETVALUE (NAME = MARKETVALUE);
  SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;

DATA WORK.FUND_PORTSnap_FundTot1;
 SET WORK.FUND_PORTSnap;
 FUND_CLASS3='Total-Funds';
 SEQ=1;
RUN;

//SAMEDATA
//PROC PRINT DATA =WORK.FUND_PORTSnap_FundTot1;title "FUND_PORTSnap_FundTot1 counts"; RUN;  

PROC MEANS DATA=WORK.FUND_PORTSnap_FundTot1 OUT=WORK.FUND_PORTSnap_FundTot1; 
  //CLASS CURRENCY;
  VAR FUND_CLASS3; 
  VAR SEQ;
  SUM ITD_FUNDS (NAME = ITD_FUNDS);   
  SUM ACTIVESTATUS (NAME = ACTIVESTATUS);                                                                                                                                                                                                          
  SUM BOOKVALUE (NAME = BOOKVALUE);  
  SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
  SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
  SUM MARKETVALUE (NAME = MARKETVALUE);
  SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN; 

 //PROC PRINT DATA =WORK.FUND_PORTSnap_FundTot1; RUN;

DATA WORK.FUND_PORTSnap_FundTot1;                                                                                                                                                                                                     
  SET WORK.FUND_PORTSnap_FundTot1;  
  COLUMN MOC TYPE=FLOAT; 
  MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN;

//SAMEDATA
//PROC PRINT DATA = WORK.FUND_PORTSnap_FundTot1; RUN;

DATA WORK.FUND_PORTSnap;             // Calculate MOC                                                                                                                                                                                                 
  SET WORK.FUND_PORTSnap;  
  COLUMN MOC TYPE=FLOAT; 
  MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN;    

//SAMEDATA
//PROC PRINT DATA = WORK.FUND_PORTSnap; RUN;
  
  
DATA WORK.FUND_PORTSnap;
  MERGE WORK.FUND_PORTSnap(IN=IN1) 
        WORK.FUND_PORTSnap_IRR(IN=IN2);
  BY FUND_CLASS3;
  //CURRENCY;
  If (IN1 and IN2) then Output;
  End;
RUN;

//SAMEDATA
//PROC PRINT DATA = WORK.FUND_PORTSnap; RUN;

DATA WORK.FUND_PORTSnap_FundTot1;
    MERGE WORK.FUND_PORTSnap_FundTot1(IN=IN1) 
        WORK.FUND_PORTSnap_IRR_Tot(IN=IN2);
    BY FUND_CLASS3;
    //CURRENCY;
    If (IN1 and IN2) then Output;
    End;
RUN; 

//SAMEDATA
//PROC PRINT DATA =WORK.FUND_PORTSnap_FundTot1;title "FUND_PORTSnap_FundTot1"; RUN;  
                                                                                                                                                                                                    
//Directs//////////////////////////////////////////////////////////////////

DATA WORK.MEZZ_PORTSnap; 
    SET  USER.DIRALL_LIST1 (WHERE INVST_TYPE = 'LOAN');   // was WORK.DIRLOAN_LIST1 
    //  COLUMN TOTALVALUE TYPE=FLOAT; 
    //  TOTALVALUE = EXIT + LASTVALUATION;  
    COLUMN FUND_CLASS3 TYPE = STRING; 
    FUND_CLASS3 = 'Direct Mezzanine';
    COLUMN SEQ TYPE=INTEGER; 
    SEQ=0;
    //BLR remove any book value for loans per request 20210310
    //BOOKVALUE = NULL;
RUN; 
//PROC PRINT DATA = WORK.MEZZ_PORTSnap;title "MEZZ_PORTSnap checking for Total Value"; RUN;  

DATA WORK.MEZZ_PORTSnap; 
    SET WORK.MEZZ_PORTSnap; 
    
    COLUMN FCLTYACTIVESTATUS TYPE = INTEGER;
    if FACILITY_STATUS = 'Active'
     then FCLTYACTIVESTATUS = 1;
    else 
       FCLTYACTIVESTATUS = 0;
    end;     
RUN; 
//PROC PRINT DATA = WORK.MEZZ_PORTSnap;title "MEZZ_PORTSnap checking for CMPACTIVESTATUS after my change"; RUN;  

DATA WORK.EQUITY_PORTSnap; 
    SET  USER.DIRALL_LIST1 (WHERE INVST_TYPE = 'EQUITY');  
    // COLUMN TOTALVALUE TYPE=FLOAT; 
    // TOTALVALUE = EXIT + LASTVALUATION;  
    COLUMN FUND_CLASS3 TYPE = STRING; 
    FUND_CLASS3 = 'Direct Equity';
    COLUMN SEQ TYPE = INTEGER; 
    SEQ=0;
    
    COLUMN FCLTYACTIVESTATUS TYPE = INTEGER;
    IF FACILITY_STATUS = 'Active'
     THEN FCLTYACTIVESTATUS = 1;
    ELSE 
       FCLTYACTIVESTATUS = 0;
    END; 
RUN;                                                                                                                                                                                                      
//PROC PRINT DATA = WORK.EQUITY_PORTSnap;title "EQUITY_PORTSnap checking for EQ02"; RUN;  

DATA WORK.DIRECTS_PORTSnap; 
  SET WORK.MEZZ_PORTSnap WORK.EQUITY_PORTSnap;  
RUN;                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap;title "DIRECTS_PORTSnap checking for EQ02"; RUN;  
     
PROC MEANS DATA=WORK.DIRECTS_PORTSnap  
  OUT=WORK.DIRECTS_PORTSnap_IRR;
  CLASS FUND_CLASS3;
  //CURRENCY; 
  VAR SEQ; 
  IRR IRRNET(NAME=IRRNET DATE=REFERENCE_DATE);    
RUN;  
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_IRR;title "DIRECTS_PORTSnap_IRR checking for EQ02"; RUN;  


DATA WORK.DIRECTS_PORTSnap_DirTot;
  SET WORK.DIRECTS_PORTSnap;
  FUND_CLASS3='Total-Directs';
  SEQ=1; 
RUN;

PROC MEANS DATA=WORK.DIRECTS_PORTSnap_DirTot  
  OUT=WORK.DIRECTS_PORTSnap_IRR_Tot;
  VAR FUND_CLASS3; 
  VAR SEQ;
  IRR IRRNET(NAME=IRRNET DATE=REFERENCE_DATE);    
RUN;  


PROC MEANS DATA=WORK.DIRECTS_PORTSnap  
  OUT=WORK.DIRECTS_PORTSnap_CNT;
  CLASS CUSIP FUND_CLASS3;
  VAR SEQ;   
  MIN FCLTYACTIVESTATUS(NAME = FCLTYACTIVESTATUS);                                                                                                                                                                                                     
RUN;                                                                                                                                                                                                          
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap;title "DIRECTS_PORTSnap checking for EQ02"; RUN;  
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_CNT;Title "DIRECTS_PORTSnap_CNT before ======"; RUN;  

       
PROC MEANS DATA=WORK.DIRECTS_PORTSnap_CNT  OUT=WORK.DIRECTS_PORTSnap_CNT;
    CLASS FUND_CLASS3; 
    VAR SEQ;
    N  CUSIP(NAME = ITD_FUNDS);   
    SUM FCLTYACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                     
RUN;   
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_CNT;title "DIRECTS_PORTSnap_CNT After -------"; RUN;          

//PROC PRINT DATA = WORK.DIRECTS_PORTSnap;Title "DIRECTS_PORTSnap ======"; RUN;  

DATA WORK.DIRECTS_PORTSnap_DirTot1;
    SET WORK.DIRECTS_PORTSnap_CNT;
    FUND_CLASS3='Total-Directs';
    SEQ =1;
RUN;
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_DirTot1;title "DIRECTS_PORTSnap_DirTot1 -------"; RUN;                                                                                                                                                                                                     

PROC MEANS DATA=WORK.DIRECTS_PORTSnap_DirTot1  OUT=WORK.DIRECTS_PORTSnap_CNT_Tot;
    VAR FUND_CLASS3; 
    VAR SEQ;
    SUM ITD_FUNDS(NAME = ITD_FUNDS);   
    SUM ACTIVESTATUS(NAME = ACTIVESTATUS);     
RUN; 
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_CNT;title "DIRECTS_PORTSnap_CNT ACTIVESTATUS"; RUN;                                                                                                                                                                                                     

DATA WORK.DIRECTS_PORTSnap;
    set WORK.DIRECTS_PORTSnap;
    if V_EXIT is null 
        then V_EXIT = EXIT;                                                                                                                                                                                                      
    end; 
RUN;

//PROC PRINT DATA = WORK.DIRECTS_PORTSnap;title "DIRECTS_PORTSnap check for EQ02"; RUN;                                                                                                                                                                                                     

       
//PROC EXPORTEXCEL FILE=GETTEMPPATH()+"\dash_port_snapshot.xlsx" LABEL;
//   TABLE = WORK.DIRECTS_PORTSnap  
//   SHEETNAME="dash";
//RUN;

PROC MEANS DATA= WORK.DIRECTS_PORTSnap  
  OUT = WORK.DIRECTS_PORTSnap;                                        
  CLASS CUSIP; 
  VAR FUND_CLASS3; 
  VAR SEQ __OPT_Code;
  //BLR changed from CURRENTCOST to GAAP_BOOK_VALUE as this column would already be null from directs data (WORK.DIRALL_LIST1)
  MIN GAAP_BOOK_VALUE (NAME = BOOKVALUE);  
  MIN INVESTMENT (NAME = CAPITALINVESTED);
  MIN V_EXIT (NAME = REALIZED);                                                                                                                                                                                                      
  MIN UNREALIZED (NAME = MARKETVALUE);
  MIN TOTALVALUE (NAME = TOTALVALUE);                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                            
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap;title "DIRECTS_PORTSnap min check for EQ02"; RUN;  


PROC MEANS DATA= WORK.DIRECTS_PORTSnap  OUT= WORK.DIRECTS_PORTSnap;                                        
    //0816 VAR FUNDS;   
    CLASS FUND_CLASS3;
    //CURRENCY;
    VAR SEQ;
    SUM BOOKVALUE (NAME = BOOKVALUE);  
    SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
    SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
    SUM MARKETVALUE (NAME = MARKETVALUE);
    SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap;title "DIRECTS_PORTSnap sum check for EQ02"; RUN;   // works here *****                                                                                                                                                                                                 

DATA WORK.DIRECTS_PORTSnap_DirTot2;
    SET WORK.DIRECTS_PORTSnap;
    FUND_CLASS3='Total-Directs';
    SEQ = 1;
RUN;

PROC MEANS DATA=WORK.DIRECTS_PORTSnap_DirTot2  
  OUT=WORK.DIRECTS_PORTSnap_Tot;
  VAR FUND_CLASS3; 
  VAR SEQ;
  SUM BOOKVALUE (NAME = BOOKVALUE);  
  SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
  SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
  SUM MARKETVALUE (NAME = MARKETVALUE);
  SUM TOTALVALUE (NAME = TOTALVALUE);    
RUN;
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_DirTot2;title "DIRECTS_PORTSnap_DirTot2 check for EQ02"; RUN;                                                                                                                                                                                                     

DATA WORK.DIRECTS_PORTSnap; 
    SET WORK.DIRECTS_PORTSnap;  
    COLUMN MOC TYPE=FLOAT; 
       MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
    RUN; 
    
    DATA WORK.DIRECTS_PORTSnap_Tot; 
    SET WORK.DIRECTS_PORTSnap_Tot;  
    COLUMN MOC TYPE=FLOAT; 
      MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN;
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRLOAN_PortSNP; RUN; 
                                                                                                                                                                                                    
DATA WORK.DIRECTS_PORTSnap;
    MERGE WORK.DIRECTS_PORTSnap(IN=IN1) 
      WORK.DIRECTS_PORTSnap_IRR(IN=IN2);
    BY FUND_CLASS3;
    //CURRENCY;
    If (IN1 and IN2) then Output;
    End;
RUN; 
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap;title "DIRECTS_PORTSnap + IRR check for EQ02"; RUN;                                                                                                                                                                                                     
                                                                                                                                                                                            
DATA WORK.DIRECTS_PORTSnap;
    MERGE WORK.DIRECTS_PORTSnap(IN=IN1) WORK.DIRECTS_PORTSnap_CNT(IN=IN2);
    BY FUND_CLASS3;
    //CURRENCY;
    If (IN1 and IN2) then Output;
    End;
RUN;   
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap;title "DIRECTS_PORTSnap + Cnt check for EQ02"; RUN;                                                                                                                                                                                                     

DATA WORK.DIRECTS_PORTSnap_Tot;
    MERGE WORK.DIRECTS_PORTSnap_Tot(IN=IN1) WORK.DIRECTS_PORTSnap_IRR_Tot(IN=IN2);
    BY FUND_CLASS3;
    //CURRENCY;
    If (IN1 and IN2) then Output;
    End;
RUN; 

DATA WORK.DIRECTS_PORTSnap_Tot;
    MERGE WORK.DIRECTS_PORTSnap_Tot(IN=IN1) WORK.DIRECTS_PORTSnap_CNT_Tot(IN=IN2);
    BY FUND_CLASS3;
    //CURRENCY;
    If (IN1 and IN2) then Output;
    End;
RUN;   
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap;title "DIRECTS_PORTSnap Final check for EQ02"; RUN;                                                                                                                                                                                                     
       
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap; RUN;   
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_Tot; RUN;   

///---------Total
DATA WORK.TOTAL_PORTSnap; 
    SET WORK.FUND_PORTSnap WORK.DIRECTS_PORTSnap;  
RUN; 

//PROC PRINT DATA = WORK.TOTAL_PORTSnap;TITLE "TOTAL_PORTSnap *******"; RUN;
DATA WORK.TOTAL_PORTSnap_sve; 
    SET WORK.TOTAL_PORTSnap;  
RUN; 
//PROC PRINT DATA = WORK.TOTAL_PORTSnap_sve;title "TOTAL_PORTSnap_sve  check for EQ02"; RUN;                                                                                                                                                                                                     

PROC MEANS DATA= WORK.TOTAL_PORTSnap  
  OUT= WORK.TOTAL_PORTSnap; 
  SUM ITD_FUNDS (NAME = ITD_FUNDS);   
  SUM ACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                        
  SUM BOOKVALUE (NAME = BOOKVALUE);  
  SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
  SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
  SUM MARKETVALUE (NAME = MARKETVALUE);
  SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;   
//PROC PRINT DATA = WORK.TOTAL_PORTSnap;title "TOTAL_PORTSnap  check for EQ02"; RUN;                                                                                                                                                                                                     

DATA  WORK.TOTAL_PORTSnap; 
    SET  WORK.TOTAL_PORTSnap;  
    COLUMN MOC TYPE=FLOAT; 
      MOC = TOTALVALUE/CAPITALINVESTED;
    COLUMN FUND_CLASS3 TYPE=STRING; 
      FUND_CLASS3 = 'Grand Total'; 
    COLUMN SEQ TYPE=INTEGER; SEQ=1;
RUN; 
//PROC PRINT DATA = WORK.TOTAL_PORTSnap; RUN;   

DATA  WORK.TOT_FUND_PORTSnap(KEEP = IRRNET OPERATIONDATE CURRENCY) ; 
    SET  WORK.FUND_LIST1;   
RUN;

DATA  WORK.TOT_LN_PORTSnap(KEEP = IRRNET REFERENCE_DATE CURRENCY) ; 
    SET  WORK.DIRLOAN_LIST1;  
RUN;
//PROC PRINT DATA = WORK.DIRLOAN_LIST1;title "DIRLOAN_LIST1  check for EQ02"; RUN;                                                                                                                                                                                                     
                                                                                                                                                                                                    
DATA WORK.TOT_EQ_PORTSnap(KEEP = IRRNET REFERENCE_DATE CURRENCY) ; 
    SET WORK.DIREQUITY_LIST1;  
RUN;                                                                                                                                                                                                      

DATA WORK.TOT_DIR_PORTSnap; 
    SET WORK.TOT_LN_PORTSnap WORK.TOT_EQ_PORTSnap;  
RUN;                                                                                                                                                                                                    

DATA  WORK.TOT_DIR_PORTSnap(RENAME = (REFERENCE_DATE=OPERATIONDATE));
    SET  WORK.TOT_DIR_PORTSnap;                                                                                                                                                                                                          
RUN;

DATA WORK.TOT_PORTSnap; 
    SET WORK.TOT_FUND_PORTSnap WORK.TOT_DIR_PORTSnap;  
RUN; 

DATA WORK.TOT_PORTSnap;
  SET  WORK.TOT_PORTSnap; 
  COLUMN FUND_CLASS3 TYPE=STRING; 
    FUND_CLASS3 = 'Grand Total';
  COLUMN SEQ TYPE=INTEGER; SEQ=1;
RUN;
//BLR Here...
//PROC PRINT DATA = WORK.TOT_PORTSnap; RUN;
        
PROC MEANS DATA=WORK.TOT_PORTSnap  
  OUT=WORK.TOT_PORTSnap_IRR;
  VAR FUND_CLASS3;
  VAR SEQ;
  IRR IRRNET(NAME=IRRNET DATE=OPERATIONDATE);    
RUN;                                                                                                                                                                                                     
//PROC PRINT DATA = WORK.TOT_PORTSnap;title "TOT_PORTSnap  check for EQ02"; RUN;                                                                                                                                                                                                     

DATA WORK.TOT_PORTSnap;
MERGE WORK.TOTAL_PORTSnap(IN=IN1) 
      WORK.TOT_PORTSnap_IRR(IN=IN2);
  BY FUND_CLASS3;
  IF (IN1 AND IN2) THEN OUTPUT;
  End;
RUN; 
//PROC PRINT DATA = WORK.TOT_PORTSnap; RUN; 

DATA WORK.FUND_PORTSnap;
  SET WORK.FUND_PORTSnap 
      WORK.FUND_PORTSnap_FundTot1;
RUN;

DATA WORK.DIRECTS_PORTSnap;
  SET  WORK.DIRECTS_PORTSnap WORK.DIRECTS_PORTSnap_Tot;
RUN;

//------------ Rename Fund Names
// Rename Private Debt Fund to Private Debt Funds
DATA WORK.FUND_PORTSnap_Private_Debt_Fund;
    SET  WORK.FUND_PORTSnap(Where FUND_CLASS3 = 'Private Debt Fund');
    FUND_CLASS3 = 'Private Debt Funds';
RUN;

// Rename Private Debt Fund to Private Debt Funds
DATA WORK.FUND_PORTSnap_Total_Funds;
    SET WORK.FUND_PORTSnap(Where FUND_CLASS3 = 'Total-Funds');
    FUND_CLASS3 = 'Funds';
RUN;

// Rename Private Equity Fund to Private Equity Funds
DATA WORK.FUND_PORTSnap_Private_Equity_Fund;
    SET  WORK.FUND_PORTSnap(Where FUND_CLASS3 = 'Private Equity Fund');
    FUND_CLASS3 = 'Private Equity Funds';
RUN;
//------------ End Rename Fund Names

//------------ Rename Direct Names
// Rename Direct Mezzanine to Direct Private Debt
DATA WORK.DIRECTS_PORTSnap_Direct_Private_Debt;
    SET  WORK.DIRECTS_PORTSnap(Where FUND_CLASS3 = 'Direct Mezzanine');
    FUND_CLASS3 = 'Direct Debt';
RUN;

// Rename Private Debt Fund to Private Debt Funds
DATA WORK.DIRECTS_PORTSnapTotal_Directs;
    SET  WORK.DIRECTS_PORTSnap(Where FUND_CLASS3 = 'Total-Directs');
    FUND_CLASS3 = 'Total - Directs';
RUN;

// Rename Direct Equity to Direct Private Equity
DATA WORK.DIRECTS_PORTSnap_Direct_Private_Equity;
    SET  WORK.DIRECTS_PORTSnap(Where FUND_CLASS3 = 'Direct Equity');
    FUND_CLASS3 = 'Direct Equity';
RUN;
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_Direct_Private_Equity;title "DIRECTS_PORTSnap_Direct_Private_Equity  check for EQ02"; RUN;                                                                                                                                                                                                     
//------------ End Rename Direct Names

// Combine Fund and Direct rows
//20210224 Removed the debt and equity fund rows en leui of the total fund row per request on 20210223 -BLR
DATA WORK.FUND_PORTSnap;
SET  
       //WORK.FUND_PORTSnap_Private_Debt_Fund 
       //WORK.FUND_PORTSnap_Private_Equity_Fund
       WORK.DIRECTS_PORTSnap_Direct_Private_Debt
       WORK.DIRECTS_PORTSnap_Direct_Private_Equity
       WORK.DIRECTS_PORTSnapTotal_Directs
       WORK.FUND_PORTSnap_Total_Funds; 
RUN;

//PROC PRINT DATA = WORK.FUND_PORTSnap; RUN;

// Add Grand Total row 
DATA USER.Portfolio_Snapshot; 
    SET WORK.FUND_PORTSnap 
    //WORK.DIRECTS_PORTSnap 
    WORK.TOT_PORTSnap;      // Grand Totals Cube
   
RUN;  

/*
PROC EXPORTEXCEL FILE=GETTEMPPATH()+"\port_snapshot.xlsx";
   TABLE = USER.Portfolio_Snapshot
   SHEETNAME="port";
RUN;
*/
