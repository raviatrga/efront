//This uses the existing tables/cubes to calculate and build the portfolio snapshot report
//No other parameters are passed in.

LIBNAME PDE '\\Private Debt & Equity\PDE_Dashboard_Tables\Version2';



%LET DIRECTS_DEBT_LABEL = "Direct Debt - ";
%LET DIRECTS_EQUITY_LABEL = "Direct Equity";
%LET FUNDS_LABEL = "Funds";

PROC FORMAT;
    PICTURE P_Money
    LOW-HIGH="$#,##0;($#,##0)";
RUN;

PROC FORMAT;
    PICTURE P_MOC
    LOW-HIGH="0.0x;(0.0x)";
RUN;

PROC FORMAT;
    PICTURE P_IRR
    LOW-HIGH="0.0%;(0.0%)";
RUN;

//Directs Data
DATA WORK.Direct_Raw_Data (WHERE INV_YEAR IN(%VINTAGE_DATE_LIST));
    SET PDE.DirAll_List1;
    //COLUMN SEQ TYPE=INTEGER; SEQ=0;
    COLUMN Investment_Type TYPE = STRING;
    COLUMN Investment_Class TYPE = STRING;
    COLUMN Investment_Status TYPE = STRING;
    COLUMN Total_Investment_Cnt TYPE = INTEGER;
    COLUMN Active_Investment_Cnt TYPE = INTEGER;
    COLUMN Exited_Investment_Cnt TYPE = INTEGER;
    COLUMN Invested_Capital TYPE = INTEGER;
    COLUMN Book_Value TYPE = INTEGER;
    COLUMN Realized_Value TYPE = INTEGER;
    COLUMN Unrealized_Value TYPE = INTEGER;
    COLUMN Total_Value TYPE = INTEGER;

    if Invst_Type = 'Loan'
        then Investment_Type = 'Direct Debt';
    elseif Invst_Type = 'Equity'
        then Investment_Type = 'Direct Equity';
    end;

    if Invst_Type = 'Loan'
        then Investment_Class = %Directs_Debt_Label + Unitranche_Mezz;
    elseif Invst_Type = 'Equity'
        then Investment_Class = %Directs_Equity_Label;
    end;

    Investment_Status = Facility_Status;

    Total_Investment_Cnt = '1';

    if Facility_Status = 'Active'
        then Active_Investment_Cnt = '1';
    else Active_Investment_Cnt = '0';
    end;

    if Facility_Status = 'Exited'
        then Exited_Investment_Cnt = '1';
    else Exited_Investment_Cnt = '0';
    end;

    Invested_Capital = Investment;

    Book_Value = '';

    Realized_Value = V_Exit;

    Unrealized_Value = Unrealized;

    Total_Value = TotalValue;
RUN;

/*
PROC EXPORTEXCEL FILE=GETTEMPPATH()+"\DirAll_List1.xlsx" DROP;
   TABLE = WORK.DirAll_List1
   SHEETNAME="DirAll_List1";
RUN;
*/

//Need to create additional rows for Subtotal Direct Debt, Subtotal Directs, and Total in the table for the subtotals/totals that will appear in the dashboard
DATA WORK.Subtotal_Direct_Debt (WHERE Investment_Type = 'Direct Debt');
    SET WORK.Direct_Raw_Data (DROP = Investment_Class);
    COLUMN New_Investment_Class TYPE = STRING;
    New_Investment_Class = 'Subtotal Direct Debt';
RUN;
//PROC PRINT DATA = WORK.Subtotal_Direct_Debt; RUN;

DATA WORK.Subtotal_Directs;
    SET WORK.Direct_Raw_Data (DROP = Investment_Class);
    COLUMN New_Investment_Class TYPE = STRING;
    New_Investment_Class = 'Subtotal Directs';
RUN;
//PROC PRINT DATA = WORK.Subtotal_Directs; RUN;

DATA WORK.Total_Directs;
    SET WORK.Direct_Raw_Data (DROP = Investment_Class);
    COLUMN New_Investment_Class TYPE = STRING;
    New_Investment_Class = 'Total';
RUN;
//PROC PRINT DATA = WORK.Total_Directs; RUN;



//Merge data for subtotal rows with raw data
DATA WORK.Direct_Raw_Data_With_Subtotal_As_Class1;
    MERGE WORK.Direct_Raw_Data (IN = OK_L)
          WORK.Subtotal_Direct_Debt (IN = OK_R RENAME = (New_Investment_Class = Investment_Class));
    BY Investment_Class;
    if (OK_L or OK_R) then Output;
	end;
RUN; 

DATA WORK.Direct_Raw_Data_With_Subtotal_As_Class2;
    MERGE WORK.Direct_Raw_Data_With_Subtotal_As_Class1 (IN = OK_L)
          WORK.Subtotal_Directs (IN = OK_R RENAME = (New_Investment_Class = Investment_Class));
    BY Investment_Class;
    if (OK_L or OK_R) then Output;
	end;
RUN; 

DATA WORK.Direct_Raw_Data_With_Subtotal_As_Class;
    MERGE WORK.Direct_Raw_Data_With_Subtotal_As_Class2 (IN = OK_L)
          WORK.Total_Directs (IN = OK_R RENAME = (New_Investment_Class = Investment_Class));
    BY Investment_Class;
    if (OK_L or OK_R) then Output;
	end;
RUN; 
//PROC EXPORTEXCEL FILE=GETTEMPPATH()+"\Directs_With_Subtotal_Groups.xlsx" DROP;
//   TABLE = WORK.Directs_With_Subtotal_Groups
//   SHEETNAME="Directs_With_Subtotal_Groups";
//RUN;


PROC MEANS DATA = WORK.Direct_Raw_Data_With_Subtotal_As_Class 
    OUT = WORK.Directs_By_CUSIP_And_Class;
    CLASS CUSIP Investment_Class;
    VAR Investment_Type Investment_Status Total_Investment_Cnt Active_Investment_Cnt Exited_Investment_Cnt Invested_Capital Book_Value Realized_Value Unrealized_Value Total_Value;    
RUN;
//PROC PRINT DATA = WORK.All_Directs; RUN;


//get the Funds data
DATA WORK.Fund_Raw_Data (WHERE VINTAGE IN(%VINTAGE_DATE_LIST) RENAME = (Q_CUSIP = CUSIP OperationDate = Reference_Date));
    SET PDE.Fund_List1 (DROP = Fund_Class3);
    //COLUMN SEQ TYPE=INTEGER; SEQ=0;
    COLUMN Investment_Type TYPE = STRING;
    COLUMN Investment_Class TYPE = STRING;
    COLUMN Investment_Status TYPE = STRING;
    COLUMN Total_Investment_Cnt TYPE = INTEGER;
    COLUMN Active_Investment_Cnt TYPE = INTEGER;
    COLUMN Exited_Investment_Cnt TYPE = INTEGER;
    COLUMN Invested_Capital TYPE = INTEGER;
    COLUMN Book_Value TYPE = INTEGER;
    COLUMN Realized_Value TYPE = INTEGER;
    COLUMN Unrealized_Value TYPE = INTEGER;
    COLUMN Total_Value TYPE = INTEGER;
    
    Investment_Type = 'Fund';
    
    Investment_Class = 'Funds';
    
    Investment_Status = FundStatus_Dashbrd;
    
    Total_Investment_Cnt = '1';
    
    if FundStatus_Dashbrd = 'Active'
        then Active_Investment_Cnt = '1';
    else Active_Investment_Cnt = '0';
    end;
    
    if FundStatus_Dashbrd = 'Exited'
        then Exited_Investment_Cnt = '1';
    else Exited_Investment_Cnt = '0';
    end;
    
    Invested_Capital = CapitalInvested;
    
    Book_Value = CurrentCost;
    
    Realized_Value = ReturnOfCapital;
    
    Unrealized_Value = LastValuation;
    
    Total_Value = TotalValue;
RUN;
//PROC EXPORTEXCEL FILE=GETTEMPPATH()+"\Fund_Raw_Data.xlsx" DROP;
//   TABLE = WORK.Fund_Raw_Data
//   SHEETNAME="Fund_Raw_Data";
//RUN;

//PROC PRINT DATA = WORK.Fund_Raw_Data; RUN;

//Create subtotal/total rows
DATA WORK.Total_Funds;
    SET WORK.Fund_Raw_Data (DROP = Investment_Class);
    COLUMN New_Investment_Class TYPE = STRING;
    New_Investment_Class = 'Total';
RUN;


//Merge data for subtotal rows with raw data
DATA WORK.Fund_Raw_Data_With_Subtotal_As_Class;
    MERGE WORK.Fund_Raw_Data (IN = OK_L)
          WORK.Total_Funds (IN = OK_R RENAME = (New_Investment_Class = Investment_Class));
    BY Investment_Class;
    if (OK_L or OK_R) then Output;
	end;
RUN; 

PROC MEANS DATA = WORK.Fund_Raw_Data_With_Subtotal_As_Class 
    OUT = WORK.Funds_By_CUSIP_And_Class;
    CLASS CUSIP Investment_Class;
    VAR Investment_Type Investment_Status Total_Investment_Cnt Active_Investment_Cnt Exited_Investment_Cnt Invested_Capital Book_Value Realized_Value Unrealized_Value Total_Value;
RUN;


//Combining Directs and Funds
DATA WORK.Investments_By_CUSIP_And_Class;
    MERGE WORK.Directs_By_CUSIP_And_Class (IN = OK_L)
          WORK.Funds_By_CUSIP_And_Class (IN = OK_R);
    BY CUSIP;        
    if (OK_L or OK_R) then Output;
	end;
RUN; 
//PROC PRINT DATA = WORK.All_Directs_And_Funds; RUN;

PROC MEANS DATA = WORK.Investments_By_CUSIP_And_Class
    OUT = WORK.Investments_By_Class_And_Status;
    CLASS Investment_Class Investment_Status; //Active_Investment_Cnt Exited_Investment_Cnt;
    SUM Total_Investment_Cnt (NAME = Total_Investment_Cnt) Invested_Capital (NAME = Invested_Capital) Book_Value (NAME = Book_Value) Realized_Value (NAME = Realized_Value) Unrealized_Value (NAME = Unrealized_Value) Total_Value (NAME = Total_Value);
RUN;
//PROC PRINT DATA = WORK.Investments_By_Class_And_Status; RUN;


//Duplicating data and creating additional Status of 'Total' that can be used as a filter in the dashboard with the Active and Exited to pull in all data
DATA WORK.Investments_Adding_Total_Status;
    SET WORK.Investments_By_Class_And_Status (DROP = Investment_Status);
    COLUMN New_Investment_Status TYPE = STRING;
    New_Investment_Status = 'Total';
RUN;

PROC MEANS DATA = WORK.Investments_Adding_Total_Status
    OUT = WORK.Investments_By_Total_Status;
    CLASS Investment_Class New_Investment_Status;
    SUM Total_Investment_Cnt (NAME = Total_Investment_Cnt) Invested_Capital (NAME = Invested_Capital) Book_Value (NAME = Book_Value) Realized_Value (NAME = Realized_Value) Unrealized_Value (NAME = Unrealized_Value) Total_Value (NAME = Total_Value);
RUN;
//PROC PRINT DATA = WORK.Investments_By_Total_Status; RUN;

//Merge data with new total status
DATA WORK.All_Investments_By_Class_And_Status;
    MERGE WORK.Investments_By_Class_And_Status (IN = OK_L)
          WORK.Investments_By_Total_Status (IN = OK_R RENAME = (New_Investment_Status = Investment_Status));
    BY Investment_Class Investment_Status;
    if (OK_L or OK_R) then Output;
	end;
RUN; 
//PROC PRINT DATA = WORK.All_Investments_By_Class_And_Status; RUN;


//Add IRR for each Class/Status group
DATA WORK.Direct_IRR_Cashflows (KEEP = CUSIP Investment_Class Investment_Status Total_Investment_Cnt Active_Investment_Cnt Exited_Investment_Cnt Reference_Date IRRNet);
    SET WORK.Direct_Raw_Data_With_Subtotal_As_Class;
RUN;

DATA WORK.Fund_IRR_Cashflows (KEEP = CUSIP Investment_Class Investment_Status Total_Investment_Cnt Active_Investment_Cnt Exited_Investment_Cnt Reference_Date IRRNet);
    SET WORK.Fund_Raw_Data_With_Subtotal_As_Class;
RUN;


DATA WORK.Investment_IRR_Cashflows;
    MERGE WORK.Direct_IRR_Cashflows (IN = OK_L)
          WORK.Fund_IRR_Cashflows (IN = OK_R);
    BY CUSIP;
    if (OK_L or OK_R) then Output;
	end;
RUN;
//PROC EXPORTEXCEL FILE=GETTEMPPATH()+"\Investment_IRR_Cashflows.xlsx" DROP;
//   TABLE = WORK.Investment_IRR_Cashflows
//   SHEETNAME="Investment_IRR_Cashflows";
//RUN;

PROC MEANS DATA = WORK.Investment_IRR_Cashflows
    OUT = WORK.IRR_By_Class_And_Status;
    CLASS Investment_Class Investment_Status; 
    IRR IRRNet (NAME = IRR_Calc LABEL = "ITD IRR" FORMAT = P_IRR. DATE = REFERENCE_DATE);
RUN;
//PROC PRINT DATA = WORK.IRR_By_FundClass_And_Status; RUN;

DATA WORK.Investments_Active_Exited_Status_IRR_By_Class;
    MERGE WORK.All_Investments_By_Class_And_Status (IN = OK_L)
          WORK.IRR_By_Class_And_Status (IN = OK_R);
    BY Investment_Class Investment_Status; //Active_Investment_Cnt Exited_Investment_Cnt;
    if (OK_L) then Output;
	end;
RUN;
//PROC PRINT DATA = WORK.Investments_Active_Exited_Status_IRR_By_Class; RUN;



PROC MEANS DATA = WORK.Investment_IRR_Cashflows
    OUT = WORK.Investment_Total_Status_IRR_By_Class;
    CLASS Investment_Class;
    IRR IRRNet (NAME = IRR_Calc LABEL = "ITD IRR" FORMAT = P_IRR. DATE = REFERENCE_DATE);
RUN;
//PROC PRINT DATA = WORK.Investment_Total_Status_IRR_By_Class; RUN;

DATA WORK.Investment_Total_Status_IRR_By_Class;
    SET WORK.Investment_Total_Status_IRR_By_Class;
    COLUMN Investment_Status TYPE = STRING;
    Investment_Status = 'Total';
RUN;

DATA WORK.Total_Investment_Data_With_IRR;
    MERGE WORK.Investments_Active_Exited_Status_IRR_By_Class (IN = OK_L)
          WORK.Investment_Total_Status_IRR_By_Class (IN = OK_R);
    BY Investment_Class Investment_Status;
    if (OK_L) then Output;
	end;
RUN;
//PROC PRINT DATA = WORK.Total_Investment_Data_With_IRR; RUN;


DATA PDE.Portfolio_Snapshot_Investment_Data;   
    SET WORK.Total_Investment_Data_With_IRR;
    COLUMN MOC TYPE = DOUBLE;
    COLUMN SEQ TYPE = INTEGER;
    
    MOC = Total_Value/Invested_Capital;
    
    if Investment_Class = 'Direct Debt - Unitranche'
        then SEQ = '1';
    elseif Investment_Class = 'Direct Debt - Second Lien'
        then SEQ = '2';
    elseif Investment_Class = 'Direct Debt - Mezzanine'
        then SEQ = '3';
    elseif Investment_Class = 'Subtotal Direct Debt'
        then SEQ = '4';
    elseif Investment_Class = 'Direct Equity'
        then SEQ = '5';
    elseif Investment_Class = 'Subtotal Directs'
        then SEQ = '6';
    elseif Investment_Class = 'Funds'
        then SEQ = '7';
    elseif Investment_Class = 'Total'
        then SEQ = '8';
    end;
RUN;

PROC SORT DATA = PDE.Portfolio_Snapshot_Investment_Data;
    BY SEQ;
RUN;
//PROC PRINT DATA = PDE.Portfolio_Snapshot_Investment_Data; RUN;



