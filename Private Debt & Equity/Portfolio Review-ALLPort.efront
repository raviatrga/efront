LIBNAME USER ".";

%DEFINE REPORT_DATE;
%DEFINE CALCULATE_IRR;
%DEFINE USE_INVESTEE_CURR;

//%PARAM DATE LABEL="As of Date" TYPE=DATE DEFAULT=TODAY NOTNULL ;
%PARAM DATE LABEL="As of Date" TYPE=DATE DEFAULT="31032017"d;
%LET DATE=%DATE;
%LET ORIG_DATE=%DATE;

/*------------------7. Funds by Vintage-------------------*/ 
DATA WORK.FUNDMAST;
SQL "SELECT A.IQID AS FUND_ID,
    A.FUND as FUNDNAME ,
    VCPRT.PORTFOLIO as PORTFOLIO,
    (case 
		when A.USERTEXT43 = '1' then 'Debt Hedge Fund' 
		when A.USERTEXT43 = '2' then 'Alternatives Preferred Stock' 
		when A.USERTEXT43 = '3' then 'Senior Secured Loan' 
		when A.USERTEXT43 = '4' then 'Subordinated Loan' 
		when A.USERTEXT43 = '5' then 'Distressed Debt' 
		when A.USERTEXT43 = '6' then 'Real Asset Debt' 
		when A.USERTEXT43 = '7' then 'Senior Secured Loan' 
		when A.USERTEXT43 = '8' then 'Subordinated Loan/Mezzanine Funds' 
		when A.USERTEXT43 = '9' then 'Senior Secured Loan' 
		when A.USERTEXT43 = '10' then 'Subordinated Loan' 
		when A.USERTEXT43 = '11' then 'Senior Secured Loan' 
		when A.USERTEXT43 = '12' then 'Subordinated Loan' 
		when A.USERTEXT43 = '13' then 'Equity Hedge Fund' 
		when A.USERTEXT43 = '14' then 'Alternatives Common Stock' 
		when A.USERTEXT43 = '15' then 'Alternatives Preferred Stock' 
		when A.USERTEXT43 = '16' then 'Warrants' 
		when A.USERTEXT43 = '17' then 'Buyout' 
		when A.USERTEXT43 = '18' then 'Growth' 
		when A.USERTEXT43 = '19' then 'Real Asset Equity' 
		when A.USERTEXT43 = '20' then 'Secondary' 
		when A.USERTEXT43 = '21' then 'Venture Capital' 
		when A.USERTEXT43 = '22' then 'Structured Alternatives Common Stock' 
		when A.USERTEXT43 = '23' then 'Structured Alternatives Preferred Stock' 
		when A.USERTEXT43 = '24' then 'Senior Loan' 
		when A.USERTEXT43 = '25' then 'Subordinated Loan' 
  end) + 
	(case 
		when A.USERTEXT44 = '1' then '/Co-Investment' 
		when A.USERTEXT44 = '2' then '/Direct Investment' 
		when A.USERTEXT44 = '3' then '/Co-Investment' 
		when A.USERTEXT44 = '4' then '/Direct Investment' 
		when A.USERTEXT44 = '5' then '/Co-Investment' 
		when A.USERTEXT44 = '6' then '/Direct Investment' 
		when A.USERTEXT44 = '7' then '/Agriculture' 
		when A.USERTEXT44 = '8' then '/Energy' 
		when A.USERTEXT44 = '9' then '/Infrastructure' 
		when A.USERTEXT44 = '10' then '/Real Estate' 
		when A.USERTEXT44 = '11' then '/Timber' 
		when A.USERTEXT44 = '12' then '/Co-Investment' 
		when A.USERTEXT44 = '13' then '/Co-Investment' 
		when A.USERTEXT44 = '14' then '/Co-Investment' 
		when A.USERTEXT44 = '15' then '/Agriculture' 
		when A.USERTEXT44 = '16' then '/Energy' 
		when A.USERTEXT44 = '17' then '/Infrastructure' 
		when A.USERTEXT44 = '18' then '/Real Estate' 
		when A.USERTEXT44 = '19' then '/Timber' 
     else ' '                                                                                                                                                                                
end) as Sectors,
    A.VINTAGEYEAR as 'Vintage',                                                                                                                                                                            
    A.USERCURR3 as 'RGA_Orig_Commit', 
    A.USERCURR2 as 'Total_Fund_Size',                                                                                                                                                                            
    A.CURRENCY1 as 'CURRENCY',
    A.CLOSINGDATE as 'CLOSEDATE',
    A.ENDDATE  as 'ENDDATE', 
    VCSUB.EXITDATE,
    (case  when FSTAT.DESCR like 'Exited Fund%' then '0'  else '1' end ) as 'FACTIVESTATUS' ,
    (case  when FSTAT.DESCR like 'Exited Fund%' then 'Exited' else 'Active' end ) as 'FUNDSTATUS_DashBrd',
    (case 
		when A.USERTEXT42 = '4' then 'Private Debt Fund' 
		when A.USERTEXT42 = '9' then 'Private Equity Fund'                                                                                                                                                                             
    end) as  FUND_CLASS3 ,
    VCSUB.LIBELLE as INVESTORNAME,
    A.USERNUM8 as RGA_SHARE, 
    (CASE A.USERTEXT47 WHEN '1' THEN 'Yes' WHEN '0' THEN 'No' ELSE '' END) as LIM_PART_ADV, 
    (CASE A.USERTEXT48 WHEN '1' THEN 'Yes' WHEN '0' THEN 'No' ELSE '' END) as BUYOUT_STRATEGIC,
    DATEPART(YYYY,A.CLOSINGDATE) AS COMMITMENT_YEAR        
    FROM VCFUND A
     JOIN VCSUBSCRIBER VCSUB ON VCSUB.FUND = A.IQID AND VCSUB.IQDELETED=0 
     JOIN VCPORTFOLIOASSET VCPRTAST ON VCPRTAST.SUBSCRIBER = VCSUB.IQID AND  VCPRTAST.IQDELETED=0   
     JOIN VCPORTFOLIO VCPRT ON VCPRT.IQID = VCPRTAST.PORTFOLIO  AND  VCPRT.IQDELETED=0 
/*     AND VCPRT.PORTFOLIO IN ('PDE - Funds')                                                                                                                                                                         
     JOIN ADMROLE REG ON A.IQREGIONID = REG.IQID AND REG.NAME IN ('Private Debt & Equity') */
     JOIN VCFUNDSTAT FSTAT ON A.FSTATUS = FSTAT.CODE 
    WHERE A.IQDELETED=0 
    AND ((A.USERTEXT42 = '4' AND A.USERTEXT43 IN ('5','8')) OR A.USERTEXT42 = '9')
    AND ??FILTER
      ";
COLUMN FUND_ID; RUN; 

//PROC PRINT DATA=WORK.FUNDMAST; RUN;

//PROC PRINT; PUT %DATE; 
%LET DATE = DATEADD("QUARTER", -1, %DATE);
//PUT %DATE;RUN;

//VCF.FUND FUNDNAME,
DATA WORK.FUND_CF;
    SQL "SELECT VCF.IQID FUND_ID, VCF.FUND FUND, SUBSCR.LIBELLE INVESTORNAME, OP.CLOSEDATE CLOSEDATE, DATEPART(YYYY,OP.CLOSEDATE) OP_YEAR, 
      
       COALESCE(SUBOP.AMOUNT02,0) + COALESCE(SUBOP.AMOUNT04,0) + COALESCE(SUBOP.AMOUNT08,0) + COALESCE(SUBOP.AMOUNT30,0) + 
       COALESCE(SUBOP.AMOUNT50,0) + COALESCE(SUBOP.AMOUNT80,0) + COALESCE(SUBOP.AMOUNT60,0) AS CAPITALINVESTED,
          
       COALESCE(SUBOP.AMOUNT24,0) + COALESCE(SUBOP.AMOUNT17,0) + COALESCE(SUBOP.AMOUNT13,0) + COALESCE(SUBOP.AMOUNT14,0) +
       COALESCE(SUBOP.AMOUNT15,0) + COALESCE(SUBOP.AMOUNT23,0) + COALESCE(SUBOP.AMOUNT29,0) + COALESCE(SUBOP.AMOUNT28,0)
         AS RETURNOFCAPITAL
    FROM VCFUND VCF 
    JOIN VCFUNDSTAT FSTAT ON VCF.FSTATUS = FSTAT.CODE 
    JOIN ADMROLE REG ON VCF.IQREGIONID = REG.IQID AND REG.NAME IN ('Private Debt & Equity')
    JOIN VCFUNDOP OP ON OP.FUND = VCF.IQID AND OP.IQDELETED=0
    JOIN VCFUNDOPTYPE VCFOPTYPE ON VCFOPTYPE.CODE=OP.OTYPE AND VCFOPTYPE.FILTER<>'00000000000000000000000000000000'
    JOIN VCSUBSCRFUNDOPSHARE SUBOP ON SUBOP.FUNDOP = OP.IQID AND SUBOP.IQDELETED=0 AND SUBOP.FUNDOP IS NOT NULL
    JOIN VCSUBSCRIBER SUBSCR ON SUBSCR.IQID = SUBOP.SUBSCRIBER AND SUBSCR.IQDELETED=0
    JOIN VCPORTFOLIOASSET VCPRTAST ON VCPRTAST.SUBSCRIBER = SUBSCR.IQID AND  VCPRTAST.IQDELETED=0   
     JOIN VCPORTFOLIO VCPRT ON VCPRT.IQID = VCPRTAST.PORTFOLIO  AND  VCPRT.IQDELETED=0 AND VCPRT.PORTFOLIO IN ('PDE - Funds')
    WHERE 
    VCF.IQDELETED=0 
    AND ((VCF.USERTEXT42 = '4' AND VCF.USERTEXT43 IN ('5','8')) OR VCF.USERTEXT42 = '9')
    AND OP.CLOSEDATE <= " & DML(%DATE) & " 
    AND ( COALESCE(SUBOP.AMOUNT02,0) <> 0  OR COALESCE(SUBOP.AMOUNT04,0) <> 0 OR COALESCE(SUBOP.AMOUNT08,0) <> 0
      OR COALESCE(SUBOP.AMOUNT30,0) <> 0 OR COALESCE(SUBOP.AMOUNT50,0) <> 0 OR COALESCE(SUBOP.AMOUNT80,0) <> 0 OR COALESCE(SUBOP.AMOUNT60,0) <> 0 
      OR COALESCE(SUBOP.AMOUNT24,0)  <> 0 OR COALESCE(SUBOP.AMOUNT17,0)  <> 0 OR COALESCE(SUBOP.AMOUNT13,0)  <> 0 OR COALESCE(SUBOP.AMOUNT14,0)  <> 0 OR 
      COALESCE(SUBOP.AMOUNT15,0)  <> 0 OR COALESCE(SUBOP.AMOUNT23,0)  <> 0 OR COALESCE(SUBOP.AMOUNT29,0)  <> 0 OR COALESCE(SUBOP.AMOUNT28,0)<>0 )
 /*   GROUP BY VCF.IQID, VCF.FUND, SUBSCR.LIBELLE */
    ORDER BY 1
     " ; 
    COLUMN FUND_ID;
RUN;

//PROC PRINT DATA=WORK.FUND_CF; RUN;

PROC MEANS DATA =WORK.FUND_CF OUT=WORK.FUND_CF2;
CLASS FUND_ID INVESTORNAME; 
SUM CAPITALINVESTED(NAME=CAPITALINVESTED);
SUM RETURNOFCAPITAL(NAME=RETURNOFCAPITAL);
RUN; 

%LET DATE = %ORIG_DATE;
//PROC PRINT; PUT %DATE; RUN;

/* For Capital Invested Graph */
DATA WORK.FUND_CF_YEAR;
    SQL "SELECT VCF.IQID FUND_ID, VCF.FUND FUND, SUBSCR.LIBELLE INVESTORNAME, OP.CLOSEDATE CLOSEDATE, DATEPART(YYYY,OP.CLOSEDATE) INVEST_YEAR, 
      
       COALESCE(SUBOP.AMOUNT02,0) + COALESCE(SUBOP.AMOUNT04,0) + COALESCE(SUBOP.AMOUNT08,0) + COALESCE(SUBOP.AMOUNT30,0) + 
       COALESCE(SUBOP.AMOUNT50,0) + COALESCE(SUBOP.AMOUNT80,0) + COALESCE(SUBOP.AMOUNT60,0) AS CAPITALINVESTED,
          
       COALESCE(SUBOP.AMOUNT24,0) + COALESCE(SUBOP.AMOUNT17,0) + COALESCE(SUBOP.AMOUNT13,0) + COALESCE(SUBOP.AMOUNT14,0) +
       COALESCE(SUBOP.AMOUNT15,0) + COALESCE(SUBOP.AMOUNT23,0) + COALESCE(SUBOP.AMOUNT29,0) + COALESCE(SUBOP.AMOUNT28,0)
         AS RETURNOFCAPITAL, 'Funds' AS INVEST_TYPE
    FROM VCFUND VCF 
    JOIN VCFUNDSTAT FSTAT ON VCF.FSTATUS = FSTAT.CODE 
    JOIN ADMROLE REG ON VCF.IQREGIONID = REG.IQID AND REG.NAME IN ('Private Debt & Equity')
    JOIN VCFUNDOP OP ON OP.FUND = VCF.IQID AND OP.IQDELETED=0
    JOIN VCFUNDOPTYPE VCFOPTYPE ON VCFOPTYPE.CODE=OP.OTYPE AND VCFOPTYPE.FILTER<>'00000000000000000000000000000000'
    JOIN VCSUBSCRFUNDOPSHARE SUBOP ON SUBOP.FUNDOP = OP.IQID AND SUBOP.IQDELETED=0  AND SUBOP.FUNDOP IS NOT NULL
    JOIN VCSUBSCRIBER SUBSCR ON SUBSCR.IQID = SUBOP.SUBSCRIBER AND SUBSCR.IQDELETED=0
    JOIN VCPORTFOLIOASSET VCPRTAST ON VCPRTAST.SUBSCRIBER = SUBSCR.IQID AND  VCPRTAST.IQDELETED=0   
     JOIN VCPORTFOLIO VCPRT ON VCPRT.IQID = VCPRTAST.PORTFOLIO  AND  VCPRT.IQDELETED=0 AND VCPRT.PORTFOLIO IN ('PDE - Funds')
    WHERE 
    VCF.IQDELETED=0 
    AND ((VCF.USERTEXT42 = '4' AND VCF.USERTEXT43 IN ('5','8')) OR VCF.USERTEXT42 = '9')
    AND OP.CLOSEDATE <= " & DML(%DATE) & " 
    AND ( COALESCE(SUBOP.AMOUNT02,0) <> 0  OR COALESCE(SUBOP.AMOUNT04,0) <> 0 OR COALESCE(SUBOP.AMOUNT08,0) <> 0
      OR COALESCE(SUBOP.AMOUNT30,0) <> 0 OR COALESCE(SUBOP.AMOUNT50,0) <> 0 OR COALESCE(SUBOP.AMOUNT80,0) <> 0 OR COALESCE(SUBOP.AMOUNT60,0) <> 0 
      OR COALESCE(SUBOP.AMOUNT24,0)  <> 0 OR COALESCE(SUBOP.AMOUNT17,0)  <> 0 OR COALESCE(SUBOP.AMOUNT13,0)  <> 0 OR COALESCE(SUBOP.AMOUNT14,0)  <> 0 OR 
      COALESCE(SUBOP.AMOUNT15,0)  <> 0 OR COALESCE(SUBOP.AMOUNT23,0)  <> 0 OR COALESCE(SUBOP.AMOUNT29,0)  <> 0 OR COALESCE(SUBOP.AMOUNT28,0)<>0 )
 /*   GROUP BY VCF.IQID, VCF.FUND, SUBSCR.LIBELLE */
    ORDER BY 1
     " ; 
    COLUMN FUND_ID;
RUN;

//PROC PRINT DATA=WORK.FUND_CF; RUN;

DATA WORK.FUND_CF_YEAR;
MERGE WORK.FUNDMAST(IN=IN1) WORK.FUND_CF_YEAR(IN=IN2);
BY FUND_ID INVESTORNAME;
IF (IN1 AND IN2) THEN OUTPUT;
END;
RUN; 
/* For Capital Invested Graph */

//PROC PRINT DATA=WORK.FUND_CF_YEAR; RUN;

DATA WORK.FUND_LIST;
//MERGE WORK.FUNDMAST(IN=IN1) WORK.FUND_CF2(IN=IN2);
MERGE WORK.FUNDMAST(IN=IN1) WORK.FUND_CF2;
By FUND_ID INVESTORNAME  ;
//If (IN1 and IN2) then Output;
IF (IN1) THEN OUTPUT;
END;
RUN;  
//PROC PRINT DATA=WORK.FUND_LIST; RUN;   
                                                                                                                                                                                       
PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE) ; 
    TABLE "Default"  OUT=WORK.QRY_POSITIONS_PORTREV;
RUN;

//PROC PRINT DATA=WORK.QRY_POSITIONS_PORTREV; RUN;

DATA WORK.FUND_LIST;
MERGE WORK.FUND_LIST(IN=IN1) WORK.QRY_POSITIONS_PORTREV(IN=IN2);
By FUND_ID INVESTORNAME  ;
If (IN1 and IN2) then Output;
End;
RUN; 

//PROC PRINT DATA =  WORK.FUND_LIST; RUN; 

DATA WORK.FUND_LIST(DROP=FUND GAAP_BOOK_VALUE GL_COST_ELIM);
SET WORK.FUND_LIST;
 COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
RUN;
//PROC PRINT DATA =  WORK.FUND_LIST; RUN;     
//0809                                                                                                                                                                                        
                                                                                                                                                                                        
PROC MEANS DATA = FCE.FUNDOPERATIONS(WHERE OPERATIONDATE<=%DATE) OUT=WORK.TIRR;
CLASS FUND_ID OPERATIONDATE; 
VAR  FUNDNAME; 
SUM CASH(NAME=IRRNET);
RUN; 

PROC MEANS DATA =  WORK.FUND_LIST OUT=WORK.TVALUATION;
CLASS FUND_ID; 
VAR  FUNDNAME; 
SUM LASTVALUATION(NAME=IRRNET);
RUN; 

DATA WORK.TIRR;
SET  WORK.TIRR(IN=T1) WORK.TVALUATION; 
IF IRRNET IS NULL THEN IRRNET=0; END; 

COLUMN SORT_IRR TYPE=INTEGER; 

IF T1 THEN 
SORT_IRR=0;  
ELSE 
SORT_IRR=1; 
OPERATIONDATE=%DATE;
END; 
                                                                                                                                                                                       
_OUTPUT_=IRRNET <>0 OR SORT_IRR=1;
RUN; 

PROC SORT DATA = WORK.TIRR; 
BY FUND_ID FUNDNAME SORT_IRR OPERATIONDATE; 
RUN; 

DATA WORK.FUND_LIST1;
MERGE WORK.FUND_LIST(IN=IN1) WORK.TIRR(IN=IN2);
By FUND_ID;
If (IN1 and IN2) then Output;
End;
RUN;
                                                                                                                                                                                    
DATA FUND_LIST1(DROP = ENDDATE); 
SET WORK.FUND_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; 
TOTALVALUE= RETURNOFCAPITAL+ LASTVALUATION;                                                                                                                                                                                     
RUN;  
/*------------------7. Funds by Vintage-------------------*/ 
/*------------------5. Direct Mezz by Vintage-------------*/ 

DATA WORK.INVSTINS;
    SQL "SELECT MIN(INVINS.ACCOUNTINS) INVINS_ACCOUNTINS, SUM(A.AMOUNT2*(-1)) INVESTMENT, DATEPART(YYYY,MIN(A.CLOSEDATE)) INV_YEAR,
        MIN(VCPRT.PORTFOLIO) as PORTFOLIO, MIN (A.CURRENCY6) INST_CURR, MIN(SFA.NAME) AS SPONSOR,
        (case  when MIN(SFASTAT.DESCR) like 'Exited Portfolio Co.%' then '0' else '1' end ) as 'CMPACTIVESTATUS',
        (case  when MIN(SFASTAT.DESCR) like 'Exited Portfolio Co.%' then 'Exited' else 'Active' end ) as 'CMPSTATUS_DashBrd',
        MIN(SFA_CMP.NAME) COMPANY, MIN(SFA_CMP.CREATIONDATE) CREATIONDATE ,
        CASE WHEN CONVERT(VARCHAR(12),MIN(RATE.BASERATE)/100 ) IS NOT NULL THEN CONVERT(VARCHAR(12),MIN(RATE.BASERATE)/100 ) 
              ELSE  MIN(BNMK.LIBELLE) + ' + ' + CONVERT( VARCHAR(12),MIN(RATE.RATESTABLEPERCENT)/100) END  AS CASH ,                                                                                                                                                                                        
        MIN(RATEPIK.BASERATE/100) PIK, MIN(VCP.USERDATE5) MATURITY_DATE,
        CASE MIN(VCP.USERTEXT30)
            WHEN '1' THEN 'Voting Member'
            WHEN '2' THEN 'Non-Voting Member'
            WHEN '3' THEN 'Observation Rights'
            WHEN '4' THEN 'None'
         END AS BOARD_RIGHTS, MIN(INVINS.CURRENCY1) CURRENCY,
                     (case 
		when MIN(INVINS.USERTEXT41) = '1' then 'Debt Hedge Fund' 
		when MIN(INVINS.USERTEXT41) = '2' then 'Alternatives Preferred Stock' 
		when MIN(INVINS.USERTEXT41) = '3' then 'Senior Secured Loan' 
		when MIN(INVINS.USERTEXT41) = '4' then 'Subordinated Loan' 
		when MIN(INVINS.USERTEXT41) = '5' then 'Distressed Debt' 
		when MIN(INVINS.USERTEXT41) = '6' then 'Real Asset Debt' 
		when MIN(INVINS.USERTEXT41) = '7' then 'Senior Secured Loan' 
		when MIN(INVINS.USERTEXT41) = '8' then 'Subordinated Loan/Mezzanine Funds' 
		when MIN(INVINS.USERTEXT41) = '9' then 'Senior Secured Loan' 
		when MIN(INVINS.USERTEXT41) = '10' then 'Subordinated Loan' 
		when MIN(INVINS.USERTEXT41) = '11' then 'Senior Secured Loan' 
		when MIN(INVINS.USERTEXT41) = '12' then 'Subordinated Loan' 
		when MIN(INVINS.USERTEXT41) = '13' then 'Equity Hedge Fund' 
		when MIN(INVINS.USERTEXT41) = '14' then 'Alternatives Common Stock' 
		when MIN(INVINS.USERTEXT41) = '15' then 'Alternatives Preferred Stock' 
		when MIN(INVINS.USERTEXT41) = '16' then 'Warrants' 
		when MIN(INVINS.USERTEXT41) = '17' then 'Buyout' 
		when MIN(INVINS.USERTEXT41) = '18' then 'Growth' 
		when MIN(INVINS.USERTEXT41) = '19' then 'Real Asset Equity' 
		when MIN(INVINS.USERTEXT41) = '20' then 'Secondary' 
		when MIN(INVINS.USERTEXT41) = '21' then 'Venture Capital' 
		when MIN(INVINS.USERTEXT41) = '22' then 'Structured Alternatives Common Stock' 
		when MIN(INVINS.USERTEXT41) = '23' then 'Structured Alternatives Preferred Stock' 
		when MIN(INVINS.USERTEXT41) = '24' then 'Senior Loan' 
		when MIN(INVINS.USERTEXT41) = '25' then 'Subordinated Loan' 
        end) as Security
         
    FROM VCINVESTMENTINS INVINS 
    JOIN VCINVESTMENT VCINV ON VCINV.IQID = INVINS.INVESTMENT AND VCINV.IQDELETED=0
    LEFT JOIN VCPROJECT VCP ON  VCP.ACCOUNT = VCINV.ACCOUNT AND VCP.WORKFLOW =
                                (SELECT IQID FROM ADMWORKFLOW WHERE LIBELLE IN ('RGA Direct Mezzanine'))  AND VCP.IQDELETED=0
    LEFT JOIN SFAACCOUNT SFA ON SFA.IQID = VCP.USERTEXT7  AND SFA.IQDELETED=0
    LEFT JOIN SFAACCOUNT SFA_CMP ON SFA_CMP.IQID = VCINV.ACCOUNT   AND SFA_CMP.IQDELETED=0                                                                                                                                                                                  
    LEFT JOIN SFAACCTSTAT SFASTAT ON SFA_CMP.STATUS = SFASTAT.CODE AND  SFASTAT.FILTER NOT LIKE '000000%' 
    LEFT JOIN VCINVESTINSRATE RATE ON RATE.INVESTMENTINS =  INVINS.ACCOUNTINS 
        AND RATE.FIRSTDATE<= " & DML(%DATE) & "   AND RATE.LASTDATE>= " & DML(%DATE) & " 
        AND RATE.KIND = (SELECT CODE FROM VCINVINSRATKIND WHERE DESCR IN ('Loan Cash Interests')  ) 
    LEFT JOIN VCBENCHMARK BNMK ON BNMK.IQID=RATE.RATESTABLE                                                                                                                                                                                                 
    LEFT JOIN VCINVESTINSRATE RATEPIK ON RATEPIK.INVESTMENTINS =  INVINS.ACCOUNTINS AND RATEPIK.FIRSTDATE<= " & DML(%DATE) & " 
        AND RATEPIK.LASTDATE>= " & DML(%DATE) & " AND RATEPIK.KIND = (SELECT CODE FROM VCINVINSRATKIND WHERE DESCR IN ('Loan Capitalized Interests')  )                                                                                                                                                                                                 
    JOIN VCPORTFOLIOASSET VCPRTAST ON VCPRTAST.INVESTMENT = VCINV.IQID AND  VCPRTAST.IQDELETED=0   
    JOIN VCPORTFOLIO VCPRT ON VCPRT.IQID = VCPRTAST.PORTFOLIO AND VCPRT.PORTFOLIO IN ('PDE - Direct Mezzanine')  AND  VCPRT.IQDELETED=0  
    JOIN VCINVESTMENTOP A  ON A.INVESTMENTINS=INVINS.IQID 
    JOIN VCINVESTOPTYPE OPT ON OPT.CODE = A.TYPEINVESTOP AND OPT.DESCR like 'LN - Funding (w/o commitment)%' 
    JOIN ADMROLE REG ON VCINV.IQREGIONID = REG.IQID AND REG.IQDELETED=0 AND A.IQREGIONID = REG.IQID AND REG.NAME IN ('Private Debt & Equity')
    WHERE  INVINS.IQDELETED=0 AND A.IQDELETED=0 AND A.CLOSEDATE <=  " & DML(%DATE) & " AND ??FILTER
    GROUP BY  INVINS.ACCOUNTINS " ;
    
    COLUMN SECURITY_ID;     
RUN;
//PROC PRINT DATA =  WORK.INVSTINS; RUN; 
                                                                                                                                                                                                    
PROC FAQUERY QUERY="IT Admin - Program Queries\Rating"; TABLE "Default" OUT=WORK.RATING; RUN;
//PROC PRINT DATA=WORK.RATING; RUN; 

DATA WORK.RATING(KEEP = SECURITY_ID RATING);
SET WORK.RATING (WHERE FROM <= %DATE AND TO >= %DATE );
RUN;                                                                                                                                                                                                    
                                                                                                                                                                                                    
DATA WORK.INVSTINS;
MERGE WORK.INVSTINS WORK.RATING;                                                                                                                                                                                                        
BY SECURITY_ID;
RUN;
                                                                                                                                                                                                    
//PROC PRINT DATA =  WORK.INVSTINS; RUN; 
                                                                                                                                                                                                    
DATA WORK.INSTRPOS_LN (KEEP = POSITION_DATE COMPANY_NAME SECURITY_NAME EXIT CURRENTCOST PRINCIPAL LASTVALUATION SECURITY_ID );
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND SECURITY_CLASS_NAME ="LOANS" AND LENGTH(COMPANY_NAME)>0 );
RUN;

DATA WORK.DIRLOAN_LIST(RENAME = (SECURITY_ID=SECURITY_COMPANY_ID POSITION_DATE=REFERENCE_DATE));
MERGE WORK.INVSTINS(IN=IN1) WORK.INSTRPOS_LN(IN=IN2);
BY SECURITY_ID;
If (IN1 and IN2) then Output;
End;
RUN; 

//PROC PRINT DATA = WORK.DIRLOAN_LIST; RUN;                                                                                                                                                                                              
//LN05, LN06 and EQ07 - Exclude Origination fees amortization transactions 

PROC MEANS DATA =DCE.FV_T_PORTCO_TRANSACTIONS(WHERE REFERENCE_DATE<=%DATE AND TRANSACTION_TYPE<>'LN05' AND TRANSACTION_TYPE<>'LN07' AND TRANSACTION_TYPE<>'EQ06') OUT=WORK.TIRR;
CLASS SECURITY_COMPANY_ID REFERENCE_DATE; 
VAR  SECURITY_NAME; 
VAR  COMPANY_NAME;     
SUM CASH2(NAME=IRRNET);
RUN; 
                                                                                                                                                                                            
//PROC PRINT DATA= WORK.TIRR; RUN;
                                                                                                                                                                                           
PROC MEANS DATA =  WORK.DIRLOAN_LIST OUT=WORK.TVALUATION;
CLASS SECURITY_COMPANY_ID REFERENCE_DATE; 
VAR  SECURITY_NAME;  
VAR  COMPANY_NAME;     
SUM LASTVALUATION(NAME=IRRNET);
RUN; 

DATA WORK.TIRR;
SET  WORK.TIRR(IN=T1) WORK.TVALUATION; 
IF IRRNET IS NULL THEN IRRNET=0; END; 

COLUMN SORT_IRR TYPE=INTEGER; 

IF T1 THEN SORT_IRR=0;  
ELSE SORT_IRR=1; 
REFERENCE_DATE=%DATE;
END; 

_OUTPUT_=IRRNET <>0 OR SORT_IRR=1;
RUN; 

PROC SORT DATA = WORK.TIRR; 
BY SECURITY_COMPANY_ID SECURITY_NAME COMPANY_NAME SORT_IRR REFERENCE_DATE; 
RUN; 

DATA WORK.DIRLOAN_LIST1;
MERGE WORK.DIRLOAN_LIST(IN=IN1) WORK.TIRR(IN=IN2);
By SECURITY_COMPANY_ID;
If (IN1 and IN2) then Output;
End;
RUN;
                                                                                                                                                                                    
DATA DIRLOAN_LIST1; 
SET WORK.DIRLOAN_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; 
TOTALVALUE= EXIT + LASTVALUATION;                                                                                                                                                                                     
RUN;    

//PROC PRINT DATA = DIRLOAN_LIST1; RUN;
/*------------------5. Direct Mezz by Vintage-------------*/ 
/*------------------6. Direct Equity by Vintage-----------*/    
//SUM(VCINV.OWNERSHIP) PERCENT_OWNERSHIP 
DATA WORK.INVSTINS_EQ;
    SQL "SELECT MIN(INVINS.ACCOUNTINS) INVINS_ACCOUNTINS, SUM(A.AMOUNT2*(-1)) INVESTMENT, DATEPART(YYYY,MIN(A.CLOSEDATE)) INV_YEAR,
        MIN(VCPRT.PORTFOLIO) as PORTFOLIO, MIN (A.CURRENCY6) INST_CURR, MIN(SFA.NAME) AS SPONSOR,
/*0816        (case  when MIN(SFASTAT.DESCR) not like 'Exited Portfolio Co.%' then  '1' else '0' end ) as 'CMPACTIVESTATUS',*/
        (case  when MIN(SFASTAT.DESCR) like 'Exited Portfolio Co.%' then '0' else '1' end ) as 'CMPACTIVESTATUS',
        (case  when MIN(SFASTAT.DESCR) like 'Exited Portfolio Co.%' then 'Exited' else 'Active' end ) as 'CMPSTATUS_DashBrd',
        MIN(SFA_CMP.NAME)  COMPANY, MIN(SFA_CMP.CREATIONDATE) CREATIONDATE , MIN(INVINS.LIBELLE) FUND, 
        (case 
		when MIN(INVINS.USERTEXT21) = 1 then 'Fund' 
		when MIN(INVINS.USERTEXT21) = 2 then 'Company' 
        end) as LP_TYPE,
        CASE MIN(VCP.USERTEXT30)
            WHEN '1' THEN 'Voting Member'
            WHEN '2' THEN 'Non-Voting Member'
            WHEN '3' THEN 'Observation Rights'
            WHEN '4' THEN 'None'
         END AS BOARD_RIGHTS, MIN(INVINS.CURRENCY1) CURRENCY,
                             (case 
		when MIN(INVINS.USERTEXT41) = '1' then 'Debt Hedge Fund' 
		when MIN(INVINS.USERTEXT41) = '2' then 'Alternatives Preferred Stock' 
		when MIN(INVINS.USERTEXT41) = '3' then 'Senior Secured Loan' 
		when MIN(INVINS.USERTEXT41) = '4' then 'Subordinated Loan' 
		when MIN(INVINS.USERTEXT41) = '5' then 'Distressed Debt' 
		when MIN(INVINS.USERTEXT41) = '6' then 'Real Asset Debt' 
		when MIN(INVINS.USERTEXT41) = '7' then 'Senior Secured Loan' 
		when MIN(INVINS.USERTEXT41) = '8' then 'Subordinated Loan/Mezzanine Funds' 
		when MIN(INVINS.USERTEXT41) = '9' then 'Senior Secured Loan' 
		when MIN(INVINS.USERTEXT41) = '10' then 'Subordinated Loan' 
		when MIN(INVINS.USERTEXT41) = '11' then 'Senior Secured Loan' 
		when MIN(INVINS.USERTEXT41) = '12' then 'Subordinated Loan' 
		when MIN(INVINS.USERTEXT41) = '13' then 'Equity Hedge Fund' 
		when MIN(INVINS.USERTEXT41) = '14' then 'Alternatives Common Stock' 
		when MIN(INVINS.USERTEXT41) = '15' then 'Alternatives Preferred Stock' 
		when MIN(INVINS.USERTEXT41) = '16' then 'Warrants' 
		when MIN(INVINS.USERTEXT41) = '17' then 'Buyout' 
		when MIN(INVINS.USERTEXT41) = '18' then 'Growth' 
		when MIN(INVINS.USERTEXT41) = '19' then 'Real Asset Equity' 
		when MIN(INVINS.USERTEXT41) = '20' then 'Secondary' 
		when MIN(INVINS.USERTEXT41) = '21' then 'Venture Capital' 
		when MIN(INVINS.USERTEXT41) = '22' then 'Structured Alternatives Common Stock' 
		when MIN(INVINS.USERTEXT41) = '23' then 'Structured Alternatives Preferred Stock' 
		when MIN(INVINS.USERTEXT41) = '24' then 'Senior Loan' 
		when MIN(INVINS.USERTEXT41) = '25' then 'Subordinated Loan' 
        end) as Security
        
    FROM VCINVESTMENTINS INVINS 
    JOIN VCINVESTMENT VCINV ON VCINV.IQID = INVINS.INVESTMENT AND VCINV.IQDELETED=0 
    LEFT JOIN VCPROJECT VCP ON  VCP.ACCOUNT = VCINV.ACCOUNT AND VCP.IQDELETED=0 AND VCP.WORKFLOW =
        (SELECT TOP 1 IQID FROM ADMWORKFLOW WHERE LIBELLE IN ('RGA Direct Mezzanine','RGA Equity Co-Investment'))
    LEFT JOIN SFAACCOUNT SFA ON SFA.IQID = VCP.USERTEXT7 AND SFA.IQDELETED=0  
    LEFT JOIN SFAACCOUNT SFA_CMP ON SFA_CMP.IQID = VCINV.ACCOUNT  AND SFA_CMP.IQDELETED=0                                                                                                                                                                                            
    LEFT JOIN SFAACCTSTAT SFASTAT ON SFA_CMP.STATUS = SFASTAT.CODE AND  SFASTAT.FILTER NOT LIKE '000%'                                                                                                                                                                                                    
    JOIN VCPORTFOLIOASSET VCPRTAST ON VCPRTAST.INVESTMENT = VCINV.IQID  AND  VCPRTAST.IQDELETED=0  
    JOIN VCPORTFOLIO VCPRT ON VCPRT.IQID = VCPRTAST.PORTFOLIO AND VCPRT.PORTFOLIO IN ('PDE - Direct Equity') AND  VCPRT.IQDELETED=0  
    JOIN VCINVESTMENTOP A  ON A.INVESTMENTINS=INVINS.IQID 
    JOIN VCINVESTOPTYPE OPT ON OPT.CODE = A.TYPEINVESTOP AND OPT.DESCR like 'EQ - Purchase/Subscription (w/o Commitment)%' AND OPT.FILTER NOT LIKE '000000%'
    JOIN ADMROLE REG ON VCINV.IQREGIONID = REG.IQID AND REG.IQDELETED=0 AND A.IQREGIONID = REG.IQID AND REG.NAME IN ('Private Debt & Equity')
    WHERE INVINS.IQDELETED=0 AND A.IQDELETED=0 AND A.CLOSEDATE <=  " & DML(%DATE) & " AND ??FILTER
        GROUP BY  INVINS.ACCOUNTINS        " ;
    
    COLUMN SECURITY_ID;     
RUN;
//PROC PRINT DATA =  WORK.INVSTINS_EQ; RUN;  
                                                                                                                                                                                                    
DATA WORK.INSTRPOS_EQ (KEEP = POSITION_DATE COMPANY_NAME SECURITY_NAME EXIT CURRENTCOST LASTVALUATION SECURITY_ID );
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND SECURITY_CLASS_NAME <>"LOANS" AND LENGTH(COMPANY_NAME)>0 );
RUN;

DATA WORK.DIREQUITY_LIST(RENAME = (SECURITY_ID=SECURITY_COMPANY_ID POSITION_DATE=REFERENCE_DATE));
MERGE WORK.INVSTINS_EQ(IN=IN1) WORK.INSTRPOS_EQ(IN=IN2);
BY SECURITY_ID;
If (IN1 and IN2) then Output;
End;
RUN; 

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE) ; 
    TABLE "Default"  OUT=WORK.QRY_POSITIONS_PORTREV;
RUN;
//PROC PRINT DATA=WORK.QRY_POSITIONS_PORTREV; RUN;

DATA WORK.QRY_POSITIONS_PORTREV(DROP = LASTVALUATION);
SET WORK.QRY_POSITIONS_PORTREV;
RUN;

DATA WORK.DIREQUITY_LIST;
MERGE WORK.DIREQUITY_LIST(IN=IN1) WORK.QRY_POSITIONS_PORTREV;
BY FUND  ;
If (IN1) then Output;
End;
RUN; 
//PROC PRINT DATA=WORK.DIREQUITY_LIST; RUN;

DATA WORK.DIREQUITY_LIST(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM );
SET WORK.DIREQUITY_LIST;
// COLUMN CURRENTCOST  TYPE=DOUBLE;  
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

//PROC PRINT DATA=WORK.DIREQUITY_LIST; RUN;

PROC MEANS DATA =DCE.FV_T_PORTCO_TRANSACTIONS(WHERE REFERENCE_DATE<=%DATE AND TRANSACTION_TYPE<>'LN05' AND TRANSACTION_TYPE<>'LN07' AND TRANSACTION_TYPE<>'EQ06') OUT=WORK.TIRR_EQ;
CLASS SECURITY_COMPANY_ID REFERENCE_DATE; 
VAR  SECURITY_NAME; 
VAR  COMPANY_NAME;     
SUM CASH2(NAME=IRRNET);
RUN; 

PROC MEANS DATA =  WORK.DIREQUITY_LIST OUT=WORK.TVALUATION_EQ;
CLASS SECURITY_COMPANY_ID REFERENCE_DATE; 
VAR  SECURITY_NAME;  
VAR  COMPANY_NAME;     
SUM LASTVALUATION(NAME=IRRNET);
RUN; 

DATA WORK.TIRR_EQ;
SET  WORK.TIRR_EQ(IN=T1) WORK.TVALUATION_EQ; 
IF IRRNET IS NULL THEN IRRNET=0; END; 

COLUMN SORT_IRR TYPE=INTEGER; 

IF T1 THEN SORT_IRR=0;  
ELSE SORT_IRR=1; 
REFERENCE_DATE=%DATE;
END; 

_OUTPUT_=IRRNET <>0 OR SORT_IRR=1;
RUN; 

PROC SORT DATA = WORK.TIRR_EQ; 
BY SECURITY_COMPANY_ID SECURITY_NAME COMPANY_NAME SORT_IRR REFERENCE_DATE; 
RUN; 

DATA WORK.DIREQUITY_LIST1;
MERGE WORK.DIREQUITY_LIST(IN=IN1) WORK.TIRR_EQ(IN=IN2);
By SECURITY_COMPANY_ID;
If (IN1 and IN2) then Output;
End;
RUN;
                                                                                                                                                                                    
DATA DIREQUITY_LIST1; 
SET WORK.DIREQUITY_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; 
TOTALVALUE= EXIT + LASTVALUATION;                                                                                                                                                                                     
RUN;  
        
//PROC PRINT DATA = WORK.DIREQUITY_LIST1; RUN; 
//PROC PRINT DATA = DIREQUITY_LIST1; RUN;  
/*------------------6. Direct Equity by Vintage-----------*/ 
/*------------------4. Direct Mezz + Equity --------------*/  

DATA WORK.INVSTINS_LNEQ;
    SQL "SELECT MIN(INVINS.ACCOUNTINS) INVINS_ACCOUNTINS, SUM(A.AMOUNT2*(-1)) INVESTMENT, DATEPART(YYYY,MIN(A.CLOSEDATE)) INV_YEAR,
        MIN(VCPRT.PORTFOLIO) as PORTFOLIO, MIN (A.CURRENCY6) INST_CURR, MIN(SFA.NAME) AS SPONSOR,
/*0816  (case  when MIN(SFASTAT.DESCR) not like 'Exited Portfolio Co.%' then  '1' else '0' end ) as 'CMPACTIVESTATUS', */
        (case  when MIN(SFASTAT.DESCR) like 'Exited Portfolio Co.%' then '0' else '1' end ) as 'CMPACTIVESTATUS', 
        (case  when MIN(SFASTAT.DESCR) like 'Exited Portfolio Co.%' then 'Exited' else 'Active' end ) as 'CMPSTATUS_DashBrd', 
         MIN(SFA_CMP.NAME) COMPANY, MIN(SFA_CMP.CREATIONDATE) CREATIONDATE, MIN(INVINS.LIBELLE) FUND, 
        (case 
		when MIN(INVINS.USERTEXT21) = 1 then 'Fund' 
		when MIN(INVINS.USERTEXT21) = 2 then 'Company' 
        end) as LP_TYPE,
        CASE MIN(VCP.USERTEXT30)
            WHEN '1' THEN 'Voting Member'
            WHEN '2' THEN 'Non-Voting Member'
            WHEN '3' THEN 'Observation Rights'
            WHEN '4' THEN 'None'
        END AS BOARD_RIGHTS,  MIN(INVINS.CURRENCY1) CURRENCY
    FROM VCINVESTMENTINS INVINS 
    JOIN VCINVESTMENT VCINV ON VCINV.IQID = INVINS.INVESTMENT AND VCINV.IQDELETED=0
    LEFT JOIN VCPROJECT VCP ON  VCP.ACCOUNT = VCINV.ACCOUNT  AND VCP.IQDELETED=0 AND VCP.WORKFLOW =
        (SELECT TOP 1 IQID FROM ADMWORKFLOW WHERE LIBELLE IN ('RGA Direct Mezzanine','RGA Equity Co-Investment'))
    LEFT JOIN SFAACCOUNT SFA ON SFA.IQID = VCP.USERTEXT7 AND SFA.IQDELETED=0   
    LEFT JOIN SFAACCOUNT SFA_CMP ON SFA_CMP.IQID = VCINV.ACCOUNT AND SFA_CMP.IQDELETED=0                                                                                                                                                                                            
    LEFT JOIN SFAACCTSTAT SFASTAT ON SFA_CMP.STATUS = SFASTAT.CODE AND  SFASTAT.FILTER NOT LIKE '000%'                                                                                                                                                                                                    
    JOIN VCPORTFOLIOASSET VCPRTAST ON VCPRTAST.INVESTMENT = VCINV.IQID  AND  VCPRTAST.IQDELETED=0  
    JOIN VCPORTFOLIO VCPRT ON VCPRT.IQID = VCPRTAST.PORTFOLIO AND VCPRT.PORTFOLIO IN ('PDE - Direct Mezz + Equity') AND  VCPRT.IQDELETED=0  
    JOIN VCINVESTMENTOP A  ON A.INVESTMENTINS=INVINS.IQID 
    JOIN VCINVESTOPTYPE OPT ON OPT.CODE = A.TYPEINVESTOP AND ( OPT.DESCR like 'EQ - Purchase/Subscription (w/o Commitment)%'
                         OR OPT.DESCR like 'LN - Funding (w/o commitment)%' )  AND OPT.FILTER NOT LIKE '000000%'
    JOIN ADMROLE REG ON VCINV.IQREGIONID = REG.IQID AND REG.IQDELETED=0 AND A.IQREGIONID = REG.IQID AND REG.NAME IN ('Private Debt & Equity')
    WHERE INVINS.IQDELETED=0 AND  A.IQDELETED=0 AND A.CLOSEDATE <=  " & DML(%DATE) & " AND ??FILTER
    GROUP BY  INVINS.ACCOUNTINS        " ;
    COLUMN SECURITY_ID;     
RUN;

DATA WORK.INSTRPOS_LNEQ (KEEP = POSITION_DATE COMPANY_NAME SECURITY_NAME EXIT CURRENTCOST PRINCIPAL LASTVALUATION SECURITY_ID );
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND LENGTH(COMPANY_NAME)>0 );
RUN;
//AND SECURITY_CLASS_NAME <>"LOANS" 

DATA WORK.DIRLNEQ_LIST(RENAME = (SECURITY_ID=SECURITY_COMPANY_ID POSITION_DATE=REFERENCE_DATE));
MERGE WORK.INVSTINS_LNEQ(IN=IN1) WORK.INSTRPOS_LNEQ(IN=IN2);
BY SECURITY_ID;
If (IN1 and IN2) then Output;
End;
RUN; 

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE) ; 
    TABLE "Default"  OUT=WORK.QRY_POSITIONS_PORTREV;
RUN;
//PROC PRINT DATA=WORK.QRY_POSITIONS_PORTREV; RUN;

DATA WORK.QRY_POSITIONS_PORTREV(DROP = LASTVALUATION);
SET WORK.QRY_POSITIONS_PORTREV;
RUN;

DATA WORK.DIRLNEQ_LIST;
MERGE WORK.DIRLNEQ_LIST(IN=IN1) WORK.QRY_POSITIONS_PORTREV;
BY FUND  ;
If (IN1) then Output;
End;
RUN; 
//PROC PRINT DATA=WORK.DIRLNEQ_LIST; RUN;

DATA WORK.DIRLNEQ_LIST(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM );
SET WORK.DIRLNEQ_LIST;
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

//PROC PRINT DATA=WORK.DIRLNEQ_LIST; RUN;

PROC MEANS DATA = DCE.FV_T_PORTCO_TRANSACTIONS(WHERE REFERENCE_DATE<=%DATE AND TRANSACTION_TYPE<>'LN05' AND TRANSACTION_TYPE<>'LN07' AND TRANSACTION_TYPE<>'EQ06') OUT=WORK.TIRR_LNEQ;
//CLASS SECURITY_COMPANY_ID REFERENCE_DATE TRANSACTION_TYPE_NAME; 
CLASS SECURITY_COMPANY_ID REFERENCE_DATE; 
VAR  SECURITY_NAME; 
VAR  COMPANY_NAME;     
SUM CASH2(NAME=IRRNET);
RUN; 

PROC MEANS DATA =  WORK.DIRLNEQ_LIST OUT=WORK.TVALUATION_LNEQ;
CLASS SECURITY_COMPANY_ID REFERENCE_DATE; 
VAR  SECURITY_NAME;  
VAR  COMPANY_NAME;     
SUM LASTVALUATION(NAME=IRRNET);
RUN; 

DATA WORK.TIRR_LNEQ;
SET  WORK.TIRR_LNEQ(IN=T1) WORK.TVALUATION_LNEQ; 
IF IRRNET IS NULL THEN IRRNET=0; END; 

COLUMN SORT_IRR TYPE=INTEGER; 

IF T1 THEN SORT_IRR=0;  
ELSE SORT_IRR=1; 
REFERENCE_DATE=%DATE;
END; 

_OUTPUT_=IRRNET <>0 OR SORT_IRR=1;
RUN; 

PROC SORT DATA = WORK.TIRR_LNEQ; 
BY SECURITY_COMPANY_ID SECURITY_NAME COMPANY_NAME SORT_IRR REFERENCE_DATE; 
RUN; 

DATA WORK.DIRLNEQ_LIST1;
MERGE WORK.DIRLNEQ_LIST(IN=IN1) WORK.TIRR_LNEQ(IN=IN2);
By SECURITY_COMPANY_ID;
If (IN1 and IN2) then Output;
End;
RUN;
                                                                                                                                                                                    
DATA DIRLNEQ_LIST1; 
SET WORK.DIRLNEQ_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; 
TOTALVALUE= EXIT + LASTVALUATION;                                                                                                                                                                                     
RUN;  
        
//PROC PRINT DATA =  DIRLNEQ_LIST1; RUN;  
/*------------------4. Direct Mezz + Equity --------------*/

/*------------------1. Portfolio Snapshot ----------------*/ 
DATA WORK.FUND_PORTSnap(DROP = CLOSEDATE ENDDATE); 
SET WORK.FUND_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; TOTALVALUE= RETURNOFCAPITAL + LASTVALUATION; 
COLUMN SEQ TYPE=INTEGER; SEQ=0;
RUN;                                                                                                                                                                                                     

PROC MEANS DATA=WORK.FUND_PORTSnap  OUT=WORK.FUND_PORTSnap_IRR;
CLASS FUND_CLASS3;
//CURRENCY;
IRR IRRNET(NAME=IRRNET DATE=OPERATIONDATE);    
RUN; 

DATA WORK.FUND_PORTSnap_FundTot;
SET WORK.FUND_PORTSnap;
FUND_CLASS3='Total-Funds';
SEQ=1;
RUN;

PROC MEANS DATA=WORK.FUND_PORTSnap_FundTot  OUT=WORK.FUND_PORTSnap_IRR_Tot;
//CLASS CURRENCY;
VAR FUND_CLASS3;
VAR SEQ;
IRR IRRNET(NAME=IRRNET DATE=OPERATIONDATE);    
RUN;

//PROC PRINT DATA = WORK.FUND_PORTSnap_IRR_Tot; RUN;                                                                                                                                                                                                      
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.FUND_PORTSnap  OUT=WORK.FUND_PORTSnap;                                        
CLASS FUND_ID;
VAR SEQ;  
VAR FACTIVESTATUS;  
VAR FUND_CLASS3;
//VAR CURRENCY;
MIN CURRENTCOST (NAME = BOOKVALUE);  
MIN CAPITALINVESTED (NAME = CAPITALINVESTED);
MIN RETURNOFCAPITAL (NAME = REALIZED);                                                                                                                                                                                                        
MIN LASTVALUATION (NAME = MARKETVALUE);
MIN TOTALVALUE (NAME = TOTALVALUE);                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                    

//PROC PRINT DATA = WORK.FUND_PORTSnap; RUN;                                                                                                                                                                                                    

PROC MEANS DATA=WORK.FUND_PORTSnap  OUT=WORK.FUND_PORTSnap;  
CLASS FUND_CLASS3; 
//CURRENCY;
VAR SEQ;
N  FUND_ID (NAME = ITD_FUNDS);   
SUM FACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                          
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;      
                                                                                                                                                                                                    
DATA WORK.FUND_PORTSnap_FundTot1;
SET WORK.FUND_PORTSnap;
FUND_CLASS3='Total-Funds';
SEQ=1;
RUN;

PROC MEANS DATA=WORK.FUND_PORTSnap_FundTot1 OUT=WORK.FUND_PORTSnap_FundTot1; 
//CLASS CURRENCY;
VAR FUND_CLASS3; 
VAR SEQ;
SUM ITD_FUNDS (NAME = ITD_FUNDS);   
SUM ACTIVESTATUS (NAME = ACTIVESTATUS);                                                                                                                                                                                                          
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN; 

DATA WORK.FUND_PORTSnap_FundTot1;                                                                                                                                                                                                     
SET WORK.FUND_PORTSnap_FundTot1;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN;

DATA WORK.FUND_PORTSnap;                                                                                                                                                                                                     
SET WORK.FUND_PORTSnap;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN;    
                                                                                                                                                                                                  
DATA WORK.FUND_PORTSnap;
MERGE WORK.FUND_PORTSnap(IN=IN1) WORK.FUND_PORTSnap_IRR(IN=IN2);
BY FUND_CLASS3;
//CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN; 

DATA WORK.FUND_PORTSnap_FundTot1;
MERGE WORK.FUND_PORTSnap_FundTot1(IN=IN1) WORK.FUND_PORTSnap_IRR_Tot(IN=IN2);
BY FUND_CLASS3;
//CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN; 
                                                                                                                                                                                                  
//PROC PRINT DATA =WORK.FUND_PORTSnap_FundTot1; RUN;  
                                                                                                                                                                                                    
/*******Directs*******/

DATA WORK.MEZZ_PORTSnap; 
SET WORK.DIRLOAN_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; TOTALVALUE= EXIT + LASTVALUATION;  
COLUMN FUND_CLASS3 TYPE=STRING; FUND_CLASS3 = 'Direct Mezzanine';
COLUMN SEQ TYPE=INTEGER; SEQ=0;
RUN; 

DATA WORK.EQUITY_PORTSnap; 
SET WORK.DIREQUITY_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; TOTALVALUE= EXIT + LASTVALUATION; 
COLUMN FUND_CLASS3 TYPE=STRING; FUND_CLASS3 = 'Direct Equity';
COLUMN SEQ TYPE=INTEGER; SEQ=0;
RUN;                                                                                                                                                                                                      

DATA WORK.DIRECTS_PORTSnap; 
SET WORK.MEZZ_PORTSnap WORK.EQUITY_PORTSnap;  
RUN;                                                                                                                                                                                                    
     
PROC MEANS DATA=WORK.DIRECTS_PORTSnap  OUT=WORK.DIRECTS_PORTSnap_IRR;
CLASS FUND_CLASS3;
//CURRENCY; 
VAR SEQ; 
IRR IRRNET(NAME=IRRNET DATE=REFERENCE_DATE);    
RUN;  
//PROC PRINT DATA=WORK.DIRECTS_PORTSnap_IRR; RUN;

DATA WORK.DIRECTS_PORTSnap_DirTot;
SET WORK.DIRECTS_PORTSnap;
FUND_CLASS3='Total-Directs';
SEQ=1; 
RUN;

PROC MEANS DATA=WORK.DIRECTS_PORTSnap_DirTot  OUT=WORK.DIRECTS_PORTSnap_IRR_Tot;
//CLASS CURRENCY;
VAR FUND_CLASS3; 
VAR SEQ;
IRR IRRNET(NAME=IRRNET DATE=REFERENCE_DATE);    
RUN;  

PROC MEANS DATA=WORK.DIRECTS_PORTSnap  OUT=WORK.DIRECTS_PORTSnap_CNT;
CLASS COMPANY FUND_CLASS3;
//CURRENCY;                                                                                                                                                                                                         
VAR SEQ;   
MIN CMPACTIVESTATUS(NAME = CMPACTIVESTATUS);                                                                                                                                                                                                     
RUN;
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_CNT; RUN;  
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRECTS_PORTSnap_CNT  OUT=WORK.DIRECTS_PORTSnap_CNT;
CLASS FUND_CLASS3; 
//CURRENCY;
VAR SEQ;
N  COMPANY(NAME = ITD_FUNDS);   
SUM CMPACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                     
RUN;   

DATA WORK.DIRECTS_PORTSnap_DirTot1;
SET WORK.DIRECTS_PORTSnap_CNT;
FUND_CLASS3='Total-Directs';
SEQ =1;
RUN;

PROC MEANS DATA=WORK.DIRECTS_PORTSnap_DirTot1  OUT=WORK.DIRECTS_PORTSnap_CNT_Tot;
//CLASS CURRENCY;
VAR FUND_CLASS3; 
VAR SEQ;
SUM ITD_FUNDS(NAME = ITD_FUNDS);   
SUM ACTIVESTATUS(NAME = ACTIVESTATUS);     
RUN; 
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_CNT; RUN;                                                                                                                                                                                                     
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRECTS_PORTSnap  OUT=WORK.DIRECTS_PORTSnap;                                        
CLASS SECURITY_COMPANY_ID; 
//CURRENCY;
//0816 VAR FUNDS;                                                                                                                                                                                                          
VAR FUND_CLASS3; 
VAR SEQ;
MIN CURRENTCOST (NAME = BOOKVALUE);  
MIN INVESTMENT (NAME = CAPITALINVESTED);
MIN EXIT (NAME = REALIZED);                                                                                                                                                                                                        
MIN LASTVALUATION (NAME = MARKETVALUE);
MIN TOTALVALUE (NAME = TOTALVALUE);                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                    

//PROC PRINT DATA = WORK.DIRECTS_PORTSnap; RUN;                                                                                                                                                                                                    

PROC MEANS DATA= WORK.DIRECTS_PORTSnap  OUT= WORK.DIRECTS_PORTSnap;                                        
//0816 VAR FUNDS;   
CLASS FUND_CLASS3;
//CURRENCY;
VAR SEQ;
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;                                                                                                                                                                                                    

//PROC PRINT DATA = WORK.DIRLOAN_PortSNP; RUN;    

DATA WORK.DIRECTS_PORTSnap_DirTot2;
SET WORK.DIRECTS_PORTSnap;
FUND_CLASS3='Total-Directs';
SEQ = 1;
RUN;

PROC MEANS DATA=WORK.DIRECTS_PORTSnap_DirTot2  OUT=WORK.DIRECTS_PORTSnap_Tot;
//CLASS CURRENCY;
VAR FUND_CLASS3; 
VAR SEQ;
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);    
RUN;

DATA WORK.DIRECTS_PORTSnap; 
SET WORK.DIRECTS_PORTSnap;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN; 

DATA WORK.DIRECTS_PORTSnap_Tot; 
SET WORK.DIRECTS_PORTSnap_Tot;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN;
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRLOAN_PortSNP; RUN; 
                                                                                                                                                                                                    
DATA WORK.DIRECTS_PORTSnap;
MERGE WORK.DIRECTS_PORTSnap(IN=IN1) WORK.DIRECTS_PORTSnap_IRR(IN=IN2);
BY FUND_CLASS3;
//CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN; 
                                                                                                                                                                                                    
DATA WORK.DIRECTS_PORTSnap;
MERGE WORK.DIRECTS_PORTSnap(IN=IN1) WORK.DIRECTS_PORTSnap_CNT(IN=IN2);
BY FUND_CLASS3;
//CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN;   

DATA WORK.DIRECTS_PORTSnap_Tot;
MERGE WORK.DIRECTS_PORTSnap_Tot(IN=IN1) WORK.DIRECTS_PORTSnap_IRR_Tot(IN=IN2);
BY FUND_CLASS3;
//CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN; 
                                                                                                                                                                                                    
DATA WORK.DIRECTS_PORTSnap_Tot;
MERGE WORK.DIRECTS_PORTSnap_Tot(IN=IN1) WORK.DIRECTS_PORTSnap_CNT_Tot(IN=IN2);
BY FUND_CLASS3;
//CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN;   
       
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap; RUN;   
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_Tot; RUN;   

/*---------Total---------*/ 
DATA WORK.TOTAL_PORTSnap; 
SET WORK.FUND_PORTSnap WORK.DIRECTS_PORTSnap;  
RUN; 

//PROC PRINT DATA = WORK.TOTAL_PORTSnap; RUN;

PROC MEANS DATA= WORK.TOTAL_PORTSnap  OUT= WORK.TOTAL_PORTSnap; 
//CLASS CURRENCY;
SUM ITD_FUNDS (NAME = ITD_FUNDS);   
SUM ACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                        
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;   

//PROC PRINT DATA = WORK.TOTAL_PORTSnap; RUN;

DATA  WORK.TOTAL_PORTSnap; 
SET  WORK.TOTAL_PORTSnap;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;
COLUMN FUND_CLASS3 TYPE=STRING; FUND_CLASS3 = 'Grand Total'; 
COLUMN SEQ TYPE=INTEGER; SEQ=1;
RUN; 
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.TOTAL_PORTSnap; RUN;   

DATA  WORK.TOT_FUND_PORTSnap(KEEP = IRRNET OPERATIONDATE CURRENCY) ; 
SET  WORK.FUND_LIST1;   
RUN;
                                                                                                                                                                                                    
DATA  WORK.TOT_LN_PORTSnap(KEEP = IRRNET REFERENCE_DATE CURRENCY) ; 
SET  WORK.DIRLOAN_LIST1;  
RUN;
                                                                                                                                                                                                    
DATA WORK.TOT_EQ_PORTSnap(KEEP = IRRNET REFERENCE_DATE CURRENCY) ; 
SET WORK.DIREQUITY_LIST1;  
RUN;                                                                                                                                                                                                      

DATA WORK.TOT_DIR_PORTSnap; 
SET WORK.TOT_LN_PORTSnap WORK.TOT_EQ_PORTSnap;  
RUN;                                                                                                                                                                                                    

DATA  WORK.TOT_DIR_PORTSnap(RENAME = (REFERENCE_DATE=OPERATIONDATE));
SET  WORK.TOT_DIR_PORTSnap;                                                                                                                                                                                                          
RUN;

DATA WORK.TOT_PORTSnap; 
SET WORK.TOT_FUND_PORTSnap WORK.TOT_DIR_PORTSnap;  
RUN; 

DATA WORK.TOT_PORTSnap;
SET  WORK.TOT_PORTSnap; 
COLUMN FUND_CLASS3 TYPE=STRING; FUND_CLASS3 = 'Grand Total';
COLUMN SEQ TYPE=INTEGER; SEQ=1;
RUN;

//PROC PRINT DATA = WORK.TOT_PORTSnap; RUN;
        
PROC MEANS DATA=WORK.TOT_PORTSnap  OUT=WORK.TOT_PORTSnap_IRR;
//CLASS CURRENCY;
VAR FUND_CLASS3;
VAR SEQ;
IRR IRRNET(NAME=IRRNET DATE=OPERATIONDATE);    
RUN;                                                                                                                                                                                                     
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.TOT_PORTSnap; RUN; 

DATA WORK.TOT_PORTSnap;
MERGE WORK.TOTAL_PORTSnap(IN=IN1) WORK.TOT_PORTSnap_IRR(IN=IN2);
BY FUND_CLASS3;
//CURRENCY;
IF (IN1 AND IN2) THEN OUTPUT;
End;
RUN; 

//PROC PRINT DATA = WORK.TOT_PORTSnap; RUN; 
DATA WORK.FUND_PORTSnap;
SET WORK.FUND_PORTSnap WORK.FUND_PORTSnap_FundTot1;
RUN;

DATA WORK.DIRECTS_PORTSnap;
SET  WORK.DIRECTS_PORTSnap WORK.DIRECTS_PORTSnap_Tot;
RUN;
                                                                                                                                                                                                      
DATA Portfolio_Snapshot; 
SET WORK.FUND_PORTSnap WORK.DIRECTS_PORTSnap WORK.TOT_PORTSnap;  
RUN;  

//PROC PRINT DATA = Portfolio_Snapshot; RUN; 
/*------------------1. Portfolio Snapshot ----------------*/ 
/*------------------1. Portfolio Snapshot Curr ----------------*/ 
/*
DATA WORK.FUND_PORTSnap(DROP = CLOSEDATE ENDDATE); 
SET WORK.FUND_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; TOTALVALUE= RETURNOFCAPITAL + LASTVALUATION; 
COLUMN SEQ TYPE=INTEGER; SEQ=0;
RUN;                                                                                                                                                                                                     

PROC MEANS DATA=WORK.FUND_PORTSnap  OUT=WORK.FUND_PORTSnap_IRR;
CLASS FUND_CLASS3 CURRENCY;
IRR IRRNET(NAME=IRRNET DATE=OPERATIONDATE);    
RUN; 

DATA WORK.FUND_PORTSnap_FundTot;
SET WORK.FUND_PORTSnap;
FUND_CLASS3='Total-Funds';
SEQ=1;
RUN;

PROC MEANS DATA=WORK.FUND_PORTSnap_FundTot  OUT=WORK.FUND_PORTSnap_IRR_Tot;
CLASS CURRENCY;
VAR FUND_CLASS3;
VAR SEQ;
IRR IRRNET(NAME=IRRNET DATE=OPERATIONDATE);    
RUN;

//PROC PRINT DATA = WORK.FUND_PORTSnap_IRR_Tot; RUN;                                                                                                                                                                                                      
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.FUND_PORTSnap  OUT=WORK.FUND_PORTSnap;                                        
CLASS FUND_ID;
VAR SEQ;  
VAR FACTIVESTATUS;  
VAR FUND_CLASS3;
VAR CURRENCY;
MIN CURRENTCOST (NAME = BOOKVALUE);  
MIN CAPITALINVESTED (NAME = CAPITALINVESTED);
MIN RETURNOFCAPITAL (NAME = REALIZED);                                                                                                                                                                                                        
MIN LASTVALUATION (NAME = MARKETVALUE);
MIN TOTALVALUE (NAME = TOTALVALUE);                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                    

//PROC PRINT DATA = WORK.FUND_PORTSnap; RUN;                                                                                                                                                                                                    

PROC MEANS DATA=WORK.FUND_PORTSnap  OUT=WORK.FUND_PORTSnap;  
CLASS FUND_CLASS3 CURRENCY;
VAR SEQ;
N  FUND_ID (NAME = ITD_FUNDS);   
SUM FACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                          
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;      
                                                                                                                                                                                                    
DATA WORK.FUND_PORTSnap_FundTot1;
SET WORK.FUND_PORTSnap;
FUND_CLASS3='Total-Funds';
SEQ=1;
RUN;

PROC MEANS DATA=WORK.FUND_PORTSnap_FundTot1 OUT=WORK.FUND_PORTSnap_FundTot1; 
CLASS CURRENCY;
VAR FUND_CLASS3; 
VAR SEQ;
SUM ITD_FUNDS (NAME = ITD_FUNDS);   
SUM ACTIVESTATUS (NAME = ACTIVESTATUS);                                                                                                                                                                                                          
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN; 

DATA WORK.FUND_PORTSnap_FundTot1;                                                                                                                                                                                                     
SET WORK.FUND_PORTSnap_FundTot1;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN;

DATA WORK.FUND_PORTSnap;                                                                                                                                                                                                     
SET WORK.FUND_PORTSnap;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN;    
                                                                                                                                                                                                  
DATA WORK.FUND_PORTSnap;
MERGE WORK.FUND_PORTSnap(IN=IN1) WORK.FUND_PORTSnap_IRR(IN=IN2);
BY FUND_CLASS3 CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN; 

DATA WORK.FUND_PORTSnap_FundTot1;
MERGE WORK.FUND_PORTSnap_FundTot1(IN=IN1) WORK.FUND_PORTSnap_IRR_Tot(IN=IN2);
BY FUND_CLASS3 CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN; 
                                                                                                                                                                                                  
//PROC PRINT DATA =WORK.FUND_PORTSnap_FundTot1; RUN;  
                                                                                                                                                                                                    
////////////Directs///////////

DATA WORK.MEZZ_PORTSnap; 
SET WORK.DIRLOAN_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; TOTALVALUE= EXIT + LASTVALUATION;  
COLUMN FUND_CLASS3 TYPE=STRING; FUND_CLASS3 = 'Direct Mezzanine';
COLUMN SEQ TYPE=INTEGER; SEQ=0;
RUN; 

DATA WORK.EQUITY_PORTSnap; 
SET WORK.DIREQUITY_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; TOTALVALUE= EXIT + LASTVALUATION; 
COLUMN FUND_CLASS3 TYPE=STRING; FUND_CLASS3 = 'Direct Equity';
COLUMN SEQ TYPE=INTEGER; SEQ=0;
RUN;                                                                                                                                                                                                      

DATA WORK.DIRECTS_PORTSnap; 
SET WORK.MEZZ_PORTSnap WORK.EQUITY_PORTSnap;  
RUN;                                                                                                                                                                                                    
     
PROC MEANS DATA=WORK.DIRECTS_PORTSnap  OUT=WORK.DIRECTS_PORTSnap_IRR;
CLASS FUND_CLASS3 CURRENCY; 
VAR SEQ; 
IRR IRRNET(NAME=IRRNET DATE=REFERENCE_DATE);    
RUN;  
//PROC PRINT DATA=WORK.DIRECTS_PORTSnap_IRR; RUN;

DATA WORK.DIRECTS_PORTSnap_DirTot;
SET WORK.DIRECTS_PORTSnap;
FUND_CLASS3='Total-Directs';
SEQ=1; 
RUN;

PROC MEANS DATA=WORK.DIRECTS_PORTSnap_DirTot  OUT=WORK.DIRECTS_PORTSnap_IRR_Tot;
CLASS CURRENCY;
VAR FUND_CLASS3; 
VAR SEQ;
IRR IRRNET(NAME=IRRNET DATE=REFERENCE_DATE);    
RUN;  

PROC MEANS DATA=WORK.DIRECTS_PORTSnap  OUT=WORK.DIRECTS_PORTSnap_CNT;
CLASS COMPANY FUND_CLASS3 CURRENCY;                                                                                                                                                                                                         
VAR SEQ;   
MIN CMPACTIVESTATUS(NAME = CMPACTIVESTATUS);                                                                                                                                                                                                     
RUN;
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_CNT; RUN;  
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRECTS_PORTSnap_CNT  OUT=WORK.DIRECTS_PORTSnap_CNT;
CLASS FUND_CLASS3 CURRENCY;
VAR SEQ;
N  COMPANY(NAME = ITD_FUNDS);   
SUM CMPACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                     
RUN;   

DATA WORK.DIRECTS_PORTSnap_DirTot1;
SET WORK.DIRECTS_PORTSnap_CNT;
FUND_CLASS3='Total-Directs';
SEQ =1;
RUN;

PROC MEANS DATA=WORK.DIRECTS_PORTSnap_DirTot1  OUT=WORK.DIRECTS_PORTSnap_CNT_Tot;
CLASS CURRENCY;
VAR FUND_CLASS3; 
VAR SEQ;
SUM ITD_FUNDS(NAME = ITD_FUNDS);   
SUM ACTIVESTATUS(NAME = ACTIVESTATUS);     
RUN; 
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_CNT; RUN;                                                                                                                                                                                                     
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRECTS_PORTSnap  OUT=WORK.DIRECTS_PORTSnap;                                        
CLASS SECURITY_COMPANY_ID CURRENCY;
//0816 VAR FUNDS;                                                                                                                                                                                                          
VAR FUND_CLASS3; 
VAR SEQ;
MIN CURRENTCOST (NAME = BOOKVALUE);  
MIN INVESTMENT (NAME = CAPITALINVESTED);
MIN EXIT (NAME = REALIZED);                                                                                                                                                                                                        
MIN LASTVALUATION (NAME = MARKETVALUE);
MIN TOTALVALUE (NAME = TOTALVALUE);                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                    

//PROC PRINT DATA = WORK.DIRECTS_PORTSnap; RUN;                                                                                                                                                                                                    

PROC MEANS DATA= WORK.DIRECTS_PORTSnap  OUT= WORK.DIRECTS_PORTSnap;                                        
//0816 VAR FUNDS;   
CLASS FUND_CLASS3 CURRENCY;
VAR SEQ;
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;                                                                                                                                                                                                    

//PROC PRINT DATA = WORK.DIRLOAN_PortSNP; RUN;    

DATA WORK.DIRECTS_PORTSnap_DirTot2;
SET WORK.DIRECTS_PORTSnap;
FUND_CLASS3='Total-Directs';
SEQ = 1;
RUN;

PROC MEANS DATA=WORK.DIRECTS_PORTSnap_DirTot2  OUT=WORK.DIRECTS_PORTSnap_Tot;
CLASS CURRENCY;
VAR FUND_CLASS3; 
VAR SEQ;
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);    
RUN;

DATA WORK.DIRECTS_PORTSnap; 
SET WORK.DIRECTS_PORTSnap;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN; 

DATA WORK.DIRECTS_PORTSnap_Tot; 
SET WORK.DIRECTS_PORTSnap_Tot;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN;
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRLOAN_PortSNP; RUN; 
                                                                                                                                                                                                    
DATA WORK.DIRECTS_PORTSnap;
MERGE WORK.DIRECTS_PORTSnap(IN=IN1) WORK.DIRECTS_PORTSnap_IRR(IN=IN2);
BY FUND_CLASS3 CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN; 
                                                                                                                                                                                                    
DATA WORK.DIRECTS_PORTSnap;
MERGE WORK.DIRECTS_PORTSnap(IN=IN1) WORK.DIRECTS_PORTSnap_CNT(IN=IN2);
BY FUND_CLASS3 CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN;   

DATA WORK.DIRECTS_PORTSnap_Tot;
MERGE WORK.DIRECTS_PORTSnap_Tot(IN=IN1) WORK.DIRECTS_PORTSnap_IRR_Tot(IN=IN2);
BY FUND_CLASS3 CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN; 
                                                                                                                                                                                                    
DATA WORK.DIRECTS_PORTSnap_Tot;
MERGE WORK.DIRECTS_PORTSnap_Tot(IN=IN1) WORK.DIRECTS_PORTSnap_CNT_Tot(IN=IN2);
BY FUND_CLASS3 CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN;   
       
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap; RUN;   
//PROC PRINT DATA = WORK.DIRECTS_PORTSnap_Tot; RUN;   

//////////Total/////////// 
DATA WORK.TOTAL_PORTSnap; 
SET WORK.FUND_PORTSnap WORK.DIRECTS_PORTSnap;  
RUN; 

//PROC PRINT DATA = WORK.TOTAL_PORTSnap; RUN;

PROC MEANS DATA= WORK.TOTAL_PORTSnap  OUT= WORK.TOTAL_PORTSnap; 
CLASS CURRENCY;
SUM ITD_FUNDS (NAME = ITD_FUNDS);   
SUM ACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                        
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;   

//PROC PRINT DATA = WORK.TOTAL_PORTSnap; RUN;

DATA  WORK.TOTAL_PORTSnap; 
SET  WORK.TOTAL_PORTSnap;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;
COLUMN FUND_CLASS3 TYPE=STRING; FUND_CLASS3 = 'Grand Total'; 
COLUMN SEQ TYPE=INTEGER; SEQ=1;
RUN; 
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.TOTAL_PORTSnap; RUN;   

DATA  WORK.TOT_FUND_PORTSnap(KEEP = IRRNET OPERATIONDATE CURRENCY) ; 
SET  WORK.FUND_LIST1;   
RUN;
                                                                                                                                                                                                    
DATA  WORK.TOT_LN_PORTSnap(KEEP = IRRNET REFERENCE_DATE CURRENCY) ; 
SET  WORK.DIRLOAN_LIST1;  
RUN;
                                                                                                                                                                                                    
DATA WORK.TOT_EQ_PORTSnap(KEEP = IRRNET REFERENCE_DATE CURRENCY) ; 
SET WORK.DIREQUITY_LIST1;  
RUN;                                                                                                                                                                                                      

DATA WORK.TOT_DIR_PORTSnap; 
SET WORK.TOT_LN_PORTSnap WORK.TOT_EQ_PORTSnap;  
RUN;                                                                                                                                                                                                    

DATA  WORK.TOT_DIR_PORTSnap(RENAME = (REFERENCE_DATE=OPERATIONDATE));
SET  WORK.TOT_DIR_PORTSnap;                                                                                                                                                                                                          
RUN;

DATA WORK.TOT_PORTSnap; 
SET WORK.TOT_FUND_PORTSnap WORK.TOT_DIR_PORTSnap;  
RUN; 

DATA WORK.TOT_PORTSnap;
SET  WORK.TOT_PORTSnap; 
COLUMN FUND_CLASS3 TYPE=STRING; FUND_CLASS3 = 'Grand Total';
COLUMN SEQ TYPE=INTEGER; SEQ=1;
RUN;

//PROC PRINT DATA = WORK.TOT_PORTSnap; RUN;
        
PROC MEANS DATA=WORK.TOT_PORTSnap  OUT=WORK.TOT_PORTSnap_IRR;
CLASS CURRENCY;
VAR FUND_CLASS3;
VAR SEQ;
IRR IRRNET(NAME=IRRNET DATE=OPERATIONDATE);    
RUN;                                                                                                                                                                                                     
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.TOT_PORTSnap; RUN; 

DATA WORK.TOT_PORTSnap;
MERGE WORK.TOTAL_PORTSnap(IN=IN1) WORK.TOT_PORTSnap_IRR(IN=IN2);
BY FUND_CLASS3 CURRENCY;
IF (IN1 AND IN2) THEN OUTPUT;
End;
RUN; 

//PROC PRINT DATA = WORK.TOT_PORTSnap; RUN; 
DATA WORK.FUND_PORTSnap;
SET WORK.FUND_PORTSnap WORK.FUND_PORTSnap_FundTot1;
RUN;

DATA WORK.DIRECTS_PORTSnap;
SET  WORK.DIRECTS_PORTSnap WORK.DIRECTS_PORTSnap_Tot;
RUN;
                                                                                                                                                                                                      
DATA Portfolio_Snapshot; 
SET WORK.FUND_PORTSnap WORK.DIRECTS_PORTSnap WORK.TOT_PORTSnap;  
RUN;  

//PROC PRINT DATA = Portfolio_Snapshot; RUN; 
/*------------------1. Portfolio Snapshot Curr ----------------*/ 
/*------------------2. Direct Mezz vs. Mezz Funds---------*/  
//4;Private Debt Fund
                                                                                                                                                                                                            
DATA WORK.FUND_MEZZ(DROP = CLOSEDATE ENDDATE); 
//SET WORK.FUND_LIST1(WHERE PORTFOLIO = 'PDE - Private Debt Funds');  
SET WORK.FUND_LIST1(WHERE Fund_Class3 = 'Private Debt Fund');  
COLUMN TOTALVALUE TYPE=FLOAT; 
TOTALVALUE= RETURNOFCAPITAL+ LASTVALUATION;                                                                                                                                                                                     
RUN;  

//PROC PRINT DATA = WORK.FUND_MEZZ; RUN;                                                                                                                                                                                                       

DATA WORK.FUND_MEZZ;
SET  WORK.FUND_MEZZ; 
COLUMN FUND_DIRECTS TYPE=STRING; FUND_DIRECTS = 'Mezzanine Funds';
COLUMN DIFF TYPE=STRING; DIFF = 'Difference in Returns';                                                                                                                                                                                                        
RUN;     
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.FUND_MEZZ  OUT=WORK.FUND_MEZZ_IRR;
CLASS CURRENCY;
VAR FUND_DIRECTS;                                                                                                                                                                                                         
IRR IRRNET(NAME=IRRNET DATE=OPERATIONDATE);    
RUN;      

PROC MEANS DATA=WORK.FUND_MEZZ  OUT=WORK.FUND_MEZZ;                                        
//CLASS PORTFOLIO FUND_ID;
CLASS FUND_CLASS3 CURRENCY FUND_ID;
VAR FUND_DIRECTS;   
VAR DIFF;
VAR FACTIVESTATUS;                                                                                                                                                                                                         
MIN CURRENTCOST (NAME = BOOKVALUE);  
MIN CAPITALINVESTED (NAME = CAPITALINVESTED);
MIN RETURNOFCAPITAL (NAME = REALIZED);                                                                                                                                                                                                        
MIN LASTVALUATION (NAME = MARKETVALUE);
MIN TOTALVALUE (NAME = TOTALVALUE);                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                    

//PROC PRINT DATA = WORK.FUND_MEZZ; RUN;                                                                                                                                                                                                              
                                                                                                                                                                                                            
PROC MEANS DATA=WORK.FUND_MEZZ  OUT=WORK.FUND_MEZZ;
CLASS CURRENCY;
VAR FUND_DIRECTS;  
VAR DIFF;  
N  FUND_ID (NAME = ITD_FUNDS);   
SUM FACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                        
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;                                                                                                                                                                                                    

//PROC PRINT DATA = WORK.FUND_MEZZ; RUN;                                                                                                                                                                                                            
                                                                                                                                                                                                            
DATA WORK.FUND_MEZZ; 
SET WORK.FUND_MEZZ;  
COLUMN MOC TYPE=FLOAT; 
MOC = TOTALVALUE/CAPITALINVESTED;                                                                                                                                                                                     
RUN;    
                                                                                                                                                                                                    
DATA WORK.FUND_MEZZ;
MERGE WORK.FUND_MEZZ(IN=IN1) WORK.FUND_MEZZ_IRR(IN=IN2);
BY FUND_DIRECTS CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN;  
//PROC PRINT DATA = WORK.FUND_MEZZ; RUN;                                                                                                                                                                                                      

/*-------------Direct Mezz --------------*/
DATA WORK.DIRLOAN_MEZZ; 
SET WORK.DIRLOAN_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; TOTALVALUE= EXIT + LASTVALUATION;                                                                                                                                                                                     
RUN; 
                                                                                                                                                                                                    
DATA WORK.DIRLOAN_MEZZ;
SET  WORK.DIRLOAN_MEZZ; 
COLUMN FUND_DIRECTS TYPE=STRING; FUND_DIRECTS = 'Direct Mezzanine';
COLUMN DIFF TYPE=STRING;  DIFF = 'Difference in Returns';                                                                                                                                                                                                           
RUN;     
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRLOAN_MEZZ  OUT=WORK.DIRLOAN_MEZZ_IRR;
CLASS CURRENCY;
VAR FUND_DIRECTS;  
IRR IRRNET(NAME=IRRNET DATE=REFERENCE_DATE); 
RUN;      
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRLOAN_MEZZ  OUT=WORK.DIRLOAN_MEZZ_CNT;
CLASS CURRENCY COMPANY;                                                                                                                                                                                                         
VAR FUND_DIRECTS;                                                                                                                                                                                                         
MIN CMPACTIVESTATUS(NAME = CMPACTIVESTATUS);                                                                                                                                                                                                     
RUN;
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRLOAN_MEZZ_CNT; RUN;  
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRLOAN_MEZZ_CNT  OUT=WORK.DIRLOAN_MEZZ_CNT;
CLASS CURRENCY;
VAR FUND_DIRECTS;                                                                                                                                                                                                        
N  COMPANY(NAME = ITD_FUNDS);   
SUM CMPACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                     
RUN;       
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRLOAN_MEZZ_CNT; RUN;  
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRLOAN_MEZZ  OUT=WORK.DIRLOAN_MEZZ;                                        
CLASS CURRENCY SECURITY_COMPANY_ID;
VAR FUND_DIRECTS;  
VAR DIFF;                                                                                                                                                                                                        
MIN CURRENTCOST (NAME = BOOKVALUE);  
MIN INVESTMENT (NAME = CAPITALINVESTED);
MIN EXIT (NAME = REALIZED);                                                                                                                                                                                                        
MIN LASTVALUATION (NAME = MARKETVALUE);
MIN TOTALVALUE (NAME = TOTALVALUE);                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                    

PROC MEANS DATA= WORK.DIRLOAN_MEZZ  OUT= WORK.DIRLOAN_MEZZ; 
CLASS CURRENCY;
VAR FUND_DIRECTS;    
VAR DIFF;                                                                                                                                                                                                        
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;                                                                                                                                                                                                    

DATA WORK.DIRLOAN_MEZZ; 
SET WORK.DIRLOAN_MEZZ;  
COLUMN MOC TYPE=FLOAT; 
MOC = TOTALVALUE/CAPITALINVESTED;
RUN;    
                                                                                                                                                                                                    
DATA WORK.DIRLOAN_MEZZ;
MERGE WORK.DIRLOAN_MEZZ(IN=IN1) WORK.DIRLOAN_MEZZ_IRR(IN=IN2);
BY FUND_DIRECTS CURRENCY;
If (IN1 and IN2) then Output;
End;
RUN;   
                                                                                                                                                                                                    
DATA WORK.DIRLOAN_MEZZ;
MERGE WORK.DIRLOAN_MEZZ(IN=IN1) WORK.DIRLOAN_MEZZ_CNT(IN=IN2);
BY FUND_DIRECTS CURRENCY;
IF (IN1 AND IN2) THEN OUTPUT;
END;
RUN; 

//PROC PRINT DATA=WORK.DIRLOAN_MEZZ; RUN;
/*------------------2. Direct Mezz vs. Mezz Funds---------*/ 
/*------------------3. Direct Mezz+Equity vs. Mezz Funds--*/ 

DATA WORK.DIRLNEQ_MEZZ; 
SET WORK.DIRLNEQ_LIST1;  
COLUMN TOTALVALUE TYPE=FLOAT; TOTALVALUE= EXIT + LASTVALUATION;                                                                                                                                                                                     
RUN; 
                                                                                                                                                                                                    
DATA WORK.DIRLNEQ_MEZZ;
SET  WORK.DIRLNEQ_MEZZ; 
COLUMN FUND_DIRECTS TYPE=STRING; FUND_DIRECTS = 'Direct Mezzanine + Equity';
COLUMN DIFF TYPE=STRING; DIFF = 'Difference in Returns';                                                                                                                                                                                                           
RUN;     
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRLNEQ_MEZZ  OUT=WORK.DIRLNEQ_MEZZ_IRR;
CLASS CURRENCY;
VAR FUND_DIRECTS;  
IRR IRRNET(NAME=IRRNET DATE=REFERENCE_DATE); 
RUN;      
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRLNEQ_MEZZ  OUT=WORK.DIRLNEQ_MEZZ_CNT;
CLASS CURRENCY COMPANY;                                                                                                                                                                                                         
VAR FUND_DIRECTS;                                                                                                                                                                                                         
MIN CMPACTIVESTATUS(NAME = CMPACTIVESTATUS);                                                                                                                                                                                                     
RUN;
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRLOAN_MEZZ_CNT; RUN;  
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRLNEQ_MEZZ_CNT  OUT=WORK.DIRLNEQ_MEZZ_CNT;
CLASS CURRENCY;
VAR FUND_DIRECTS;                                                                                                                                                                                                        
N  COMPANY(NAME = ITD_FUNDS);   
SUM CMPACTIVESTATUS(NAME = ACTIVESTATUS);                                                                                                                                                                                                     
RUN;       
                                                                                                                                                                                                    
//PROC PRINT DATA = WORK.DIRLOAN_MEZZ_CNT; RUN;  
                                                                                                                                                                                                    
PROC MEANS DATA=WORK.DIRLNEQ_MEZZ  OUT=WORK.DIRLNEQ_MEZZ;                                        
CLASS CURRENCY SECURITY_COMPANY_ID;
VAR FUND_DIRECTS;  
VAR DIFF;                                                                                                                                                                                                        
MIN CURRENTCOST (NAME = BOOKVALUE);  
MIN INVESTMENT (NAME = CAPITALINVESTED);
MIN EXIT (NAME = REALIZED);                                                                                                                                                                                                        
MIN LASTVALUATION (NAME = MARKETVALUE);
MIN TOTALVALUE (NAME = TOTALVALUE);                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                    

PROC MEANS DATA= WORK.DIRLNEQ_MEZZ  OUT= WORK.DIRLNEQ_MEZZ;   
CLASS CURRENCY;
VAR FUND_DIRECTS;    
VAR DIFF;                                                                                                                                                                                                        
SUM BOOKVALUE (NAME = BOOKVALUE);  
SUM CAPITALINVESTED (NAME = CAPITALINVESTED);
SUM REALIZED (NAME = REALIZED);                                                                                                                                                                                                        
SUM MARKETVALUE (NAME = MARKETVALUE);
SUM TOTALVALUE (NAME = TOTALVALUE);   
RUN;                                                                                                                                                                                                    

DATA WORK.DIRLNEQ_MEZZ; 
SET WORK.DIRLNEQ_MEZZ;  
COLUMN MOC TYPE=FLOAT; MOC = TOTALVALUE/CAPITALINVESTED;
RUN;    
                                                                                                                                                                                                    
DATA WORK.DIRLNEQ_MEZZ;
MERGE WORK.DIRLNEQ_MEZZ(IN=IN1) WORK.DIRLNEQ_MEZZ_IRR(IN=IN2);
BY FUND_DIRECTS CURRENCY;
IF (IN1 AND IN2) THEN OUTPUT;
End;
RUN;   
                                                                                                                                                                                                    
DATA WORK.DIRLNEQ_MEZZ;
MERGE WORK.DIRLNEQ_MEZZ(IN=IN1) WORK.DIRLNEQ_MEZZ_CNT(IN=IN2);
BY FUND_DIRECTS CURRENCY;
IF (IN1 AND IN2) THEN OUTPUT;
End;
RUN;        

//PROC PRINT DATA= WORK.DIRLNEQ_MEZZ; RUN;

/*-------------Difference --------------*/ 
DATA WORK.DIRLNEQ_DIFF (KEEP = DIFF MOC IRRNET CURRENCY); 
SET WORK.DIRLNEQ_MEZZ;
RUN;                                                                                                                                                                                                         
                                                                                                                                                                                                    
DATA WORK.FUND_MEZZ_DIFF (KEEP = DIFF MOC IRRNET CURRENCY); 
SET WORK.FUND_MEZZ;
RUN;                                                                                                                                                                                                         
                                                                                                                                                                                                    
DATA WORK.FUND_MEZZ_DIFF (RENAME = (MOC=MOC_F IRRNET=IRRNET_F)); 
SET WORK.FUND_MEZZ_DIFF;
RUN;                                                                                                                                                                                                         
                                                                                                                                                                                                  
DATA WORK.DIFF_LNEQ;
MERGE WORK.DIRLNEQ_DIFF(IN=IN2) WORK.FUND_MEZZ_DIFF(IN=IN1) ;
BY DIFF CURRENCY; 
IF (IN1 OR IN2) THEN OUTPUT;
End;                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                    

DATA WORK.DIFF_LNEQ(RENAME = (DIFF=FUND_DIRECTS));
SET WORK.DIFF_LNEQ;  
MOC = MOC-MOC_F;
IRRNET = IRRNET-IRRNET_F;                                                                                                                                                                                                       
RUN;                                                                                                                                                                                                         

DATA WORK.DIFF_LNEQ(DROP = MOC_F IRRNET_F);
SET WORK.DIFF_LNEQ;  
RUN;                                                                                                                                                                                                         

//PROC PRINT DATA = WORK.DIFF_MEZZ; RUN;  
                                                                                                                                                                                                            
DATA LNEQ_DIRvsFUND; 
SET WORK.DIRLNEQ_MEZZ WORK.FUND_MEZZ WORK.DIFF_LNEQ;  
RUN;  

//PROC PRINT DATA = LNEQ_DIRvsFUND; RUN;  

/*------------------3. Direct Mezz+Equity vs. Mezz Funds--*/

/*-------------Difference --------------*/ 
DATA WORK.DIR_MEZZ_DIFF (KEEP = DIFF MOC IRRNET CURRENCY); 
SET WORK.DIRLOAN_MEZZ;
RUN;                                                                                                                                                                                                         
                                                                                                                                                                                         
DATA WORK.DIFF_MEZZ;
MERGE WORK.DIR_MEZZ_DIFF(IN=IN2) WORK.FUND_MEZZ_DIFF(IN=IN1) ;
BY DIFF CURRENCY; 
IF (IN1 OR IN2) THEN OUTPUT;
End;                                                                                                                                                                                                        
RUN;                                                                                                                                                                                                    

DATA WORK.DIFF_MEZZ (RENAME = (DIFF=FUND_DIRECTS));
SET WORK.DIFF_MEZZ;  
MOC = MOC-MOC_F;
IRRNET = IRRNET-IRRNET_F;                                                                                                                                                                                                       
RUN;                                                                                                                                                                                                         

DATA WORK.DIFF_MEZZ (DROP = MOC_F IRRNET_F);
SET WORK.DIFF_MEZZ;  
RUN;                                                                                                                                                                                                         

//PROC PRINT DATA = WORK.DIFF_MEZZ; RUN;  
                                                                                                                                                                                                            
DATA MEZZ_DIRvsFUND; 
SET WORK.DIRLOAN_MEZZ WORK.FUND_MEZZ WORK.DIFF_MEZZ;  
RUN;  

//PROC PRINT DATA =  MEZZ_DIRvsFUND; RUN;                                                                                                                                                                                                              

/*------------------3. Direct Mezz+Equity vs. Mezz Funds--*/
/*------------------8. Commitments & Investments ---------*/

DATA WORK.COMMITMENT_PY(KEEP = FUND_ID INVESTORNAME FUNDNAME FUND_CLASS3 CURRENCY) ;
SET WORK.FUNDMAST(WHERE CLOSEDATE<=DATEADD("YEAR", -1, %DATE) AND COMMITMENT_YEAR = YEAR(%DATE)-1);
RUN; 

//PROC PRINT DATA = WORK.COMMITMENT_PY; RUN;

//%LET DATE = YEARENDDATE(DATEADD("YEAR", -1, %DATE));
%LET DATE = DATEADD("YEAR", -1, %DATE);

DATA WORK.CE_COMM_PY(KEEP = FUND_ID INVESTORNAME COMMITMENT);
SET FCE.FUNDINVESTORPOSITIONS (WHERE POSITION_DATE = %DATE) ;
RUN;

DATA WORK.COMMITMENT_PY;
MERGE WORK.COMMITMENT_PY(IN=IN1) WORK.CE_COMM_PY(IN=IN2);
BY FUND_ID INVESTORNAME;
If (IN1 and IN2) then Output;
End;
RUN;  

PROC MEANS DATA= WORK.COMMITMENT_PY  OUT=COMMITMENT_PY;  
CLASS FUND_ID;
VAR FUNDNAME;
VAR FUND_CLASS3;    
VAR CURRENCY;                                                                                                                                                                                                        
SUM COMMITMENT (NAME = COMMITMENT);  
RUN;

//PROC PRINT DATA = COMMITMENT_PY; RUN;

%LET DATE = %ORIG_DATE;
//PROC PRINT; PUT %DATE; RUN;

DATA WORK.COMMITMENT_CY(KEEP = FUND_ID INVESTORNAME FUNDNAME FUND_CLASS3 CURRENCY);
SET WORK.FUNDMAST(WHERE COMMITMENT_YEAR = YEAR(%DATE));
RUN; 

//PROC PRINT DATA = WORK.COMMITMENT_CY; RUN;

DATA WORK.CE_COMM_CY(KEEP = FUND_ID INVESTORNAME COMMITMENT);
SET FCE.FUNDINVESTORPOSITIONS (WHERE POSITION_DATE = %DATE) ;
RUN;

DATA WORK.COMMITMENT_CY;
MERGE WORK.COMMITMENT_CY(IN=IN1) WORK.CE_COMM_CY(IN=IN2);
BY FUND_ID INVESTORNAME;
If (IN1 and IN2) then Output;
End;
RUN;  

PROC MEANS DATA= WORK.COMMITMENT_CY  OUT=COMMITMENT_CY;  
CLASS FUND_ID;
VAR FUNDNAME;
VAR FUND_CLASS3;    
VAR CURRENCY;                                                                                                                                                                                                        
SUM COMMITMENT (NAME = COMMITMENT);  
RUN;

//PROC PRINT DATA = COMMITMENT_CY; RUN;

/*----Investments------*/      

DATA WORK.DIRDIST(KEEP = COMPANY_NAME SECURITY_COMPANY_ID SECURITY_NAME REFERENCE_DATE CASH2 INVEST_YEAR CONTRIBUTE DISTRIBUTE INVEST_TYPE);
SET DCE.FV_T_PORTCO_TRANSACTIONS(WHERE REFERENCE_DATE<= %DATE AND TRANSACTION_TYPE<>'LN05' AND TRANSACTION_TYPE<>'LN07' AND TRANSACTION_TYPE<>'EQ06' AND CASH2 IS NOT NULL AND CASH2 <>0);
COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(REFERENCE_DATE);
COLUMN CONTRIBUTE TYPE=FLOAT; IF CASH2<=0 THEN CONTRIBUTE=CASH2*(-1); END;  
COLUMN DISTRIBUTE TYPE=FLOAT; IF CASH2>0 THEN  DISTRIBUTE=CASH2; END;
COLUMN INVEST_TYPE TYPE=STRING; INVEST_TYPE='Directs';
RUN;

//PROC PRINT DATA = WORK.DIRDIST; RUN;

DATA WORK.DIRECTSLIST;
SET  WORK.DIRLOAN_LIST WORK.DIREQUITY_LIST;
RUN; 

DATA WORK.DIRDIST;
MERGE WORK.DIRECTSLIST(IN=IN1) WORK.DIRDIST(IN=IN2);
BY SECURITY_COMPANY_ID;
IF (IN1 AND IN2) THEN OUTPUT;
END;
RUN;

PROC MEANS DATA =WORK.DIRDIST(WHERE REFERENCE_DATE<= DATEADD("YEAR", -1, %DATE) AND INVEST_YEAR = YEAR(%DATE) - 1 AND CONTRIBUTE IS NOT NULL AND CONTRIBUTE>0) OUT=WORK.INVESTMENT_PY;
CLASS SECURITY_COMPANY_ID; 
VAR SECURITY; 
VAR COMPANY_NAME;
VAR CURRENCY;
//VAR OP_YEAR;
SUM CONTRIBUTE(NAME=InvestedCapital);
RUN;

DATA INVESTMENT_PY;
SET WORK.INVESTMENT_PY;
RUN;

PROC MEANS DATA =WORK.DIRDIST(WHERE INVEST_YEAR = YEAR(%DATE) AND CONTRIBUTE IS NOT NULL AND CONTRIBUTE>0) OUT=WORK.INVESTMENT_CY;
CLASS SECURITY_COMPANY_ID; 
VAR SECURITY; 
VAR COMPANY_NAME;
VAR CURRENCY;
//VAR OP_YEAR;
SUM CONTRIBUTE(NAME=InvestedCapital);
RUN;

DATA INVESTMENT_CY;
SET WORK.INVESTMENT_CY;
RUN;

/*------------------8. Commitments & Investments ---------*/
/*------------------9. Directs Contibution Graph----------*/ 
PROC MEANS DATA=WORK.DIRDIST OUT=DIR_CASHFLOW;                                        
CLASS CURRENCY INVEST_YEAR;
VAR INVEST_TYPE;
SUM CONTRIBUTE (NAME = CASH_INVESTED); 
SUM DISTRIBUTE (NAME = CASH_RETURNED); 
RUN; 
//PROC PRINT DATA =DIR_CASHFLOW; RUN;

/*------------------9. Directs Contibution Graph----------*/ 
/*-----------------11. Contributions and Distributions----*/
PROC MEANS DATA=WORK.FUND_CF_YEAR OUT=FUND_CASHFLOW;
CLASS CURRENCY INVEST_YEAR; 
VAR INVEST_TYPE;
SUM CAPITALINVESTED(NAME = CASH_INVESTED);
SUM RETURNOFCAPITAL(NAME = CASH_RETURNED);
RUN; 

DATA WORK.ALLPORT_CASHFLOW;
SET DIR_CASHFLOW FUND_CASHFLOW;
RUN;

PROC MEANS DATA=WORK.ALLPORT_CASHFLOW OUT=WORK.ALLPORT_CASHFLOW;
CLASS CURRENCY INVEST_YEAR INVEST_TYPE  ;
//VAR INV_TYPE;
SUM CASH_INVESTED(NAME = CASH_INVESTED);
SUM CASH_RETURNED(NAME = CASH_RETURNED);
RUN; 

DATA ALLPORT_CASHFLOW;
SET WORK.ALLPORT_CASHFLOW;
RUN;

//PROC PRINT DATA = ALLPORT_CASHFLOW; RUN;

/*-----------------11. Contributions and Distributions----*/

/*-----------------10. YTD Production vs. Prior Year------*/  

DATA WORK.DIRECTS_YTD_PY;
SET WORK.INVESTMENT_PY;
COLUMN CATEGORY TYPE=STRING; CATEGORY = 'Direct Private Debt & Equity';
RUN;

PROC MEANS DATA= WORK.DIRECTS_YTD_PY  OUT=WORK.DIRECTS_YTD_PY;  
CLASS CATEGORY CURRENCY;
SUM InvestedCapital (NAME = PYTD_CALLED);  
RUN;
//PROC PRINT DATA=WORK.DIRECTS_YTD_PY; RUN;

DATA WORK.DIRECTS_YTD_CY;
SET WORK.INVESTMENT_CY;
COLUMN CATEGORY TYPE=STRING; CATEGORY = 'Direct Private Debt & Equity';
RUN;

PROC MEANS DATA= WORK.DIRECTS_YTD_CY  OUT=WORK.DIRECTS_YTD_CY;  
CLASS CATEGORY CURRENCY;
SUM InvestedCapital (NAME = YTD_CALLED);  
RUN;
//PROC PRINT DATA=WORK.DIRECTS_YTD_CY; RUN;

DATA WORK.DIRECTS_YTD;
MERGE WORK.DIRECTS_YTD_CY(IN=IN1) WORK.DIRECTS_YTD_PY(IN=IN2);
BY CATEGORY CURRENCY;
IF (IN1 OR IN2) THEN OUTPUT;
END;
RUN;

DATA WORK.COMMIT_YTD_PY;
SET WORK.COMMITMENT_PY;
COLUMN CATEGORY TYPE=STRING; CATEGORY = 'Funds - Commitments';
RUN;

PROC MEANS DATA= WORK.COMMIT_YTD_PY  OUT=WORK.COMMIT_YTD_PY;  
CLASS CATEGORY CURRENCY;
SUM COMMITMENT (NAME = PYTD_CALLED);  
RUN;

DATA WORK.COMMIT_YTD_CY;
SET WORK.COMMITMENT_CY;
COLUMN CATEGORY TYPE=STRING; CATEGORY = 'Funds - Commitments';
RUN;

PROC MEANS DATA= WORK.COMMIT_YTD_CY  OUT=WORK.COMMIT_YTD_CY;  
CLASS CATEGORY CURRENCY;
SUM COMMITMENT (NAME = YTD_CALLED);  
RUN;

DATA WORK.COMMIT_YTD;
MERGE WORK.COMMIT_YTD_CY(IN=IN1) WORK.COMMIT_YTD_PY(IN=IN2);
BY CATEGORY CURRENCY;
IF (IN1 OR IN2) THEN OUTPUT;
END;
RUN;

DATA WORK.CAPINV_YTD_PY;
SET WORK.FUND_CF_YEAR(WHERE CLOSEDATE<=DATEADD("YEAR", -1, %DATE) AND INVEST_YEAR = YEAR(%DATE)-1);
COLUMN CATEGORY TYPE=STRING; CATEGORY = 'Funds - Capital Invested';
RUN;

PROC MEANS DATA= WORK.CAPINV_YTD_PY  OUT=WORK.CAPINV_YTD_PY;  
CLASS CATEGORY CURRENCY;
SUM CAPITALINVESTED(NAME = PYTD_CALLED);  
RUN;

//PROC PRINT DATA=WORK.CAPINV_YTD_PY; RUN;

DATA WORK.CAPINV_YTD_CY;
SET WORK.FUND_CF_YEAR(WHERE CLOSEDATE<= %DATE AND INVEST_YEAR = YEAR(%DATE));
COLUMN CATEGORY TYPE=STRING; CATEGORY = 'Funds - Capital Invested';
RUN;

//PROC PRINT DATA= WORK.FUND_CF_YEAR; RUN;
//PROC PRINT DATA=WORK.CAPINV_YTD_CY; RUN;

PROC MEANS DATA= WORK.CAPINV_YTD_CY  OUT=WORK.CAPINV_YTD_CY;  
CLASS CATEGORY CURRENCY;
SUM CAPITALINVESTED(NAME = YTD_CALLED);  
RUN;

DATA WORK.CAPINV_YTD;
MERGE WORK.CAPINV_YTD_CY(IN=IN1) WORK.CAPINV_YTD_PY(IN=IN2);
BY CATEGORY CURRENCY;
IF (IN1 OR IN2) THEN OUTPUT;
END;
RUN;

DATA YTD_PRODvsPLAN;   
SET WORK.DIRECTS_YTD WORK.COMMIT_YTD WORK.CAPINV_YTD;   
RUN;
//PROC PRINT DATA=YTD_PRODvsPLAN; RUN;

/*-----------------10. YTD Production vs. Prior Year------*/ 

/*-----------------12. Book Value and Market Value--------*/ 

DATA WORK.DIRECTMAST;
SET  WORK.INVSTINS  WORK.INVSTINS_EQ;
RUN;

%LET DATE = "31122011"d; 

%IF ( %DATE <= %ORIG_DATE) OR  (%DATE > %ORIG_DATE AND YEAR(%DATE)=YEAR(%ORIG_DATE))  %THEN 
    %IF (%DATE > %ORIG_DATE) %THEN %LET DATE=%ORIG_DATE; %END;

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE); TABLE "Default"  OUT=WORK.FUND11; RUN;

DATA WORK.FUND11; 
SET WORK.FUND11(WHERE (GAAP_BOOK_VALUE IS NOT NULL AND GAAP_BOOK_VALUE<>0)OR (GL_COST_ELIM IS NOT NULL AND GL_COST_ELIM<>0) OR (LASTVALUATION IS NOT NULL AND LASTVALUATION<>0));
 COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
 COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(%DATE);
RUN;

DATA WORK.FUNDBKMK(DROP= GAAP_BOOK_VALUE GL_COST_ELIM); SET  WORK.FUND11; RUN;

DATA WORK.DIR11 (KEEP = COMPANY_NAME SECURITY_ID POSITION_DATE INVEST_YEAR CURRENTCOST);
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND LENGTH(COMPANY_NAME)>0 AND (CURRENTCOST IS NOT NULL OR LASTVALUATION IS NOT NULL )  );
COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(POSITION_DATE);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
RUN;

DATA WORK.DIR11;
MERGE WORK.DIRECTMAST(IN=IN1) WORK.DIR11(IN=IN2); 
BY SECURITY_ID;
IF (IN1 AND IN2) THEN OUTPUT; 
END; 
RUN;

DATA WORK.FUND11(DROP = LASTVALUATION); SET WORK.FUND11; RUN;

DATA WORK.DIR11;
MERGE WORK.DIR11(IN=IN1) WORK.FUND11;
BY FUND  ;
IF (IN1) THEN OUTPUT;
End;
RUN; 

DATA WORK.DIR11(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM);
SET WORK.DIR11;
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

DATA WORK.DIRBKMK; SET WORK.DIR11; RUN;
%END;

%LET DATE = "31122012"d
%IF ( %DATE <= %ORIG_DATE) OR  (%DATE > %ORIG_DATE AND YEAR(%DATE)=YEAR(%ORIG_DATE))  %THEN 
    %IF (%DATE > %ORIG_DATE) %THEN %LET DATE=%ORIG_DATE; %END;

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE); TABLE "Default"  OUT=WORK.FUND12; RUN;

DATA WORK.FUND12; 
SET WORK.FUND12(WHERE (GAAP_BOOK_VALUE IS NOT NULL AND GAAP_BOOK_VALUE<>0)OR (GL_COST_ELIM IS NOT NULL AND GL_COST_ELIM<>0) OR (LASTVALUATION IS NOT NULL AND LASTVALUATION<>0));
 COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
 COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(%DATE);
RUN;

DATA WORK.FUNDBKMK(DROP= GAAP_BOOK_VALUE GL_COST_ELIM); SET WORK.FUNDBKMK WORK.FUND12; RUN;

DATA WORK.DIR12 (KEEP = COMPANY_NAME SECURITY_ID POSITION_DATE INVEST_YEAR CURRENTCOST LASTVALUATION);
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND LENGTH(COMPANY_NAME)>0 AND (CURRENTCOST IS NOT NULL OR LASTVALUATION IS NOT NULL));
COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(POSITION_DATE);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
RUN;

DATA WORK.DIR12;
MERGE WORK.DIRECTMAST(IN=IN1) WORK.DIR12(IN=IN2); 
BY SECURITY_ID;
IF (IN1 AND IN2) THEN OUTPUT; 
END; 
RUN;

DATA WORK.FUND12(DROP = LASTVALUATION); SET WORK.FUND12; RUN;

DATA WORK.DIR12;
MERGE WORK.DIR12(IN=IN1) WORK.FUND12;
BY FUND  ;
IF (IN1) THEN OUTPUT;
End;
RUN; 

DATA WORK.DIR12(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM);
SET WORK.DIR12;
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

DATA WORK.DIRBKMK; SET WORK.DIRBKMK WORK.DIR12; RUN;
%END;

%LET DATE = "31122013"d; 
%IF ( %DATE <= %ORIG_DATE) OR  (%DATE > %ORIG_DATE AND YEAR(%DATE)=YEAR(%ORIG_DATE))  %THEN 
    %IF (%DATE > %ORIG_DATE) %THEN %LET DATE=%ORIG_DATE; %END;

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE); TABLE "Default"  OUT=WORK.FUND13; RUN;

DATA WORK.FUND13; 
SET WORK.FUND13(WHERE (GAAP_BOOK_VALUE IS NOT NULL AND GAAP_BOOK_VALUE<>0)OR (GL_COST_ELIM IS NOT NULL AND GL_COST_ELIM<>0) OR (LASTVALUATION IS NOT NULL AND LASTVALUATION<>0));
 COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
 COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(%DATE);
RUN;

DATA WORK.FUNDBKMK(DROP= GAAP_BOOK_VALUE GL_COST_ELIM); SET WORK.FUNDBKMK WORK.FUND13; RUN;

DATA WORK.DIR13 (KEEP = COMPANY_NAME SECURITY_ID POSITION_DATE INVEST_YEAR CURRENTCOST LASTVALUATION);
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND LENGTH(COMPANY_NAME)>0 AND (CURRENTCOST IS NOT NULL OR LASTVALUATION IS NOT NULL )  );
COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(POSITION_DATE);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
RUN;

DATA WORK.DIR13;
MERGE WORK.DIRECTMAST(IN=IN1) WORK.DIR13(IN=IN2); 
BY SECURITY_ID;
IF (IN1 AND IN2) THEN OUTPUT; 
END; 
RUN;

DATA WORK.FUND13(DROP = LASTVALUATION); SET WORK.FUND13; RUN;

DATA WORK.DIR13;
MERGE WORK.DIR13(IN=IN1) WORK.FUND13;
BY FUND  ;
IF (IN1) THEN OUTPUT;
End;
RUN; 

DATA WORK.DIR13(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM);
SET WORK.DIR13;
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

DATA WORK.DIRBKMK; SET WORK.DIRBKMK WORK.DIR13; RUN;
%END;

%LET DATE = "31122014"d
%IF ( %DATE <= %ORIG_DATE) OR  (%DATE > %ORIG_DATE AND YEAR(%DATE)=YEAR(%ORIG_DATE))  %THEN 
    %IF (%DATE > %ORIG_DATE) %THEN %LET DATE=%ORIG_DATE; %END;

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE); TABLE "Default"  OUT=WORK.FUND14; RUN;

DATA WORK.FUND14; 
SET WORK.FUND14(WHERE (GAAP_BOOK_VALUE IS NOT NULL AND GAAP_BOOK_VALUE<>0)OR (GL_COST_ELIM IS NOT NULL AND GL_COST_ELIM<>0) OR (LASTVALUATION IS NOT NULL AND LASTVALUATION<>0));
 COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
 COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(%DATE);
RUN;

DATA WORK.FUNDBKMK(DROP= GAAP_BOOK_VALUE GL_COST_ELIM); SET WORK.FUNDBKMK WORK.FUND14; RUN;

DATA WORK.DIR14 (KEEP = COMPANY_NAME SECURITY_ID POSITION_DATE INVEST_YEAR CURRENTCOST LASTVALUATION);
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND LENGTH(COMPANY_NAME)>0 AND (CURRENTCOST IS NOT NULL OR LASTVALUATION IS NOT NULL )  );
COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(POSITION_DATE);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
RUN;

DATA WORK.DIR14;
MERGE WORK.DIRECTMAST(IN=IN1) WORK.DIR14(IN=IN2); 
BY SECURITY_ID;
IF (IN1 AND IN2) THEN OUTPUT; 
END; 
RUN;

DATA WORK.FUND14(DROP = LASTVALUATION); SET WORK.FUND14; RUN;

DATA WORK.DIR14;
MERGE WORK.DIR14(IN=IN1) WORK.FUND14;
BY FUND  ;
IF (IN1) THEN OUTPUT;
End;
RUN; 

DATA WORK.DIR14(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM);
SET WORK.DIR14;
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

DATA WORK.DIRBKMK; SET WORK.DIRBKMK WORK.DIR14; RUN;
%END;

%LET DATE = "31122015"d; 
%IF ( %DATE <= %ORIG_DATE) OR  (%DATE > %ORIG_DATE AND YEAR(%DATE)=YEAR(%ORIG_DATE))  %THEN 
    %IF (%DATE > %ORIG_DATE) %THEN %LET DATE=%ORIG_DATE; %END;

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE); TABLE "Default"  OUT=WORK.FUND15; RUN;

DATA WORK.FUND15; 
SET WORK.FUND15(WHERE (GAAP_BOOK_VALUE IS NOT NULL AND GAAP_BOOK_VALUE<>0)OR (GL_COST_ELIM IS NOT NULL AND GL_COST_ELIM<>0) OR (LASTVALUATION IS NOT NULL AND LASTVALUATION<>0));
 COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
 COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(%DATE);
RUN;

DATA WORK.FUNDBKMK(DROP= GAAP_BOOK_VALUE GL_COST_ELIM); SET WORK.FUNDBKMK WORK.FUND15; RUN;

DATA WORK.DIR15 (KEEP = COMPANY_NAME SECURITY_ID POSITION_DATE INVEST_YEAR CURRENTCOST LASTVALUATION);
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND LENGTH(COMPANY_NAME)>0 AND (CURRENTCOST IS NOT NULL OR LASTVALUATION IS NOT NULL ) );
COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(POSITION_DATE);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
RUN;

DATA WORK.DIR15;
MERGE WORK.DIRECTMAST(IN=IN1) WORK.DIR15(IN=IN2); 
BY SECURITY_ID;
IF (IN1 AND IN2) THEN OUTPUT; 
END; 
RUN;

DATA WORK.FUND15(DROP = LASTVALUATION); SET WORK.FUND15; RUN;

DATA WORK.DIR15;
MERGE WORK.DIR15(IN=IN1) WORK.FUND15;
BY FUND  ;
IF (IN1) THEN OUTPUT;
End;
RUN; 

DATA WORK.DIR15(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM);
SET WORK.DIR15;
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

DATA WORK.DIRBKMK; SET WORK.DIRBKMK WORK.DIR15; RUN;
%END;

%LET DATE = "31122016"d; 
%IF ( %DATE <= %ORIG_DATE) OR  (%DATE > %ORIG_DATE AND YEAR(%DATE)=YEAR(%ORIG_DATE))  %THEN 
    %IF (%DATE > %ORIG_DATE) %THEN %LET DATE=%ORIG_DATE; %END;

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE); TABLE "Default"  OUT=WORK.FUND16; RUN;

DATA WORK.FUND16; 
SET WORK.FUND16(WHERE (GAAP_BOOK_VALUE IS NOT NULL AND GAAP_BOOK_VALUE<>0)OR (GL_COST_ELIM IS NOT NULL AND GL_COST_ELIM<>0) OR (LASTVALUATION IS NOT NULL AND LASTVALUATION<>0));
 COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
 COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(%DATE);
RUN;

DATA WORK.FUNDBKMK(DROP= GAAP_BOOK_VALUE GL_COST_ELIM); SET WORK.FUNDBKMK WORK.FUND16; RUN;

DATA WORK.DIR16 (KEEP = COMPANY_NAME SECURITY_ID POSITION_DATE INVEST_YEAR CURRENTCOST LASTVALUATION);
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND LENGTH(COMPANY_NAME)>0 AND (CURRENTCOST IS NOT NULL OR LASTVALUATION IS NOT NULL ) );
COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(POSITION_DATE);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
RUN;

DATA WORK.DIR16;
MERGE WORK.DIRECTMAST(IN=IN1) WORK.DIR16(IN=IN2); 
BY SECURITY_ID;
IF (IN1 AND IN2) THEN OUTPUT; 
END; 
RUN;

DATA WORK.FUND16(DROP = LASTVALUATION); SET WORK.FUND16; RUN;

DATA WORK.DIR16;
MERGE WORK.DIR16(IN=IN1) WORK.FUND16;
BY FUND  ;
IF (IN1) THEN OUTPUT;
End;
RUN; 

DATA WORK.DIR16(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM);
SET WORK.DIR16;
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

DATA WORK.DIRBKMK; SET WORK.DIRBKMK WORK.DIR16; RUN;
//PROC PRINT DATA = WORK.DIRBKMK; RUN;
%END;

%LET DATE = "31122017"d; 
%IF ( %DATE <= %ORIG_DATE) OR  (%DATE > %ORIG_DATE AND YEAR(%DATE)=YEAR(%ORIG_DATE))  %THEN 
    %IF (%DATE > %ORIG_DATE) %THEN %LET DATE=%ORIG_DATE; %END;

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE); TABLE "Default"  OUT=WORK.FUND17; RUN;

DATA WORK.FUND17; 
SET WORK.FUND17(WHERE (GAAP_BOOK_VALUE IS NOT NULL AND GAAP_BOOK_VALUE<>0)OR (GL_COST_ELIM IS NOT NULL AND GL_COST_ELIM<>0) OR (LASTVALUATION IS NOT NULL AND LASTVALUATION<>0));
 COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
 COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(%DATE);
RUN;

DATA WORK.FUNDBKMK(DROP= GAAP_BOOK_VALUE GL_COST_ELIM); SET WORK.FUNDBKMK WORK.FUND17; RUN;

DATA WORK.DIR17 (KEEP = COMPANY_NAME SECURITY_ID POSITION_DATE INVEST_YEAR CURRENTCOST LASTVALUATION);
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND LENGTH(COMPANY_NAME)>0 AND (CURRENTCOST IS NOT NULL OR LASTVALUATION IS NOT NULL) );
COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(POSITION_DATE);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
RUN;

DATA WORK.DIR17;
MERGE WORK.DIRECTMAST(IN=IN1) WORK.DIR17(IN=IN2); 
BY SECURITY_ID;
IF (IN1 AND IN2) THEN OUTPUT; 
END; 
RUN;

DATA WORK.FUND17(DROP = LASTVALUATION); SET WORK.FUND17; RUN;

DATA WORK.DIR17;
MERGE WORK.DIR17(IN=IN1) WORK.FUND17;
BY FUND  ;
IF (IN1) THEN OUTPUT;
End;
RUN; 

DATA WORK.DIR17(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM);
SET WORK.DIR17;
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

DATA WORK.DIRBKMK; SET WORK.DIRBKMK WORK.DIR17; RUN;
%END;

%LET DATE = "31122018"d;      
%IF ( %DATE <= %ORIG_DATE) OR  (%DATE > %ORIG_DATE AND YEAR(%DATE)=YEAR(%ORIG_DATE))  %THEN 
    %IF (%DATE > %ORIG_DATE) %THEN %LET DATE=%ORIG_DATE; %END;

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE); TABLE "Default"  OUT=WORK.FUND18; RUN;

DATA WORK.FUND18; 
SET WORK.FUND18(WHERE (GAAP_BOOK_VALUE IS NOT NULL AND GAAP_BOOK_VALUE<>0)OR (GL_COST_ELIM IS NOT NULL AND GL_COST_ELIM<>0) OR (LASTVALUATION IS NOT NULL AND LASTVALUATION<>0));
 COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
 COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(%DATE);
RUN;

DATA WORK.FUNDBKMK(DROP= GAAP_BOOK_VALUE GL_COST_ELIM); SET WORK.FUNDBKMK WORK.FUND18; RUN;

DATA WORK.DIR18 (KEEP = COMPANY_NAME SECURITY_ID POSITION_DATE INVEST_YEAR CURRENTCOST LASTVALUATION);
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND LENGTH(COMPANY_NAME)>0 AND (CURRENTCOST IS NOT NULL OR LASTVALUATION IS NOT NULL));
COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(POSITION_DATE);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
RUN;

DATA WORK.DIR18;
MERGE WORK.DIRECTMAST(IN=IN1) WORK.DIR18(IN=IN2); 
BY SECURITY_ID;
IF (IN1 AND IN2) THEN OUTPUT; 
END; 
RUN;

DATA WORK.FUND18(DROP = LASTVALUATION); SET WORK.FUND18; RUN;

DATA WORK.DIR18;
MERGE WORK.DIR18(IN=IN1) WORK.FUND18;
BY FUND  ;
IF (IN1) THEN OUTPUT;
End;
RUN; 

DATA WORK.DIR18(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM);
SET WORK.DIR18;
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

DATA WORK.DIRBKMK; SET WORK.DIRBKMK WORK.DIR18; RUN;
%END;

%LET DATE = "31122019"d;      
%IF ( %DATE <= %ORIG_DATE) OR  (%DATE > %ORIG_DATE AND YEAR(%DATE)=YEAR(%ORIG_DATE))  %THEN 
    %IF (%DATE > %ORIG_DATE) %THEN %LET DATE=%ORIG_DATE; %END;

PROC FAQUERY Query="IT Admin - Program Queries\Positions-PortRev" (DATE=%DATE); TABLE "Default"  OUT=WORK.FUND19; RUN;

DATA WORK.FUND19; 
SET WORK.FUND19(WHERE (GAAP_BOOK_VALUE IS NOT NULL AND GAAP_BOOK_VALUE<>0)OR (GL_COST_ELIM IS NOT NULL AND GL_COST_ELIM<>0) OR (LASTVALUATION IS NOT NULL AND LASTVALUATION<>0));
 COLUMN CURRENTCOST  TYPE=DOUBLE;  CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM;
 COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(%DATE);
RUN;

DATA WORK.FUNDBKMK(DROP= GAAP_BOOK_VALUE GL_COST_ELIM); SET WORK.FUNDBKMK WORK.FUND19; RUN;

DATA WORK.DIR19 (KEEP = COMPANY_NAME SECURITY_ID POSITION_DATE INVEST_YEAR CURRENTCOST LASTVALUATION);
SET DCE.REFINSTRUMENTPOSITIONS (WHERE POSITION_DATE=%DATE AND LENGTH(COMPANY_NAME)>0 AND (CURRENTCOST IS NOT NULL OR LASTVALUATION IS NOT NULL ) );
COLUMN INVEST_YEAR TYPE=STRING; INVEST_YEAR = YEAR(POSITION_DATE);                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                
RUN;

DATA WORK.DIR19;
MERGE WORK.DIRECTMAST(IN=IN1) WORK.DIR19(IN=IN2); 
BY SECURITY_ID;
IF (IN1 AND IN2) THEN OUTPUT; 
END; 
RUN;

DATA WORK.FUND19(DROP = LASTVALUATION); SET WORK.FUND19; RUN;

DATA WORK.DIR19;
MERGE WORK.DIR19(IN=IN1) WORK.FUND19;
BY FUND  ;
IF (IN1) THEN OUTPUT;
End;
RUN; 

DATA WORK.DIR19(DROP=FUND_ID FUND INVESTORNAME GAAP_BOOK_VALUE GL_COST_ELIM);
SET WORK.DIR19;
     IF LP_TYPE = 'Fund' THEN CURRENTCOST = GAAP_BOOK_VALUE + GL_COST_ELIM; END;
RUN;

DATA WORK.DIRBKMK; SET WORK.DIRBKMK WORK.DIR19; RUN;

%END;

DATA WORK.FUNDBKMK;
SET WORK.FUNDBKMK;
COLUMN INVEST_TYPE TYPE=STRING; INVEST_TYPE = 'Funds';
RUN;
 
DATA WORK.FUNDBKMK;
MERGE WORK.FUNDMAST(IN=IN1) WORK.FUNDBKMK(IN=IN2); 
By FUND_ID INVESTORNAME;
IF (IN1 AND IN2) THEN OUTPUT; END; RUN;  

PROC MEANS DATA=WORK.FUNDBKMK OUT=WORK.FUNDBKMK;                                        
CLASS CURRENCY INVEST_YEAR ;
VAR INVEST_TYPE;
SUM CURRENTCOST (NAME = CURRENTCOST);  
SUM LASTVALUATION (NAME = LASTVALUATION);
RUN;
//PROC PRINT DATA =WORK.FUNDBKMK; RUN;

DATA WORK.DIRBKMK;
SET WORK.DIRBKMK;
COLUMN INVEST_TYPE TYPE=STRING; INVEST_TYPE = 'Directs';
RUN;

PROC MEANS DATA=WORK.DIRBKMK OUT=WORK.DIRBKMK;                                        
//CLASS FUND_ID VAL_YEAR;    
CLASS CURRENCY INVEST_YEAR ;
VAR INVEST_TYPE;
SUM CURRENTCOST (NAME = CURRENTCOST);  
SUM LASTVALUATION (NAME = LASTVALUATION);
RUN;

//PROC PRINT DATA=WORK.DIRBKMK; RUN;

DATA WORK.ALLBKMK; SET  WORK.FUNDBKMK WORK.DIRBKMK; RUN;

PROC MEANS DATA =WORK.ALLBKMK OUT=WORK.ALLBKMK;
CLASS CURRENCY INVEST_YEAR INVEST_TYPE ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
SUM CURRENTCOST(NAME=BOOK_VALUE); 
SUM LASTVALUATION(NAME=MARKET_VALUE);
RUN; 

DATA BOOKandMARKET;
MERGE WORK.ALLBKMK(IN=IN1) WORK.ALLPORT_CASHFLOW(IN=IN2); 
BY CURRENCY INVEST_YEAR INVEST_TYPE ;
IF (IN1 AND IN2) THEN OUTPUT; END; RUN; 

//PROC PRINT DATA=BOOKand
/*-----------------12. Book Value and Market Value--------*/   
