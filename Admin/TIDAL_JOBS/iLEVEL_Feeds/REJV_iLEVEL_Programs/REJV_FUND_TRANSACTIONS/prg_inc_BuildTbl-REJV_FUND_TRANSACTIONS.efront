/*
This script generates the transcations for REJV.
4 queries are used.
Fund Operations pulls the conventional eFront operations, this is constrained to the operations created or updated on or after the  LAST_MODIFIED parameter.
The "GAAP Book Value" query pulls just the GAAP Book Value for all funds. The IQID is a derived identifier using the IQID of the fund and the start and end date passed into the query.
The "GAAP Income" query pulls just the GAAP Income numbers, the IQID for them is derived from fund IQID and the quarter end date. 
    These have a transaction date of quarter end date and "as of date" of month end date.
    These are calculated with the start date of the beginning of the month
    
The "Current Funds" query was created to create a list of funds with transactions that impact GAAP Income (Income Analysis and Liquidations). 
If they aren't on the list, then we would filter them out at the end.

*/


//parameters set by Tidal CMD
%PARAM lastmodifieddate LABEL="Enter Last Modified Date for Transaction (MM/dd/yyyy 00:00:00)";
%PARAM EOM_BV_INCOME_ONLY LABEL="Get prior month's GAAP BV and Income only" TYPE=BOOLEAN;

//this is to optionally filter out the GAAp Book Value and GAAP Income records... just incase the business case should arrise, then it's just a tidal CMD change...
//NOT in use as of March 2022...
%PARAM NO_GAAP_BV_OR_INCOME LABEL="Filter Out GAAP Book Value and GAAP Income" TYPE=BOOLEAN;

%LET LASTMOD_QRY_DATE = TODAT(%lastmodifieddate);
%LET EOM_BV_INCOME_ONLY = %EOM_BV_INCOME_ONLY;
%LET NO_GAAP_BV_OR_INCOME = %NO_GAAP_BV_OR_INCOME;
//%LET MODE = 'DAILY_TRANSACTIONS'


//Get the daily transactions
PROC FAQUERY Query="IT Admin - Program Queries\Fund Transactions List - REJV - iLevel - Export Template" ([LAST_MODIFIED]=%LASTMOD_QRY_DATE);    
    TABLE "Fund Operations" OUT=WORK.QRY_FUND_OPERATIONS;
RUN;

DATA WORK.FUND_OPERATIONS (RENAME=([~COMMITTED_AMOUNT] = [COMMITTED_AMOUNT]));
    SET WORK.QRY_FUND_OPERATIONS;
RUN;
//PROC PRINT DATA = WORK.QRY_FUND_OPERATIONS; RUN;

DATA WORK.FUND_OPERATIONS (DROP = [MODIFIED_ON]
                                  [ALLOC_GL_WRITE_DOWN] 
                                  [ALLOC_GL_WRITE_DOWN_(STAT)] 
                                  [ALLOC_GL_WRITE_DOWN_(ELIM)] 
                                  [ALLOC_CALL__LEGAL_FEES_OUTSIDE_COMMITMENT] 
                                  [ALLOC_CALL__PROFESSIONAL_FEES_OUTSIDE_COMMITMENT]
                                  [ALLOC_GL_COST_(US_GAAP)]
                                  [ALLOC_GL_COST_-_ELIM]
                                  [CANCELLED]
                                  [DRAFT]
                                  );
                                  
   SET WORK.FUND_OPERATIONS; 
   
   COLUMN GAAP_BOOK_VALUE TYPE = DOUBLE;
   COLUMN AMOUNT_GL_INCOME TYPE = DOUBLE;
   COLUMN GAAP_INCOME TYPE = DOUBLE;
   COLUMN AS_OF_DATE TYPE = DATE;
   COLUMN PARAM_DATE TYPE = DATE;
   
   IF [TYPE] = 'IF: Intrinsic Value' AND [VALUATION] = NULL THEN [VALUATION] = 0; END;
   IF [TYPE] = 'IF: Commitment' OR [REMAINING_COMMITMENT] = 0 THEN [REMAINING_COMMITMENT] = NULL; END; 
RUN;



%IF (%EOM_BV_INCOME_ONLY = 'True') %THEN
    //End of Month data (GAAP Book Value and GAAP Income) from previous month dates
    //This is to pull the GAAP Book Value and GAAP Income Reported Values for previous month, would only run on Business Day 1-6 of current month
    %LET PRIOR_MONTH_DATE = DATEADD("MONTH",-1,%LASTMOD_QRY_DATE);
    %LET START_DATE = MONTHBEGDATE(%PRIOR_MONTH_DATE);
    %LET END_DATE = MONTHENDDATE(%PRIOR_MONTH_DATE);
    //TODO: work out prior quarter if needed...
    %LET PRIOR_QUARTER_DATE = DATEADD("QUARTER",-1,%LASTMOD_QRY_DATE);
    %LET START_QUARTER = QUARTERBEGDATE(%PRIOR_MONTH_DATE);
    %LET END_QUARTER = QUARTERENDDATE(%PRIOR_MONTH_DATE);
    
    //make as of date be the end of the prior month
    %LET AS_OF_DATE = END_DATE;
    
    //Keep the column structure but filter out the rows, IQID shouldn't be NULL.
    DATA WORK.FUND_OPERATIONS (WHERE = (IQID IS NULL));
        SET WORK.FUND_OPERATIONS;
    RUN;
    
%ELSE

    //End of Month data (GAAP Book Value and GAAP Income)
    %LET START_DATE = MONTHBEGDATE(%LASTMOD_QRY_DATE);
    %LET END_DATE = MONTHENDDATE(%LASTMOD_QRY_DATE);
    //TODO: get quarter beginning and end
    %LET START_QUARTER = QUARTERBEGDATE(%LASTMOD_QRY_DATE);
    %LET END_QUARTER = QUARTERENDDATE(%LASTMOD_QRY_DATE);
    
    //make as of date be the end of current month
    %LET AS_OF_DATE = END_DATE;
%END;

//PROC PRINT; PUT %END_DATE; RUN;

//I need this because the query pulls in the GAAP Income for all Funds, I need to limit it so I will join to this list
PROC FAQUERY Query="IT Admin - Program Queries\Fund Transactions List - REJV - iLevel - Export Template" ([START_DATE]=%START_QUARTER [END_DATE]=%END_DATE);    
    TABLE "Current Funds" OUT=WORK.CURRENT_FUNDS;
RUN;

//Get the gaap income data from the query and then add it to the existing query, 
//END_DATE is for the Surrogate IQID so that the as of date is factored into the MD5 hash of this generated ID.. it's later assigned as "AS_OF_DATE" below... it's the month end date or prior month end date depending on context
PROC FAQUERY Query="IT Admin - Program Queries\Fund Transactions List - REJV - iLevel - Export Template" ([START_DATE]=%START_QUARTER [END_DATE]=%END_DATE [END_OF_QUARTER]=%END_QUARTER);    
    TABLE "GAAP Income" OUT=WORK.QRY_GAAP_INCOME;
RUN;

//Get the gaap income data from the query and then add it to the existing query
PROC FAQUERY Query="IT Admin - Program Queries\Fund Transactions List - REJV - iLevel - Export Template" ([START_DATE]=%START_DATE [END_DATE]=%END_DATE);    
    TABLE "GAAP Book Value" OUT=WORK.QRY_GAAP_BOOK_VALUE;
RUN;

PROC SORT DATA= WORK.CURRENT_FUNDS OUT = WORK.CURRENT_FUNDS NODUPKEY;
    BY IQID;
RUN;

//PROC PRINT DATA = WORK.QRY_GAAP_INCOME; RUN;

DATA WORK.QRY_GAAP_INCOME;
    MERGE WORK.CURRENT_FUNDS (IN=L RENAME=([IQID]=FUND_IQID)) 
    WORK.QRY_GAAP_INCOME(IN=R);
    BY FUND_IQID;

    IF (L) 
    THEN OUTPUT;
    END;
    
    //requirement to post $0 transaction for active funds with null GAAP Income
    IF (R AND NOT L 
        AND ([FUND_STATUS]='RE Joint Venture' OR [FUND_STATUS]='Fund (Closed Ended)') 
            AND (
                    [AMOUNT_GL_INCOME] IS NULL 
                AND [AMOUNT_GL_UNREALIZED_INVESTMENT_GAIN_LOSS] IS NULL 
                AND [AMOUNT_DIST__INITIAL_INVESTOR_ORIGINATION_FEES] IS NULL)
            )    
    THEN [AMOUNT_GL_INCOME] = 0;
    OUTPUT;
    END;

RUN;
//PROC PRINT DATA = WORK.QRY_GAAP_INCOME; RUN;


DATA WORK.FUND_OPERATIONS (DROP = [AMOUNT_GL_COST_(US_GAAP)] [FUND_IQID] [SURROGATE_IQID] [FUND_STATUS] [SURROGATE_IQID]);
    SET WORK.FUND_OPERATIONS WORK.QRY_GAAP_INCOME WORK.QRY_GAAP_BOOK_VALUE;
    
    COLUMN GAAP_INCOME_ACTIVE TYPE = STRING;
    
    IF (TYPE = 'GAAP Income') THEN 
        IQID = SURROGATE_IQID; 
        //"transaction date" in ilevel is end of quarter and "as of date" is end of month
        //EFFECTIVE_DATE = %END_QUARTER;
        //AS_OF_DATE = %END_DATE;
        //as requested by REJV, effective date is the month end and asOfDate is end of quarter
        EFFECTIVE_DATE = %END_DATE;
        AS_OF_DATE = %END_QUARTER;
        
        GAAP_INCOME = [AMOUNT_GL_INCOME] + [AMOUNT_GL_UNREALIZED_INVESTMENT_GAIN_LOSS] + [AMOUNT_DIST__INITIAL_INVESTOR_ORIGINATION_FEES];
        
       /* IF ([FUND_STATUS]='Run Off/Sold' OR [FUND_STATUS]='Exited Fund' 
            AND ([AMOUNT_GL_INCOME] IS NULL AND [AMOUNT_GL_UNREALIZED_INVESTMENT_GAIN_LOSS] IS NULL AND [AMOUNT_DIST__INITIAL_INVESTOR_ORIGINATION_FEES] IS NULL)
        ) 
            THEN 
                GAAP_INCOME_ACTIVE = 'Inactive';
            ELSE
                GAAP_INCOME_ACTIVE = 'Active';
            END;
        */
    END;
    
    IF (TYPE = 'Book Value') THEN
        IQID = SURROGATE_IQID; 
        //transaction date is end of month for book value, no as of date here
        //EFFECTIVE_DATE = END_DATE;
        //as requested by REJV, effective/transaction ate is the month end and asOfDate should be end of quarter date
        EFFECTIVE_DATE = %END_DATE;
        
        //AS_OF_DATE = %END_QUARTER;
        //AS_OF_DATE = NULL;
        PARAM_DATE = %LASTMOD_QRY_DATE;
        
        
        GAAP_BOOK_VALUE = [AMOUNT_GL_COST_(US_GAAP)];
        
        IF GAAP_BOOK_VALUE = NULL THEN GAAP_BOOK_VALUE = 0; END;
    END;
RUN;

/*DATA WORK.FUND_OPERATIONS (WHERE = (GAAP_INCOME_ACTIVE='Active' OR GAAP_INCOME_ACTIVE IS NULL) DROP = [GAAP_INCOME_ACTIVE]);
    SET WORK.FUND_OPERATIONS;
RUN;*/


//This is an optional flag to remove the Book Value and GAAP Income records should this be a desired business case...
//NOT in use as of March 2022...
%IF (%NO_GAAP_BV_OR_INCOME = 'True') %THEN
    DATA WORK.FUND_OPERATIONS (WHERE = ([TYPE] <> 'Book Value') AND ([TYPE] <> 'GAAP Income'));
        SET WORK.FUND_OPERATIONS;
    RUN;
%END;
 
 

//PROC PRINT DATA = WORK.FUND_OPERATIONS; RUN;
//Export file here..
//CSV Export file path variables
%LET ENTITY = "TRANSACTIONS";
%LET FILE_NAME = "eFront_to_iLEVEL_REJV_FUND-"+%ENTITY;
%LET DATEFORMAT = "yyyyMMdd-HHMMss";
%LET CURRENT_DATETIME = FORMAT(NOW(), %DATEFORMAT);
%LET EXTENSION = "csv";
%LET PATH = GETTEMPPATH();
%LET CSV_FILE_TRANSACTIONS = %PATH+"\"+%FILE_NAME+"_"+%CURRENT_DATETIME+"."+%EXTENSION;

//Export the newly created DIRECTS table to CSV here...
//PROC EXPORTEXCEL FILE = %CSV_FILE_TRANSACTIONS; TABLE = WORK.FUND_OPERATIONS SHEETNAME = "transactions"; RUN;//
//PROC EXPORTEXCEL FILE = %CSV_FILE_TRANSACTIONS; TABLE = WORK.QRY_FUND_OPERATIONS_PIVOT SHEETNAME = "transactions-pivoted"; RUN;
    

PROC EXPORT DATA = WORK.FUND_OPERATIONS COMMA NOERROR FORCEQUOTE FILE = %CSV_FILE_TRANSACTIONS; RUN;


